function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { RuntimeError } from "@distributedlab/tools";
export class ProviderNotInitializedError extends RuntimeError {
    constructor(error = new TypeError('Provider is not initialized')){
        super(error);
        _define_property(this, "name", 'ProviderNotInitializedError');
    }
}
export class ProviderInjectedInstanceNotFoundError extends RuntimeError {
    constructor(error = new TypeError('Cant find injected provider instance in window object, please check your provider installation')){
        super(error);
        _define_property(this, "name", 'ProviderInjectedInstanceNotFoundError');
    }
}
export class ProviderChainNotFoundError extends RuntimeError {
    constructor(error = new TypeError('Cant detect chain in provider')){
        super(error);
        _define_property(this, "name", 'ProviderChainNotFoundError');
    }
}
export class ProviderChainDetailsNotFoundError extends RuntimeError {
    constructor(error = new TypeError('Cant find chains details in provider')){
        super(error);
        _define_property(this, "name", 'ProviderChainDetailsNotFoundError');
    }
}
export class ProviderUserRejectedRequest extends RuntimeError {
    constructor(error = new TypeError('User rejected request')){
        /**
     * @description ethers.js match provider `user denied` error message
     * and throw it's own error instance,
     * so we override error message with our own
     *
     * https://github.com/ethers-io/ethers.js/blob/13593809bd61ef24c01d79de82563540d77098db/src.ts/providers/provider-jsonrpc.ts#L822
     */ super('User rejected request', error);
        _define_property(this, "name", 'ProviderUserRejectedRequest');
    }
}
export class ProviderUnauthorized extends RuntimeError {
    constructor(error = new TypeError('Provider unauthorized')){
        super(error);
        _define_property(this, "name", 'ProviderUnauthorized');
    }
}
export class ProviderUnsupportedMethod extends RuntimeError {
    constructor(error = new TypeError('Provider not support this method')){
        super(error);
        _define_property(this, "name", 'ProviderUnsupportedMethod');
    }
}
export class ProviderDisconnected extends RuntimeError {
    constructor(error = new TypeError('Provider has been disconnected')){
        super(error);
        _define_property(this, "name", 'ProviderDisconnected');
    }
}
export class ProviderChainDisconnected extends RuntimeError {
    constructor(error = new TypeError('Provider chain has been disconnected')){
        super(error);
        _define_property(this, "name", 'ProviderChainDisconnected');
    }
}
export class ProviderParseError extends RuntimeError {
    constructor(error = new TypeError('Provider failed to parse')){
        super(error);
        _define_property(this, "name", 'ProviderParseError');
    }
}
export class ProviderInvalidRequest extends RuntimeError {
    constructor(error = new TypeError('Provider returned invalid request')){
        super(error);
        _define_property(this, "name", 'ProviderInvalidRequest');
    }
}
export class ProviderMethodNotFound extends RuntimeError {
    constructor(error = new TypeError('Provider method not implemented or not found')){
        super(error);
        _define_property(this, "name", 'ProviderMethodNotFound');
    }
}
export class ProviderInvalidParams extends RuntimeError {
    constructor(error = new TypeError('Provider returned invalid params')){
        super(error);
        _define_property(this, "name", 'ProviderInvalidParams');
    }
}
export class ProviderInternalError extends RuntimeError {
    constructor(error = new TypeError('Provider internal error')){
        super(error);
        _define_property(this, "name", 'ProviderInternalError');
    }
}
export class ProviderInvalidInput extends RuntimeError {
    constructor(error = new TypeError('Provider returned invalid input')){
        super(error);
        _define_property(this, "name", 'ProviderInvalidInput');
    }
}
export class ProviderResourceNotFound extends RuntimeError {
    constructor(error = new TypeError('Provider resource not found')){
        super(error);
        _define_property(this, "name", 'ProviderResourceNotFound');
    }
}
export class ProviderResourceUnavailable extends RuntimeError {
    constructor(error = new TypeError('Provider resource unavailable')){
        super(error);
        _define_property(this, "name", 'ProviderResourceUnavailable');
    }
}
export class ProviderTransactionRejected extends RuntimeError {
    constructor(error = new TypeError('Provider transaction rejected')){
        super(error);
        _define_property(this, "name", 'ProviderTransactionRejected');
    }
}
export class ProviderMethodNotSupported extends RuntimeError {
    constructor(error = new TypeError('Provider method not supported')){
        super(error);
        _define_property(this, "name", 'ProviderMethodNotSupported');
    }
}
export class ProviderLimitExceeded extends RuntimeError {
    constructor(error = new TypeError('Provider limit exceeded')){
        super(error);
        _define_property(this, "name", 'ProviderLimitExceeded');
    }
}
export class ProviderJsonRpcVersionNotSupported extends RuntimeError {
    constructor(error = new TypeError('Provider json rpc version not supported')){
        super(error);
        _define_property(this, "name", 'ProviderJsonRpcVersionNotSupported');
    }
}
export class ProviderJsonRpcInvalid extends RuntimeError {
    constructor(error = new TypeError('Provider json rpc invalid')){
        super(error);
        _define_property(this, "name", 'ProviderJsonRpcInvalid');
    }
}

//# sourceMappingURL=data:application/json;base64,