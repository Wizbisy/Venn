function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { CHAIN_TYPES, PROVIDER_EVENT_BUS_EVENTS, PROVIDERS } from "../../enums";
import { getEthExplorerAddressUrl, getEthExplorerTxUrl, hexToDecimal } from "../../helpers";
import { ProviderEventBus } from "./_event-bus";
export class FallbackEvmProvider extends ProviderEventBus {
    static get providerType() {
        return PROVIDERS.Fallback;
    }
    get chainType() {
        return CHAIN_TYPES.EVM;
    }
    get isConnected() {
        return Boolean(this.chainId);
    }
    get defaultEventPayload() {
        return {
            address: this.address,
            chainId: this.chainId,
            isConnected: this.isConnected
        };
    }
    init() {
        var _this = this;
        return _async_to_generator(function*() {
            const network = yield _this.provider.getNetwork();
            _this.chainId = hexToDecimal(network.chainId);
            _this.emit(PROVIDER_EVENT_BUS_EVENTS.Initiated, _this.defaultEventPayload);
        })();
    }
    getAddressUrl(chain, address) {
        return getEthExplorerAddressUrl(chain, address);
    }
    getTxUrl(chain, txHash) {
        return getEthExplorerTxUrl(chain, txHash);
    }
    getHashFromTx(txResponse) {
        return txResponse.transactionHash;
    }
    constructor(provider){
        super();
        _define_property(this, "provider", void 0);
        _define_property(this, "rawProvider", void 0);
        _define_property(this, "chainId", void 0);
        _define_property(this, "address", void 0);
        this.provider = provider;
        this.rawProvider = provider;
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wcm92aWRlcnMvd3JhcHBlZC9mYWxsYmFjay1ldm0udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHJvdmlkZXJzIH0gZnJvbSAnZXRoZXJzJ1xuXG5pbXBvcnQgeyBDSEFJTl9UWVBFUywgUFJPVklERVJfRVZFTlRfQlVTX0VWRU5UUywgUFJPVklERVJTIH0gZnJvbSAnQC9lbnVtcydcbmltcG9ydCB7XG4gIGdldEV0aEV4cGxvcmVyQWRkcmVzc1VybCxcbiAgZ2V0RXRoRXhwbG9yZXJUeFVybCxcbiAgaGV4VG9EZWNpbWFsLFxufSBmcm9tICdAL2hlbHBlcnMnXG5pbXBvcnQgdHlwZSB7XG4gIENoYWluLFxuICBDaGFpbklkLFxuICBFdGhUcmFuc2FjdGlvblJlc3BvbnNlLFxuICBQcm92aWRlclByb3h5LFxuICBSYXdQcm92aWRlcixcbiAgU29sYW5hVHJhbnNhY3Rpb25SZXNwb25zZSxcbiAgVHJhbnNhY3Rpb25SZXNwb25zZSxcbn0gZnJvbSAnQC90eXBlcydcblxuaW1wb3J0IHsgUHJvdmlkZXJFdmVudEJ1cyB9IGZyb20gJy4vX2V2ZW50LWJ1cydcblxuZXhwb3J0IGNsYXNzIEZhbGxiYWNrRXZtUHJvdmlkZXJcbiAgZXh0ZW5kcyBQcm92aWRlckV2ZW50QnVzXG4gIGltcGxlbWVudHMgUHJvdmlkZXJQcm94eVxue1xuICBwcm92aWRlcjogcHJvdmlkZXJzLldlYjNQcm92aWRlclxuICByYXdQcm92aWRlcjogUmF3UHJvdmlkZXJcblxuICBjaGFpbklkPzogQ2hhaW5JZFxuICBhZGRyZXNzPzogc3RyaW5nXG5cbiAgY29uc3RydWN0b3IocHJvdmlkZXI6IFJhd1Byb3ZpZGVyKSB7XG4gICAgc3VwZXIoKVxuXG4gICAgdGhpcy5wcm92aWRlciA9IHByb3ZpZGVyIGFzIHVua25vd24gYXMgcHJvdmlkZXJzLldlYjNQcm92aWRlclxuICAgIHRoaXMucmF3UHJvdmlkZXIgPSBwcm92aWRlclxuICB9XG5cbiAgc3RhdGljIGdldCBwcm92aWRlclR5cGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gUFJPVklERVJTLkZhbGxiYWNrXG4gIH1cblxuICBnZXQgY2hhaW5UeXBlKCk6IENIQUlOX1RZUEVTIHtcbiAgICByZXR1cm4gQ0hBSU5fVFlQRVMuRVZNXG4gIH1cblxuICBnZXQgaXNDb25uZWN0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy5jaGFpbklkKVxuICB9XG5cbiAgZ2V0IGRlZmF1bHRFdmVudFBheWxvYWQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFkZHJlc3M6IHRoaXMuYWRkcmVzcyxcbiAgICAgIGNoYWluSWQ6IHRoaXMuY2hhaW5JZCxcbiAgICAgIGlzQ29ubmVjdGVkOiB0aGlzLmlzQ29ubmVjdGVkLFxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGluaXQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgbmV0d29yayA9IGF3YWl0IHRoaXMucHJvdmlkZXIuZ2V0TmV0d29yaygpXG5cbiAgICB0aGlzLmNoYWluSWQgPSBoZXhUb0RlY2ltYWwobmV0d29yay5jaGFpbklkIGFzIENoYWluSWQpXG5cbiAgICB0aGlzLmVtaXQoUFJPVklERVJfRVZFTlRfQlVTX0VWRU5UUy5Jbml0aWF0ZWQsIHRoaXMuZGVmYXVsdEV2ZW50UGF5bG9hZClcbiAgfVxuXG4gIGdldEFkZHJlc3NVcmwoY2hhaW46IENoYWluLCBhZGRyZXNzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBnZXRFdGhFeHBsb3JlckFkZHJlc3NVcmwoY2hhaW4sIGFkZHJlc3MpXG4gIH1cblxuICBnZXRUeFVybChjaGFpbjogQ2hhaW4sIHR4SGFzaDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gZ2V0RXRoRXhwbG9yZXJUeFVybChjaGFpbiwgdHhIYXNoKVxuICB9XG5cbiAgZ2V0SGFzaEZyb21UeCh0eFJlc3BvbnNlOiBUcmFuc2FjdGlvblJlc3BvbnNlKTogc3RyaW5nIHtcbiAgICByZXR1cm4gKHR4UmVzcG9uc2UgYXMgRXRoVHJhbnNhY3Rpb25SZXNwb25zZSlcbiAgICAgIC50cmFuc2FjdGlvbkhhc2ggYXMgU29sYW5hVHJhbnNhY3Rpb25SZXNwb25zZVxuICB9XG59XG4iXSwibmFtZXMiOlsiQ0hBSU5fVFlQRVMiLCJQUk9WSURFUl9FVkVOVF9CVVNfRVZFTlRTIiwiUFJPVklERVJTIiwiZ2V0RXRoRXhwbG9yZXJBZGRyZXNzVXJsIiwiZ2V0RXRoRXhwbG9yZXJUeFVybCIsImhleFRvRGVjaW1hbCIsIlByb3ZpZGVyRXZlbnRCdXMiLCJGYWxsYmFja0V2bVByb3ZpZGVyIiwicHJvdmlkZXJUeXBlIiwiRmFsbGJhY2siLCJjaGFpblR5cGUiLCJFVk0iLCJpc0Nvbm5lY3RlZCIsIkJvb2xlYW4iLCJjaGFpbklkIiwiZGVmYXVsdEV2ZW50UGF5bG9hZCIsImFkZHJlc3MiLCJpbml0IiwibmV0d29yayIsInByb3ZpZGVyIiwiZ2V0TmV0d29yayIsImVtaXQiLCJJbml0aWF0ZWQiLCJnZXRBZGRyZXNzVXJsIiwiY2hhaW4iLCJnZXRUeFVybCIsInR4SGFzaCIsImdldEhhc2hGcm9tVHgiLCJ0eFJlc3BvbnNlIiwidHJhbnNhY3Rpb25IYXNoIiwiY29uc3RydWN0b3IiLCJyYXdQcm92aWRlciJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxTQUFTQSxXQUFXLEVBQUVDLHlCQUF5QixFQUFFQyxTQUFTLFFBQVEsY0FBUztBQUMzRSxTQUNFQyx3QkFBd0IsRUFDeEJDLG1CQUFtQixFQUNuQkMsWUFBWSxRQUNQLGdCQUFXO0FBV2xCLFNBQVNDLGdCQUFnQixRQUFRLGVBQWM7QUFFL0MsT0FBTyxNQUFNQyw0QkFDSEQ7SUFnQlIsV0FBV0UsZUFBdUI7UUFDaEMsT0FBT04sVUFBVU8sUUFBUTtJQUMzQjtJQUVBLElBQUlDLFlBQXlCO1FBQzNCLE9BQU9WLFlBQVlXLEdBQUc7SUFDeEI7SUFFQSxJQUFJQyxjQUF1QjtRQUN6QixPQUFPQyxRQUFRLElBQUksQ0FBQ0MsT0FBTztJQUM3QjtJQUVBLElBQUlDLHNCQUFzQjtRQUN4QixPQUFPO1lBQ0xDLFNBQVMsSUFBSSxDQUFDQSxPQUFPO1lBQ3JCRixTQUFTLElBQUksQ0FBQ0EsT0FBTztZQUNyQkYsYUFBYSxJQUFJLENBQUNBLFdBQVc7UUFDL0I7SUFDRjtJQUVNSzs7ZUFBTixvQkFBQTtZQUNFLE1BQU1DLFVBQVUsTUFBTSxNQUFLQyxRQUFRLENBQUNDLFVBQVU7WUFFOUMsTUFBS04sT0FBTyxHQUFHVCxhQUFhYSxRQUFRSixPQUFPO1lBRTNDLE1BQUtPLElBQUksQ0FBQ3BCLDBCQUEwQnFCLFNBQVMsRUFBRSxNQUFLUCxtQkFBbUI7UUFDekU7O0lBRUFRLGNBQWNDLEtBQVksRUFBRVIsT0FBZSxFQUFVO1FBQ25ELE9BQU9iLHlCQUF5QnFCLE9BQU9SO0lBQ3pDO0lBRUFTLFNBQVNELEtBQVksRUFBRUUsTUFBYyxFQUFVO1FBQzdDLE9BQU90QixvQkFBb0JvQixPQUFPRTtJQUNwQztJQUVBQyxjQUFjQyxVQUErQixFQUFVO1FBQ3JELE9BQU8sQUFBQ0EsV0FDTEMsZUFBZTtJQUNwQjtJQTlDQUMsWUFBWVgsUUFBcUIsQ0FBRTtRQUNqQyxLQUFLO1FBUFBBLHVCQUFBQSxZQUFBQSxLQUFBQTtRQUNBWSx1QkFBQUEsZUFBQUEsS0FBQUE7UUFFQWpCLHVCQUFBQSxXQUFBQSxLQUFBQTtRQUNBRSx1QkFBQUEsV0FBQUEsS0FBQUE7UUFLRSxJQUFJLENBQUNHLFFBQVEsR0FBR0E7UUFDaEIsSUFBSSxDQUFDWSxXQUFXLEdBQUdaO0lBQ3JCO0FBMENGIn0=