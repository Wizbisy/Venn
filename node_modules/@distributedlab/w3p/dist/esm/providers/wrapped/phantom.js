function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
import { clusterApiUrl, Connection } from "@solana/web3.js";
import { PROVIDER_EVENT_BUS_EVENTS, PROVIDERS } from "../../enums";
import { decodeSolanaTx, handleSolError } from "../../helpers/solana";
import { BaseSolanaProvider } from "./_base-solana";
/**
 * @description Represents a Phantom wallet.
 *
 * @example
 * ```js
 * import { createProvider, PhantomProvider } from '@rarimo/provider'
 *
 * const getPhantomWalletAddress = async () => {
 *   // Connect to the Phantom wallet in the browser using Web3.js, using the PhantomProvider interface to limit bundle size.
 *   const provider = await createProvider(PhantomProvider)
 *   await provider.connect()
 *
 *   // Get the address of the wallet
 *   console.log(provider.address)
 * }
 * ```
 */ export class PhantomProvider extends BaseSolanaProvider {
    static get providerType() {
        return PROVIDERS.Phantom;
    }
    signAndSendTx(txRequestBody) {
        var _this = this;
        return _async_to_generator(function*() {
            try {
                const txBody = typeof txRequestBody === 'string' ? decodeSolanaTx(txRequestBody) : txRequestBody;
                _this.emit(PROVIDER_EVENT_BUS_EVENTS.BeforeTxSent, {
                    txBody
                });
                const connection = new Connection(clusterApiUrl(_this.chainId));
                const { signature } = yield _this.provider.signAndSendTransaction(txBody);
                _this.emit(PROVIDER_EVENT_BUS_EVENTS.TxSent, {
                    txHash: signature
                });
                yield connection.confirmTransaction(signature);
                _this.emit(PROVIDER_EVENT_BUS_EVENTS.TxConfirmed, {
                    txResponse: signature
                });
                return signature;
            } catch (error) {
                handleSolError(error);
            }
            return '';
        })();
    }
    constructor(provider){
        super(provider);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wcm92aWRlcnMvd3JhcHBlZC9waGFudG9tLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHR5cGUgQ2x1c3RlcixcbiAgY2x1c3RlckFwaVVybCxcbiAgQ29ubmVjdGlvbixcbiAgdHlwZSBUcmFuc2FjdGlvbiBhcyBTb2xUcmFuc2FjdGlvbixcbn0gZnJvbSAnQHNvbGFuYS93ZWIzLmpzJ1xuXG5pbXBvcnQgeyBQUk9WSURFUl9FVkVOVF9CVVNfRVZFTlRTLCBQUk9WSURFUlMgfSBmcm9tICdAL2VudW1zJ1xuaW1wb3J0IHsgZGVjb2RlU29sYW5hVHgsIGhhbmRsZVNvbEVycm9yIH0gZnJvbSAnQC9oZWxwZXJzL3NvbGFuYSdcbmltcG9ydCB0eXBlIHtcbiAgUHJvdmlkZXJQcm94eSxcbiAgUmF3UHJvdmlkZXIsXG4gIFNvbGFuYVByb3ZpZGVyUnBjRXJyb3IsXG4gIFRyYW5zYWN0aW9uUmVzcG9uc2UsXG4gIFR4UmVxdWVzdEJvZHksXG59IGZyb20gJ0AvdHlwZXMnXG5cbmltcG9ydCB7IEJhc2VTb2xhbmFQcm92aWRlciB9IGZyb20gJy4vX2Jhc2Utc29sYW5hJ1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiBSZXByZXNlbnRzIGEgUGhhbnRvbSB3YWxsZXQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGpzXG4gKiBpbXBvcnQgeyBjcmVhdGVQcm92aWRlciwgUGhhbnRvbVByb3ZpZGVyIH0gZnJvbSAnQHJhcmltby9wcm92aWRlcidcbiAqXG4gKiBjb25zdCBnZXRQaGFudG9tV2FsbGV0QWRkcmVzcyA9IGFzeW5jICgpID0+IHtcbiAqICAgLy8gQ29ubmVjdCB0byB0aGUgUGhhbnRvbSB3YWxsZXQgaW4gdGhlIGJyb3dzZXIgdXNpbmcgV2ViMy5qcywgdXNpbmcgdGhlIFBoYW50b21Qcm92aWRlciBpbnRlcmZhY2UgdG8gbGltaXQgYnVuZGxlIHNpemUuXG4gKiAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgY3JlYXRlUHJvdmlkZXIoUGhhbnRvbVByb3ZpZGVyKVxuICogICBhd2FpdCBwcm92aWRlci5jb25uZWN0KClcbiAqXG4gKiAgIC8vIEdldCB0aGUgYWRkcmVzcyBvZiB0aGUgd2FsbGV0XG4gKiAgIGNvbnNvbGUubG9nKHByb3ZpZGVyLmFkZHJlc3MpXG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIFBoYW50b21Qcm92aWRlclxuICBleHRlbmRzIEJhc2VTb2xhbmFQcm92aWRlclxuICBpbXBsZW1lbnRzIFByb3ZpZGVyUHJveHlcbntcbiAgY29uc3RydWN0b3IocHJvdmlkZXI6IFJhd1Byb3ZpZGVyKSB7XG4gICAgc3VwZXIocHJvdmlkZXIpXG4gIH1cblxuICBzdGF0aWMgZ2V0IHByb3ZpZGVyVHlwZSgpOiBQUk9WSURFUlMge1xuICAgIHJldHVybiBQUk9WSURFUlMuUGhhbnRvbVxuICB9XG5cbiAgYXN5bmMgc2lnbkFuZFNlbmRUeChcbiAgICB0eFJlcXVlc3RCb2R5OiBUeFJlcXVlc3RCb2R5LFxuICApOiBQcm9taXNlPFRyYW5zYWN0aW9uUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdHhCb2R5ID1cbiAgICAgICAgdHlwZW9mIHR4UmVxdWVzdEJvZHkgPT09ICdzdHJpbmcnXG4gICAgICAgICAgPyBkZWNvZGVTb2xhbmFUeCh0eFJlcXVlc3RCb2R5KVxuICAgICAgICAgIDogdHhSZXF1ZXN0Qm9keVxuXG4gICAgICB0aGlzLmVtaXQoUFJPVklERVJfRVZFTlRfQlVTX0VWRU5UUy5CZWZvcmVUeFNlbnQsIHsgdHhCb2R5IH0pXG5cbiAgICAgIGNvbnN0IGNvbm5lY3Rpb24gPSBuZXcgQ29ubmVjdGlvbihjbHVzdGVyQXBpVXJsKHRoaXMuY2hhaW5JZCBhcyBDbHVzdGVyKSlcblxuICAgICAgY29uc3QgeyBzaWduYXR1cmUgfSA9IGF3YWl0IHRoaXMucHJvdmlkZXIuc2lnbkFuZFNlbmRUcmFuc2FjdGlvbihcbiAgICAgICAgdHhCb2R5IGFzIFNvbFRyYW5zYWN0aW9uLFxuICAgICAgKVxuXG4gICAgICB0aGlzLmVtaXQoUFJPVklERVJfRVZFTlRfQlVTX0VWRU5UUy5UeFNlbnQsIHtcbiAgICAgICAgdHhIYXNoOiBzaWduYXR1cmUsXG4gICAgICB9KVxuXG4gICAgICBhd2FpdCBjb25uZWN0aW9uLmNvbmZpcm1UcmFuc2FjdGlvbihzaWduYXR1cmUpXG5cbiAgICAgIHRoaXMuZW1pdChQUk9WSURFUl9FVkVOVF9CVVNfRVZFTlRTLlR4Q29uZmlybWVkLCB7XG4gICAgICAgIHR4UmVzcG9uc2U6IHNpZ25hdHVyZSxcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiBzaWduYXR1cmVcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaGFuZGxlU29sRXJyb3IoZXJyb3IgYXMgU29sYW5hUHJvdmlkZXJScGNFcnJvcilcbiAgICB9XG5cbiAgICByZXR1cm4gJydcbiAgfVxufVxuIl0sIm5hbWVzIjpbImNsdXN0ZXJBcGlVcmwiLCJDb25uZWN0aW9uIiwiUFJPVklERVJfRVZFTlRfQlVTX0VWRU5UUyIsIlBST1ZJREVSUyIsImRlY29kZVNvbGFuYVR4IiwiaGFuZGxlU29sRXJyb3IiLCJCYXNlU29sYW5hUHJvdmlkZXIiLCJQaGFudG9tUHJvdmlkZXIiLCJwcm92aWRlclR5cGUiLCJQaGFudG9tIiwic2lnbkFuZFNlbmRUeCIsInR4UmVxdWVzdEJvZHkiLCJ0eEJvZHkiLCJlbWl0IiwiQmVmb3JlVHhTZW50IiwiY29ubmVjdGlvbiIsImNoYWluSWQiLCJzaWduYXR1cmUiLCJwcm92aWRlciIsInNpZ25BbmRTZW5kVHJhbnNhY3Rpb24iLCJUeFNlbnQiLCJ0eEhhc2giLCJjb25maXJtVHJhbnNhY3Rpb24iLCJUeENvbmZpcm1lZCIsInR4UmVzcG9uc2UiLCJlcnJvciIsImNvbnN0cnVjdG9yIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLFNBRUVBLGFBQWEsRUFDYkMsVUFBVSxRQUVMLGtCQUFpQjtBQUV4QixTQUFTQyx5QkFBeUIsRUFBRUMsU0FBUyxRQUFRLGNBQVM7QUFDOUQsU0FBU0MsY0FBYyxFQUFFQyxjQUFjLFFBQVEsdUJBQWtCO0FBU2pFLFNBQVNDLGtCQUFrQixRQUFRLGlCQUFnQjtBQUVuRDs7Ozs7Ozs7Ozs7Ozs7OztDQWdCQyxHQUNELE9BQU8sTUFBTUMsd0JBQ0hEO0lBT1IsV0FBV0UsZUFBMEI7UUFDbkMsT0FBT0wsVUFBVU0sT0FBTztJQUMxQjtJQUVNQyxjQUNKQyxhQUE0Qjs7ZUFEOUIsb0JBQUE7WUFHRSxJQUFJO2dCQUNGLE1BQU1DLFNBQ0osT0FBT0Qsa0JBQWtCLFdBQ3JCUCxlQUFlTyxpQkFDZkE7Z0JBRU4sTUFBS0UsSUFBSSxDQUFDWCwwQkFBMEJZLFlBQVksRUFBRTtvQkFBRUY7Z0JBQU87Z0JBRTNELE1BQU1HLGFBQWEsSUFBSWQsV0FBV0QsY0FBYyxNQUFLZ0IsT0FBTztnQkFFNUQsTUFBTSxFQUFFQyxTQUFTLEVBQUUsR0FBRyxNQUFNLE1BQUtDLFFBQVEsQ0FBQ0Msc0JBQXNCLENBQzlEUDtnQkFHRixNQUFLQyxJQUFJLENBQUNYLDBCQUEwQmtCLE1BQU0sRUFBRTtvQkFDMUNDLFFBQVFKO2dCQUNWO2dCQUVBLE1BQU1GLFdBQVdPLGtCQUFrQixDQUFDTDtnQkFFcEMsTUFBS0osSUFBSSxDQUFDWCwwQkFBMEJxQixXQUFXLEVBQUU7b0JBQy9DQyxZQUFZUDtnQkFDZDtnQkFFQSxPQUFPQTtZQUNULEVBQUUsT0FBT1EsT0FBTztnQkFDZHBCLGVBQWVvQjtZQUNqQjtZQUVBLE9BQU87UUFDVDs7SUF6Q0FDLFlBQVlSLFFBQXFCLENBQUU7UUFDakMsS0FBSyxDQUFDQTtJQUNSO0FBd0NGIn0=