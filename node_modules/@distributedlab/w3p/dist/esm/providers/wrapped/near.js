function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { NEAR_CHAINS, PROVIDER_EVENT_BUS_EVENTS, PROVIDERS } from "../../enums";
import { getNearExplorerAddressUrl, getNearExplorerTxUrl, handleNearError } from "../../helpers/near";
import { ProviderEventBus } from "./_event-bus";
export class NearProvider extends ProviderEventBus {
    static get providerType() {
        return PROVIDERS.Near;
    }
    get isConnected() {
        return Boolean(this.chainId && this.address);
    }
    get defaultEventPayload() {
        return {
            chainId: this.chainId,
            address: this.address,
            isConnected: this.isConnected
        };
    }
    init() {
        var _this = this;
        return _async_to_generator(function*() {
            try {
                yield _this.provider.init();
                _this.updateProviderState();
                _this.emit(PROVIDER_EVENT_BUS_EVENTS.Initiated, _this.defaultEventPayload);
            } catch (error) {
                handleNearError(error);
            }
        })();
    }
    updateProviderState() {
        var _this_provider_selector, _this_provider;
        const networkId = (_this_provider_selector = this.provider.selector) === null || _this_provider_selector === void 0 ? void 0 : _this_provider_selector.options.network.networkId;
        this.address = ((_this_provider = this.provider) === null || _this_provider === void 0 ? void 0 : _this_provider.accountId) || '';
        this.chainId = networkId || NEAR_CHAINS.TestNet;
    }
    switchChain(chainId) {
        var _this = this;
        return _async_to_generator(function*() {
            _this.chainId = chainId;
            _this.emit(PROVIDER_EVENT_BUS_EVENTS.ChainChanged, _this.defaultEventPayload);
        })();
    }
    connect() {
        var _this = this;
        return _async_to_generator(function*() {
            try {
                yield _this.provider.signIn();
                yield _this.updateProviderState();
                _this.emit(PROVIDER_EVENT_BUS_EVENTS.Connect, _this.defaultEventPayload);
            } catch (error) {
                handleNearError(error);
            }
        })();
    }
    disconnect() {
        var _this = this;
        return _async_to_generator(function*() {
            try {
                yield _this.provider.signOut();
                _this.updateProviderState();
                _this.emit(PROVIDER_EVENT_BUS_EVENTS.Disconnect, _this.defaultEventPayload);
            } catch (error) {
                handleNearError(error);
            }
        })();
    }
    getHashFromTxResponse(txResponse) {
        const transactionResponse = txResponse;
        return transactionResponse.map((el)=>el.transaction.hash).join(',');
    }
    getTxUrl(chain, txHash) {
        return getNearExplorerTxUrl(chain, txHash);
    }
    getAddressUrl(chain, address) {
        return getNearExplorerAddressUrl(chain, address);
    }
    signAndSendTx(txRequestBody) {
        var _this = this;
        return _async_to_generator(function*() {
            try {
                _this.emit(PROVIDER_EVENT_BUS_EVENTS.BeforeTxSent, {
                    txBody: txRequestBody
                });
                const txResponse = yield _this.provider.signAndSendTxs(txRequestBody);
                _this.emit(PROVIDER_EVENT_BUS_EVENTS.TxSent, {
                    txResponse
                });
                return txResponse;
            } catch (error) {
                handleNearError(error);
            }
        })();
    }
    constructor(provider){
        super();
        _define_property(this, "provider", void 0);
        _define_property(this, "rawProvider", void 0);
        _define_property(this, "chainId", void 0);
        _define_property(this, "address", void 0);
        this.provider = provider;
        this.rawProvider = provider;
    }
}

//# sourceMappingURL=data:application/json;base64,