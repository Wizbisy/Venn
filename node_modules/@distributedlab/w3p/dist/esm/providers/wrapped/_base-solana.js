function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { PublicKey } from "@solana/web3.js";
import { CHAIN_TYPES, PROVIDER_EVENT_BUS_EVENTS, PROVIDER_EVENTS, SOLANA_CHAINS } from "../../enums";
import { getSolExplorerAddressUrl, getSolExplorerTxUrl, handleSolError } from "../../helpers/solana";
import { ProviderEventBus } from "./_event-bus";
const getAddress = (publicKey)=>{
    return publicKey ? new PublicKey(publicKey).toBase58() : '';
};
export class BaseSolanaProvider extends ProviderEventBus {
    get chainType() {
        return CHAIN_TYPES.Solana;
    }
    get isConnected() {
        return Boolean(this.chainId && this.address);
    }
    get defaultEventPayload() {
        return {
            chainId: this.chainId,
            address: this.address,
            isConnected: this.isConnected
        };
    }
    init() {
        var _this = this;
        return _async_to_generator(function*() {
            _this.setListeners();
            _this.address = getAddress(_this.provider.publicKey);
            _this.chainId = SOLANA_CHAINS.DevNet;
            _this.emit(PROVIDER_EVENT_BUS_EVENTS.Initiated, _this.defaultEventPayload);
        })();
    }
    switchChain(chainId) {
        var _this = this;
        return _async_to_generator(function*() {
            try {
                _this.chainId = chainId;
                _this.emit(PROVIDER_EVENT_BUS_EVENTS.ChainChanged, _this.defaultEventPayload);
            } catch (error) {
                handleSolError(error);
            }
        })();
    }
    connect() {
        var _this = this;
        return _async_to_generator(function*() {
            try {
                yield _this.provider.connect();
            } catch (error) {
                handleSolError(error);
            }
        })();
    }
    getAddressUrl(chain, address) {
        return getSolExplorerAddressUrl(chain, address);
    }
    getTxUrl(chain, txHash) {
        return getSolExplorerTxUrl(chain, txHash);
    }
    getHashFromTx(txResponse) {
        return txResponse;
    }
    signAndSendTx(// eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    txRequestBody) {
        return _async_to_generator(function*() {
            throw new TypeError('Method should be implemented in extender class');
        })();
    }
    setListeners() {
        this.provider.on(PROVIDER_EVENTS.Connect, ()=>{
            this.address = getAddress(this.provider.publicKey);
            this.emit(PROVIDER_EVENT_BUS_EVENTS.Connect, this.defaultEventPayload);
        });
        this.provider.on(PROVIDER_EVENTS.Disconnect, ()=>{
            this.address = getAddress(this.provider.publicKey);
            this.emit(PROVIDER_EVENT_BUS_EVENTS.Disconnect, this.defaultEventPayload);
        });
        this.provider.on(PROVIDER_EVENTS.AccountChanged, ()=>{
            this.address = getAddress(this.provider.publicKey);
            this.emit(PROVIDER_EVENT_BUS_EVENTS.AccountChanged, this.defaultEventPayload);
        });
    }
    constructor(provider){
        super();
        _define_property(this, "provider", void 0);
        _define_property(this, "rawProvider", void 0);
        _define_property(this, "chainId", void 0);
        _define_property(this, "address", void 0);
        this.provider = provider;
        this.rawProvider = provider;
    }
}

//# sourceMappingURL=data:application/json;base64,