function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
import { clusterApiUrl, Connection } from "@solana/web3.js";
import { PROVIDER_EVENT_BUS_EVENTS, PROVIDERS } from "../../enums";
import { decodeSolanaTx, handleSolError } from "../../helpers/solana";
import { BaseSolanaProvider } from "./_base-solana";
/**
 * @description Represents a Solflare wallet.
 *
 * @example
 * ```js
 * import { createProvider, SolflareProvider } from '@rarimo/provider'
 *
 * const getSolflareWalletAddress = async () => {
 *   // Connect to the Solflare wallet in the browser using Web3.js, using the SolflareProvider interface to limit bundle size.
 *   const provider = await createProvider(SolflareProvider)
 *   await provider.connect()
 *
 *   // Get the address of the wallet
 *   console.log(provider.address)
 * }
 * ```
 */ export class SolflareProvider extends BaseSolanaProvider {
    static get providerType() {
        return PROVIDERS.Solflare;
    }
    signAndSendTx(txRequestBody) {
        var _this = this;
        return _async_to_generator(function*() {
            try {
                const txBody = typeof txRequestBody === 'string' ? decodeSolanaTx(txRequestBody) : txRequestBody;
                _this.emit(PROVIDER_EVENT_BUS_EVENTS.BeforeTxSent, {
                    txBody
                });
                const signedTx = yield _this.provider.signTransaction(txBody);
                const connection = new Connection(clusterApiUrl(_this.chainId));
                const signature = yield connection.sendRawTransaction(signedTx.serialize());
                _this.emit(PROVIDER_EVENT_BUS_EVENTS.TxSent, {
                    txHash: signature
                });
                yield connection.confirmTransaction(signature);
                _this.emit(PROVIDER_EVENT_BUS_EVENTS.TxConfirmed, {
                    txResponse: signature
                });
                return signature;
            } catch (error) {
                handleSolError(error);
            }
            return '';
        })();
    }
    constructor(provider){
        super(provider);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wcm92aWRlcnMvd3JhcHBlZC9zb2xmbGFyZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICB0eXBlIENsdXN0ZXIsXG4gIGNsdXN0ZXJBcGlVcmwsXG4gIENvbm5lY3Rpb24sXG4gIHR5cGUgVHJhbnNhY3Rpb24gYXMgU29sVHJhbnNhY3Rpb24sXG59IGZyb20gJ0Bzb2xhbmEvd2ViMy5qcydcblxuaW1wb3J0IHsgUFJPVklERVJfRVZFTlRfQlVTX0VWRU5UUywgUFJPVklERVJTIH0gZnJvbSAnQC9lbnVtcydcbmltcG9ydCB7IGRlY29kZVNvbGFuYVR4LCBoYW5kbGVTb2xFcnJvciB9IGZyb20gJ0AvaGVscGVycy9zb2xhbmEnXG5pbXBvcnQgdHlwZSB7XG4gIFByb3ZpZGVyUHJveHksXG4gIFJhd1Byb3ZpZGVyLFxuICBTb2xhbmFQcm92aWRlclJwY0Vycm9yLFxuICBUcmFuc2FjdGlvblJlc3BvbnNlLFxuICBUeFJlcXVlc3RCb2R5LFxufSBmcm9tICdAL3R5cGVzJ1xuXG5pbXBvcnQgeyBCYXNlU29sYW5hUHJvdmlkZXIgfSBmcm9tICcuL19iYXNlLXNvbGFuYSdcblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gUmVwcmVzZW50cyBhIFNvbGZsYXJlIHdhbGxldC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBganNcbiAqIGltcG9ydCB7IGNyZWF0ZVByb3ZpZGVyLCBTb2xmbGFyZVByb3ZpZGVyIH0gZnJvbSAnQHJhcmltby9wcm92aWRlcidcbiAqXG4gKiBjb25zdCBnZXRTb2xmbGFyZVdhbGxldEFkZHJlc3MgPSBhc3luYyAoKSA9PiB7XG4gKiAgIC8vIENvbm5lY3QgdG8gdGhlIFNvbGZsYXJlIHdhbGxldCBpbiB0aGUgYnJvd3NlciB1c2luZyBXZWIzLmpzLCB1c2luZyB0aGUgU29sZmxhcmVQcm92aWRlciBpbnRlcmZhY2UgdG8gbGltaXQgYnVuZGxlIHNpemUuXG4gKiAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgY3JlYXRlUHJvdmlkZXIoU29sZmxhcmVQcm92aWRlcilcbiAqICAgYXdhaXQgcHJvdmlkZXIuY29ubmVjdCgpXG4gKlxuICogICAvLyBHZXQgdGhlIGFkZHJlc3Mgb2YgdGhlIHdhbGxldFxuICogICBjb25zb2xlLmxvZyhwcm92aWRlci5hZGRyZXNzKVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBTb2xmbGFyZVByb3ZpZGVyXG4gIGV4dGVuZHMgQmFzZVNvbGFuYVByb3ZpZGVyXG4gIGltcGxlbWVudHMgUHJvdmlkZXJQcm94eVxue1xuICBjb25zdHJ1Y3Rvcihwcm92aWRlcjogUmF3UHJvdmlkZXIpIHtcbiAgICBzdXBlcihwcm92aWRlcilcbiAgfVxuXG4gIHN0YXRpYyBnZXQgcHJvdmlkZXJUeXBlKCk6IFBST1ZJREVSUyB7XG4gICAgcmV0dXJuIFBST1ZJREVSUy5Tb2xmbGFyZVxuICB9XG5cbiAgYXN5bmMgc2lnbkFuZFNlbmRUeChcbiAgICB0eFJlcXVlc3RCb2R5OiBUeFJlcXVlc3RCb2R5LFxuICApOiBQcm9taXNlPFRyYW5zYWN0aW9uUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdHhCb2R5ID1cbiAgICAgICAgdHlwZW9mIHR4UmVxdWVzdEJvZHkgPT09ICdzdHJpbmcnXG4gICAgICAgICAgPyBkZWNvZGVTb2xhbmFUeCh0eFJlcXVlc3RCb2R5KVxuICAgICAgICAgIDogdHhSZXF1ZXN0Qm9keVxuXG4gICAgICB0aGlzLmVtaXQoUFJPVklERVJfRVZFTlRfQlVTX0VWRU5UUy5CZWZvcmVUeFNlbnQsIHsgdHhCb2R5IH0pXG5cbiAgICAgIGNvbnN0IHNpZ25lZFR4ID0gYXdhaXQgdGhpcy5wcm92aWRlci5zaWduVHJhbnNhY3Rpb24oXG4gICAgICAgIHR4Qm9keSBhcyBTb2xUcmFuc2FjdGlvbixcbiAgICAgIClcblxuICAgICAgY29uc3QgY29ubmVjdGlvbiA9IG5ldyBDb25uZWN0aW9uKGNsdXN0ZXJBcGlVcmwodGhpcy5jaGFpbklkIGFzIENsdXN0ZXIpKVxuXG4gICAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCBjb25uZWN0aW9uLnNlbmRSYXdUcmFuc2FjdGlvbihcbiAgICAgICAgc2lnbmVkVHguc2VyaWFsaXplKCksXG4gICAgICApXG5cbiAgICAgIHRoaXMuZW1pdChQUk9WSURFUl9FVkVOVF9CVVNfRVZFTlRTLlR4U2VudCwge1xuICAgICAgICB0eEhhc2g6IHNpZ25hdHVyZSxcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IGNvbm5lY3Rpb24uY29uZmlybVRyYW5zYWN0aW9uKHNpZ25hdHVyZSlcblxuICAgICAgdGhpcy5lbWl0KFBST1ZJREVSX0VWRU5UX0JVU19FVkVOVFMuVHhDb25maXJtZWQsIHtcbiAgICAgICAgdHhSZXNwb25zZTogc2lnbmF0dXJlLFxuICAgICAgfSlcblxuICAgICAgcmV0dXJuIHNpZ25hdHVyZVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBoYW5kbGVTb2xFcnJvcihlcnJvciBhcyBTb2xhbmFQcm92aWRlclJwY0Vycm9yKVxuICAgIH1cblxuICAgIHJldHVybiAnJ1xuICB9XG59XG4iXSwibmFtZXMiOlsiY2x1c3RlckFwaVVybCIsIkNvbm5lY3Rpb24iLCJQUk9WSURFUl9FVkVOVF9CVVNfRVZFTlRTIiwiUFJPVklERVJTIiwiZGVjb2RlU29sYW5hVHgiLCJoYW5kbGVTb2xFcnJvciIsIkJhc2VTb2xhbmFQcm92aWRlciIsIlNvbGZsYXJlUHJvdmlkZXIiLCJwcm92aWRlclR5cGUiLCJTb2xmbGFyZSIsInNpZ25BbmRTZW5kVHgiLCJ0eFJlcXVlc3RCb2R5IiwidHhCb2R5IiwiZW1pdCIsIkJlZm9yZVR4U2VudCIsInNpZ25lZFR4IiwicHJvdmlkZXIiLCJzaWduVHJhbnNhY3Rpb24iLCJjb25uZWN0aW9uIiwiY2hhaW5JZCIsInNpZ25hdHVyZSIsInNlbmRSYXdUcmFuc2FjdGlvbiIsInNlcmlhbGl6ZSIsIlR4U2VudCIsInR4SGFzaCIsImNvbmZpcm1UcmFuc2FjdGlvbiIsIlR4Q29uZmlybWVkIiwidHhSZXNwb25zZSIsImVycm9yIiwiY29uc3RydWN0b3IiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLFNBRUVBLGFBQWEsRUFDYkMsVUFBVSxRQUVMLGtCQUFpQjtBQUV4QixTQUFTQyx5QkFBeUIsRUFBRUMsU0FBUyxRQUFRLGNBQVM7QUFDOUQsU0FBU0MsY0FBYyxFQUFFQyxjQUFjLFFBQVEsdUJBQWtCO0FBU2pFLFNBQVNDLGtCQUFrQixRQUFRLGlCQUFnQjtBQUVuRDs7Ozs7Ozs7Ozs7Ozs7OztDQWdCQyxHQUNELE9BQU8sTUFBTUMseUJBQ0hEO0lBT1IsV0FBV0UsZUFBMEI7UUFDbkMsT0FBT0wsVUFBVU0sUUFBUTtJQUMzQjtJQUVNQyxjQUNKQyxhQUE0Qjs7ZUFEOUIsb0JBQUE7WUFHRSxJQUFJO2dCQUNGLE1BQU1DLFNBQ0osT0FBT0Qsa0JBQWtCLFdBQ3JCUCxlQUFlTyxpQkFDZkE7Z0JBRU4sTUFBS0UsSUFBSSxDQUFDWCwwQkFBMEJZLFlBQVksRUFBRTtvQkFBRUY7Z0JBQU87Z0JBRTNELE1BQU1HLFdBQVcsTUFBTSxNQUFLQyxRQUFRLENBQUNDLGVBQWUsQ0FDbERMO2dCQUdGLE1BQU1NLGFBQWEsSUFBSWpCLFdBQVdELGNBQWMsTUFBS21CLE9BQU87Z0JBRTVELE1BQU1DLFlBQVksTUFBTUYsV0FBV0csa0JBQWtCLENBQ25ETixTQUFTTyxTQUFTO2dCQUdwQixNQUFLVCxJQUFJLENBQUNYLDBCQUEwQnFCLE1BQU0sRUFBRTtvQkFDMUNDLFFBQVFKO2dCQUNWO2dCQUVBLE1BQU1GLFdBQVdPLGtCQUFrQixDQUFDTDtnQkFFcEMsTUFBS1AsSUFBSSxDQUFDWCwwQkFBMEJ3QixXQUFXLEVBQUU7b0JBQy9DQyxZQUFZUDtnQkFDZDtnQkFFQSxPQUFPQTtZQUNULEVBQUUsT0FBT1EsT0FBTztnQkFDZHZCLGVBQWV1QjtZQUNqQjtZQUVBLE9BQU87UUFDVDs7SUE3Q0FDLFlBQVliLFFBQXFCLENBQUU7UUFDakMsS0FBSyxDQUFDQTtJQUNSO0FBNENGIn0=