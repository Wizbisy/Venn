function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { providers } from "ethers";
import { CHAIN_TYPES, PROVIDER_EVENT_BUS_EVENTS, PROVIDER_EVENTS } from "../../enums";
import { hexToDecimal } from "../../helpers/amount";
import { connectEthAccounts, getEthExplorerAddressUrl, getEthExplorerTxUrl, requestAddEthChain, requestSwitchEthChain } from "../../helpers/eth";
import { ProviderEventBus } from "./_event-bus";
export class BaseEVMProvider extends ProviderEventBus {
    get chainType() {
        return CHAIN_TYPES.EVM;
    }
    get isConnected() {
        return Boolean(this.chainId && this.address);
    }
    get defaultEventPayload() {
        return {
            address: this.address,
            chainId: this.chainId,
            isConnected: this.isConnected
        };
    }
    init() {
        var _this = this;
        return _async_to_generator(function*() {
            yield _this.setListeners();
            const currentAccounts = yield _this.provider.listAccounts();
            const network = yield _this.provider.getNetwork();
            _this.address = currentAccounts[0];
            _this.chainId = hexToDecimal(network.chainId);
            _this.emit(PROVIDER_EVENT_BUS_EVENTS.Initiated, _this.defaultEventPayload);
        })();
    }
    switchChain(chainId) {
        var _this = this;
        return _async_to_generator(function*() {
            yield requestSwitchEthChain(_this.provider, chainId);
        })();
    }
    addChain(chain) {
        var _this = this;
        return _async_to_generator(function*() {
            yield requestAddEthChain(_this.provider, chain);
        })();
    }
    connect() {
        var _this = this;
        return _async_to_generator(function*() {
            yield connectEthAccounts(_this.provider);
        })();
    }
    getAddressUrl(chain, address) {
        return getEthExplorerAddressUrl(chain, address);
    }
    getTxUrl(chain, txHash) {
        return getEthExplorerTxUrl(chain, txHash);
    }
    getHashFromTx(txResponse) {
        return txResponse.transactionHash;
    }
    signAndSendTx(tx) {
        var _this = this;
        return _async_to_generator(function*() {
            _this.emit(PROVIDER_EVENT_BUS_EVENTS.BeforeTxSent, {
                txBody: tx
            });
            const transactionResponse = yield _this.provider.getSigner().sendTransaction(tx);
            _this.emit(PROVIDER_EVENT_BUS_EVENTS.TxSent, {
                txHash: transactionResponse.hash
            });
            const receipt = yield transactionResponse.wait();
            _this.emit(PROVIDER_EVENT_BUS_EVENTS.TxConfirmed, {
                txResponse: receipt
            });
            return receipt;
        })();
    }
    signMessage(message) {
        var _this = this;
        return _async_to_generator(function*() {
            return _this.provider.getSigner().signMessage(message);
        })();
    }
    setListeners() {
        var _this = this;
        return _async_to_generator(function*() {
            const stubProvider = _this.provider.provider;
            stubProvider.on(PROVIDER_EVENTS.AccountsChanged, /*#__PURE__*/ _async_to_generator(function*() {
                const currentAccounts = yield _this.provider.listAccounts();
                var _currentAccounts_;
                _this.address = (_currentAccounts_ = currentAccounts[0]) !== null && _currentAccounts_ !== void 0 ? _currentAccounts_ : '';
                _this.emit(PROVIDER_EVENT_BUS_EVENTS.AccountChanged, _this.defaultEventPayload);
                _this.emit(_this.isConnected ? PROVIDER_EVENT_BUS_EVENTS.Connect : PROVIDER_EVENT_BUS_EVENTS.Disconnect, _this.defaultEventPayload);
            }));
            stubProvider.on(PROVIDER_EVENTS.ChainChanged, (chainId)=>{
                _this.chainId = hexToDecimal(chainId);
                _this.emit(PROVIDER_EVENT_BUS_EVENTS.ChainChanged, _this.defaultEventPayload);
            });
        })();
    }
    constructor(provider){
        super();
        _define_property(this, "provider", void 0);
        _define_property(this, "rawProvider", void 0);
        _define_property(this, "chainId", void 0);
        _define_property(this, "address", void 0);
        this.provider = new providers.Web3Provider(provider, 'any');
        this.rawProvider = provider;
    }
}

//# sourceMappingURL=data:application/json;base64,