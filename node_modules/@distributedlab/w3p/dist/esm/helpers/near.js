import { utils } from "near-api-js";
import { EIP1193, EIP1474 } from "../enums";
import { errors } from "../errors";
export const MAX_GAS_LIMIT = '300000000000000';
export const NO_DEPOSIT = '0';
export const nearToYocto = (amount)=>{
    return utils.format.parseNearAmount(amount);
};
export const yoctoToNear = (amount)=>{
    return utils.format.formatNearAmount(amount);
};
export function getNearExplorerTxUrl(explorerUrl, txHash) {
    return `${explorerUrl}/transactions/${txHash}`;
}
export function getNearExplorerAddressUrl(explorerUrl, address) {
    return `${explorerUrl}/accounts/${address}`;
}
export function handleNearError(error) {
    switch(error.code){
        case EIP1193.UserRejectedRequest:
            throw new errors.ProviderUserRejectedRequest();
        case EIP1193.Unauthorized:
            throw new errors.ProviderUnauthorized();
        case EIP1193.UnsupportedMethod:
            throw new errors.ProviderUnsupportedMethod();
        case EIP1193.Disconnected:
            throw new errors.ProviderDisconnected();
        case EIP1193.ChainDisconnected:
            throw new errors.ProviderChainDisconnected();
        case EIP1474.ParseError:
            throw new errors.ProviderParseError();
        case EIP1474.InvalidRequest:
            throw new errors.ProviderInvalidRequest();
        case EIP1474.MethodNotFound:
            throw new errors.ProviderMethodNotFound();
        case EIP1474.InvalidParams:
            throw new errors.ProviderInvalidParams();
        case EIP1474.InternalError:
            throw new errors.ProviderInternalError();
        case EIP1474.InvalidInput:
            throw new errors.ProviderInvalidInput();
        case EIP1474.ResourceNotFound:
            throw new errors.ProviderResourceNotFound();
        case EIP1474.ResourceUnavailable:
            throw new errors.ProviderResourceUnavailable();
        case EIP1474.TransactionRejected:
            throw new errors.ProviderTransactionRejected();
        case EIP1474.MethodNotSupported:
            throw new errors.ProviderMethodNotSupported();
        case EIP1474.LimitExceeded:
            throw new errors.ProviderLimitExceeded();
        case EIP1474.JsonRpcVersionNotSupported:
            throw new errors.ProviderJsonRpcVersionNotSupported();
        default:
            throw error;
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9oZWxwZXJzL25lYXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXRpbHMgfSBmcm9tICduZWFyLWFwaS1qcydcblxuaW1wb3J0IHsgRUlQMTE5MywgRUlQMTQ3NCB9IGZyb20gJ0AvZW51bXMnXG5pbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdAL2Vycm9ycydcbmltcG9ydCB0eXBlIHsgQ2hhaW4sIE5lYXJQcm92aWRlclJwY0Vycm9yIH0gZnJvbSAnQC90eXBlcydcblxuZXhwb3J0IGNvbnN0IE1BWF9HQVNfTElNSVQgPSAnMzAwMDAwMDAwMDAwMDAwJ1xuZXhwb3J0IGNvbnN0IE5PX0RFUE9TSVQgPSAnMCdcblxuZXhwb3J0IGNvbnN0IG5lYXJUb1lvY3RvID0gKGFtb3VudDogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCA9PiB7XG4gIHJldHVybiB1dGlscy5mb3JtYXQucGFyc2VOZWFyQW1vdW50KGFtb3VudClcbn1cblxuZXhwb3J0IGNvbnN0IHlvY3RvVG9OZWFyID0gKGFtb3VudDogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCA9PiB7XG4gIHJldHVybiB1dGlscy5mb3JtYXQuZm9ybWF0TmVhckFtb3VudChhbW91bnQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROZWFyRXhwbG9yZXJUeFVybChcbiAgZXhwbG9yZXJVcmw6IHN0cmluZyB8IENoYWluLFxuICB0eEhhc2g6IHN0cmluZyxcbik6IHN0cmluZyB7XG4gIHJldHVybiBgJHtleHBsb3JlclVybH0vdHJhbnNhY3Rpb25zLyR7dHhIYXNofWBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE5lYXJFeHBsb3JlckFkZHJlc3NVcmwoXG4gIGV4cGxvcmVyVXJsOiBzdHJpbmcgfCBDaGFpbixcbiAgYWRkcmVzczogc3RyaW5nLFxuKTogc3RyaW5nIHtcbiAgcmV0dXJuIGAke2V4cGxvcmVyVXJsfS9hY2NvdW50cy8ke2FkZHJlc3N9YFxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlTmVhckVycm9yKGVycm9yOiBOZWFyUHJvdmlkZXJScGNFcnJvcik6IG5ldmVyIHtcbiAgc3dpdGNoIChlcnJvci5jb2RlKSB7XG4gICAgY2FzZSBFSVAxMTkzLlVzZXJSZWplY3RlZFJlcXVlc3Q6XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlByb3ZpZGVyVXNlclJlamVjdGVkUmVxdWVzdCgpXG4gICAgY2FzZSBFSVAxMTkzLlVuYXV0aG9yaXplZDpcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuUHJvdmlkZXJVbmF1dGhvcml6ZWQoKVxuICAgIGNhc2UgRUlQMTE5My5VbnN1cHBvcnRlZE1ldGhvZDpcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuUHJvdmlkZXJVbnN1cHBvcnRlZE1ldGhvZCgpXG4gICAgY2FzZSBFSVAxMTkzLkRpc2Nvbm5lY3RlZDpcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuUHJvdmlkZXJEaXNjb25uZWN0ZWQoKVxuICAgIGNhc2UgRUlQMTE5My5DaGFpbkRpc2Nvbm5lY3RlZDpcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuUHJvdmlkZXJDaGFpbkRpc2Nvbm5lY3RlZCgpXG4gICAgY2FzZSBFSVAxNDc0LlBhcnNlRXJyb3I6XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlByb3ZpZGVyUGFyc2VFcnJvcigpXG4gICAgY2FzZSBFSVAxNDc0LkludmFsaWRSZXF1ZXN0OlxuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Qcm92aWRlckludmFsaWRSZXF1ZXN0KClcbiAgICBjYXNlIEVJUDE0NzQuTWV0aG9kTm90Rm91bmQ6XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlByb3ZpZGVyTWV0aG9kTm90Rm91bmQoKVxuICAgIGNhc2UgRUlQMTQ3NC5JbnZhbGlkUGFyYW1zOlxuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Qcm92aWRlckludmFsaWRQYXJhbXMoKVxuICAgIGNhc2UgRUlQMTQ3NC5JbnRlcm5hbEVycm9yOlxuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Qcm92aWRlckludGVybmFsRXJyb3IoKVxuICAgIGNhc2UgRUlQMTQ3NC5JbnZhbGlkSW5wdXQ6XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlByb3ZpZGVySW52YWxpZElucHV0KClcbiAgICBjYXNlIEVJUDE0NzQuUmVzb3VyY2VOb3RGb3VuZDpcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuUHJvdmlkZXJSZXNvdXJjZU5vdEZvdW5kKClcbiAgICBjYXNlIEVJUDE0NzQuUmVzb3VyY2VVbmF2YWlsYWJsZTpcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuUHJvdmlkZXJSZXNvdXJjZVVuYXZhaWxhYmxlKClcbiAgICBjYXNlIEVJUDE0NzQuVHJhbnNhY3Rpb25SZWplY3RlZDpcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuUHJvdmlkZXJUcmFuc2FjdGlvblJlamVjdGVkKClcbiAgICBjYXNlIEVJUDE0NzQuTWV0aG9kTm90U3VwcG9ydGVkOlxuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Qcm92aWRlck1ldGhvZE5vdFN1cHBvcnRlZCgpXG4gICAgY2FzZSBFSVAxNDc0LkxpbWl0RXhjZWVkZWQ6XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlByb3ZpZGVyTGltaXRFeGNlZWRlZCgpXG4gICAgY2FzZSBFSVAxNDc0Lkpzb25ScGNWZXJzaW9uTm90U3VwcG9ydGVkOlxuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Qcm92aWRlckpzb25ScGNWZXJzaW9uTm90U3VwcG9ydGVkKClcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgZXJyb3JcbiAgfVxufVxuIl0sIm5hbWVzIjpbInV0aWxzIiwiRUlQMTE5MyIsIkVJUDE0NzQiLCJlcnJvcnMiLCJNQVhfR0FTX0xJTUlUIiwiTk9fREVQT1NJVCIsIm5lYXJUb1lvY3RvIiwiYW1vdW50IiwiZm9ybWF0IiwicGFyc2VOZWFyQW1vdW50IiwieW9jdG9Ub05lYXIiLCJmb3JtYXROZWFyQW1vdW50IiwiZ2V0TmVhckV4cGxvcmVyVHhVcmwiLCJleHBsb3JlclVybCIsInR4SGFzaCIsImdldE5lYXJFeHBsb3JlckFkZHJlc3NVcmwiLCJhZGRyZXNzIiwiaGFuZGxlTmVhckVycm9yIiwiZXJyb3IiLCJjb2RlIiwiVXNlclJlamVjdGVkUmVxdWVzdCIsIlByb3ZpZGVyVXNlclJlamVjdGVkUmVxdWVzdCIsIlVuYXV0aG9yaXplZCIsIlByb3ZpZGVyVW5hdXRob3JpemVkIiwiVW5zdXBwb3J0ZWRNZXRob2QiLCJQcm92aWRlclVuc3VwcG9ydGVkTWV0aG9kIiwiRGlzY29ubmVjdGVkIiwiUHJvdmlkZXJEaXNjb25uZWN0ZWQiLCJDaGFpbkRpc2Nvbm5lY3RlZCIsIlByb3ZpZGVyQ2hhaW5EaXNjb25uZWN0ZWQiLCJQYXJzZUVycm9yIiwiUHJvdmlkZXJQYXJzZUVycm9yIiwiSW52YWxpZFJlcXVlc3QiLCJQcm92aWRlckludmFsaWRSZXF1ZXN0IiwiTWV0aG9kTm90Rm91bmQiLCJQcm92aWRlck1ldGhvZE5vdEZvdW5kIiwiSW52YWxpZFBhcmFtcyIsIlByb3ZpZGVySW52YWxpZFBhcmFtcyIsIkludGVybmFsRXJyb3IiLCJQcm92aWRlckludGVybmFsRXJyb3IiLCJJbnZhbGlkSW5wdXQiLCJQcm92aWRlckludmFsaWRJbnB1dCIsIlJlc291cmNlTm90Rm91bmQiLCJQcm92aWRlclJlc291cmNlTm90Rm91bmQiLCJSZXNvdXJjZVVuYXZhaWxhYmxlIiwiUHJvdmlkZXJSZXNvdXJjZVVuYXZhaWxhYmxlIiwiVHJhbnNhY3Rpb25SZWplY3RlZCIsIlByb3ZpZGVyVHJhbnNhY3Rpb25SZWplY3RlZCIsIk1ldGhvZE5vdFN1cHBvcnRlZCIsIlByb3ZpZGVyTWV0aG9kTm90U3VwcG9ydGVkIiwiTGltaXRFeGNlZWRlZCIsIlByb3ZpZGVyTGltaXRFeGNlZWRlZCIsIkpzb25ScGNWZXJzaW9uTm90U3VwcG9ydGVkIiwiUHJvdmlkZXJKc29uUnBjVmVyc2lvbk5vdFN1cHBvcnRlZCJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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