import { Transaction } from "@solana/web3.js";
import bs58 from "bs58";
import { EIP1193, EIP1474, SOLANA_CHAINS } from "../enums";
import { errors } from "../errors";
export function handleSolError(error) {
    var _error_error;
    const ErrorCode = (error === null || error === void 0 ? void 0 : (_error_error = error.error) === null || _error_error === void 0 ? void 0 : _error_error.code) || (error === null || error === void 0 ? void 0 : error.code);
    switch(ErrorCode){
        case EIP1193.UserRejectedRequest:
            throw new errors.ProviderUserRejectedRequest();
        case EIP1193.Unauthorized:
            throw new errors.ProviderUnauthorized();
        case EIP1193.UnsupportedMethod:
            throw new errors.ProviderUnsupportedMethod();
        case EIP1193.Disconnected:
            throw new errors.ProviderDisconnected();
        case EIP1193.ChainDisconnected:
            throw new errors.ProviderChainDisconnected();
        case EIP1474.ParseError:
            throw new errors.ProviderParseError();
        case EIP1474.InvalidRequest:
            throw new errors.ProviderInvalidRequest();
        case EIP1474.MethodNotFound:
            throw new errors.ProviderMethodNotFound();
        case EIP1474.InvalidParams:
            throw new errors.ProviderInvalidParams();
        case EIP1474.InternalError:
            throw new errors.ProviderInternalError();
        case EIP1474.InvalidInput:
            throw new errors.ProviderInvalidInput();
        case EIP1474.ResourceNotFound:
            throw new errors.ProviderResourceNotFound();
        case EIP1474.ResourceUnavailable:
            throw new errors.ProviderResourceUnavailable();
        case EIP1474.TransactionRejected:
            throw new errors.ProviderTransactionRejected();
        case EIP1474.MethodNotSupported:
            throw new errors.ProviderMethodNotSupported();
        case EIP1474.LimitExceeded:
            throw new errors.ProviderLimitExceeded();
        case EIP1474.JsonRpcVersionNotSupported:
            throw new errors.ProviderJsonRpcVersionNotSupported();
        default:
            throw error;
    }
}
export function decodeSolanaTx(tx) {
    const buff = bs58.decode(tx);
    return Transaction.from(buff);
}
export function getSolExplorerTxUrl(chain, txHash) {
    const url = `${chain.explorerUrl}/tx/${txHash}`;
    return chain.id === SOLANA_CHAINS.MainNet ? url : `${url}?cluster=${chain.id}`;
}
export function getSolExplorerAddressUrl(chain, address) {
    const url = `${chain.explorerUrl}/address/${address}`;
    return chain.id === SOLANA_CHAINS.MainNet ? url : `${url}?cluster=${chain.id}`;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9oZWxwZXJzL3NvbGFuYS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUcmFuc2FjdGlvbiB9IGZyb20gJ0Bzb2xhbmEvd2ViMy5qcydcbmltcG9ydCBiczU4IGZyb20gJ2JzNTgnXG5cbmltcG9ydCB7IEVJUDExOTMsIEVJUDE0NzQsIFNPTEFOQV9DSEFJTlMgfSBmcm9tICdAL2VudW1zJ1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnQC9lcnJvcnMnXG5pbXBvcnQgdHlwZSB7IENoYWluLCBTb2xhbmFQcm92aWRlclJwY0Vycm9yIH0gZnJvbSAnQC90eXBlcydcblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZVNvbEVycm9yKGVycm9yOiBTb2xhbmFQcm92aWRlclJwY0Vycm9yKTogbmV2ZXIge1xuICBjb25zdCBFcnJvckNvZGUgPSBlcnJvcj8uZXJyb3I/LmNvZGUgfHwgZXJyb3I/LmNvZGVcblxuICBzd2l0Y2ggKEVycm9yQ29kZSkge1xuICAgIGNhc2UgRUlQMTE5My5Vc2VyUmVqZWN0ZWRSZXF1ZXN0OlxuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Qcm92aWRlclVzZXJSZWplY3RlZFJlcXVlc3QoKVxuICAgIGNhc2UgRUlQMTE5My5VbmF1dGhvcml6ZWQ6XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlByb3ZpZGVyVW5hdXRob3JpemVkKClcbiAgICBjYXNlIEVJUDExOTMuVW5zdXBwb3J0ZWRNZXRob2Q6XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlByb3ZpZGVyVW5zdXBwb3J0ZWRNZXRob2QoKVxuICAgIGNhc2UgRUlQMTE5My5EaXNjb25uZWN0ZWQ6XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlByb3ZpZGVyRGlzY29ubmVjdGVkKClcbiAgICBjYXNlIEVJUDExOTMuQ2hhaW5EaXNjb25uZWN0ZWQ6XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlByb3ZpZGVyQ2hhaW5EaXNjb25uZWN0ZWQoKVxuICAgIGNhc2UgRUlQMTQ3NC5QYXJzZUVycm9yOlxuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Qcm92aWRlclBhcnNlRXJyb3IoKVxuICAgIGNhc2UgRUlQMTQ3NC5JbnZhbGlkUmVxdWVzdDpcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuUHJvdmlkZXJJbnZhbGlkUmVxdWVzdCgpXG4gICAgY2FzZSBFSVAxNDc0Lk1ldGhvZE5vdEZvdW5kOlxuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Qcm92aWRlck1ldGhvZE5vdEZvdW5kKClcbiAgICBjYXNlIEVJUDE0NzQuSW52YWxpZFBhcmFtczpcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuUHJvdmlkZXJJbnZhbGlkUGFyYW1zKClcbiAgICBjYXNlIEVJUDE0NzQuSW50ZXJuYWxFcnJvcjpcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuUHJvdmlkZXJJbnRlcm5hbEVycm9yKClcbiAgICBjYXNlIEVJUDE0NzQuSW52YWxpZElucHV0OlxuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Qcm92aWRlckludmFsaWRJbnB1dCgpXG4gICAgY2FzZSBFSVAxNDc0LlJlc291cmNlTm90Rm91bmQ6XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlByb3ZpZGVyUmVzb3VyY2VOb3RGb3VuZCgpXG4gICAgY2FzZSBFSVAxNDc0LlJlc291cmNlVW5hdmFpbGFibGU6XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlByb3ZpZGVyUmVzb3VyY2VVbmF2YWlsYWJsZSgpXG4gICAgY2FzZSBFSVAxNDc0LlRyYW5zYWN0aW9uUmVqZWN0ZWQ6XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlByb3ZpZGVyVHJhbnNhY3Rpb25SZWplY3RlZCgpXG4gICAgY2FzZSBFSVAxNDc0Lk1ldGhvZE5vdFN1cHBvcnRlZDpcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuUHJvdmlkZXJNZXRob2ROb3RTdXBwb3J0ZWQoKVxuICAgIGNhc2UgRUlQMTQ3NC5MaW1pdEV4Y2VlZGVkOlxuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Qcm92aWRlckxpbWl0RXhjZWVkZWQoKVxuICAgIGNhc2UgRUlQMTQ3NC5Kc29uUnBjVmVyc2lvbk5vdFN1cHBvcnRlZDpcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuUHJvdmlkZXJKc29uUnBjVmVyc2lvbk5vdFN1cHBvcnRlZCgpXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IGVycm9yXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZVNvbGFuYVR4KHR4OiBzdHJpbmcpIHtcbiAgY29uc3QgYnVmZiA9IGJzNTguZGVjb2RlKHR4KVxuICByZXR1cm4gVHJhbnNhY3Rpb24uZnJvbShidWZmKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U29sRXhwbG9yZXJUeFVybChjaGFpbjogQ2hhaW4sIHR4SGFzaDogc3RyaW5nKSB7XG4gIGNvbnN0IHVybCA9IGAke2NoYWluLmV4cGxvcmVyVXJsfS90eC8ke3R4SGFzaH1gXG4gIHJldHVybiBjaGFpbi5pZCA9PT0gU09MQU5BX0NIQUlOUy5NYWluTmV0ID8gdXJsIDogYCR7dXJsfT9jbHVzdGVyPSR7Y2hhaW4uaWR9YFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U29sRXhwbG9yZXJBZGRyZXNzVXJsKGNoYWluOiBDaGFpbiwgYWRkcmVzczogc3RyaW5nKSB7XG4gIGNvbnN0IHVybCA9IGAke2NoYWluLmV4cGxvcmVyVXJsfS9hZGRyZXNzLyR7YWRkcmVzc31gXG4gIHJldHVybiBjaGFpbi5pZCA9PT0gU09MQU5BX0NIQUlOUy5NYWluTmV0ID8gdXJsIDogYCR7dXJsfT9jbHVzdGVyPSR7Y2hhaW4uaWR9YFxufVxuIl0sIm5hbWVzIjpbIlRyYW5zYWN0aW9uIiwiYnM1OCIsIkVJUDExOTMiLCJFSVAxNDc0IiwiU09MQU5BX0NIQUlOUyIsImVycm9ycyIsImhhbmRsZVNvbEVycm9yIiwiZXJyb3IiLCJFcnJvckNvZGUiLCJjb2RlIiwiVXNlclJlamVjdGVkUmVxdWVzdCIsIlByb3ZpZGVyVXNlclJlamVjdGVkUmVxdWVzdCIsIlVuYXV0aG9yaXplZCIsIlByb3ZpZGVyVW5hdXRob3JpemVkIiwiVW5zdXBwb3J0ZWRNZXRob2QiLCJQcm92aWRlclVuc3VwcG9ydGVkTWV0aG9kIiwiRGlzY29ubmVjdGVkIiwiUHJvdmlkZXJEaXNjb25uZWN0ZWQiLCJDaGFpbkRpc2Nvbm5lY3RlZCIsIlByb3ZpZGVyQ2hhaW5EaXNjb25uZWN0ZWQiLCJQYXJzZUVycm9yIiwiUHJvdmlkZXJQYXJzZUVycm9yIiwiSW52YWxpZFJlcXVlc3QiLCJQcm92aWRlckludmFsaWRSZXF1ZXN0IiwiTWV0aG9kTm90Rm91bmQiLCJQcm92aWRlck1ldGhvZE5vdEZvdW5kIiwiSW52YWxpZFBhcmFtcyIsIlByb3ZpZGVySW52YWxpZFBhcmFtcyIsIkludGVybmFsRXJyb3IiLCJQcm92aWRlckludGVybmFsRXJyb3IiLCJJbnZhbGlkSW5wdXQiLCJQcm92aWRlckludmFsaWRJbnB1dCIsIlJlc291cmNlTm90Rm91bmQiLCJQcm92aWRlclJlc291cmNlTm90Rm91bmQiLCJSZXNvdXJjZVVuYXZhaWxhYmxlIiwiUHJvdmlkZXJSZXNvdXJjZVVuYXZhaWxhYmxlIiwiVHJhbnNhY3Rpb25SZWplY3RlZCIsIlByb3ZpZGVyVHJhbnNhY3Rpb25SZWplY3RlZCIsIk1ldGhvZE5vdFN1cHBvcnRlZCIsIlByb3ZpZGVyTWV0aG9kTm90U3VwcG9ydGVkIiwiTGltaXRFeGNlZWRlZCIsIlByb3ZpZGVyTGltaXRFeGNlZWRlZCIsIkpzb25ScGNWZXJzaW9uTm90U3VwcG9ydGVkIiwiUHJvdmlkZXJKc29uUnBjVmVyc2lvbk5vdFN1cHBvcnRlZCIsImRlY29kZVNvbGFuYVR4IiwidHgiLCJidWZmIiwiZGVjb2RlIiwiZnJvbSIsImdldFNvbEV4cGxvcmVyVHhVcmwiLCJjaGFpbiIsInR4SGFzaCIsInVybCIsImV4cGxvcmVyVXJsIiwiaWQiLCJNYWluTmV0IiwiZ2V0U29sRXhwbG9yZXJBZGRyZXNzVXJsIiwiYWRkcmVzcyJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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