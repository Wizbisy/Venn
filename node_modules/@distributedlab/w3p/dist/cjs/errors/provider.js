"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ProviderChainDetailsNotFoundError: function() {
        return ProviderChainDetailsNotFoundError;
    },
    ProviderChainDisconnected: function() {
        return ProviderChainDisconnected;
    },
    ProviderChainNotFoundError: function() {
        return ProviderChainNotFoundError;
    },
    ProviderDisconnected: function() {
        return ProviderDisconnected;
    },
    ProviderInjectedInstanceNotFoundError: function() {
        return ProviderInjectedInstanceNotFoundError;
    },
    ProviderInternalError: function() {
        return ProviderInternalError;
    },
    ProviderInvalidInput: function() {
        return ProviderInvalidInput;
    },
    ProviderInvalidParams: function() {
        return ProviderInvalidParams;
    },
    ProviderInvalidRequest: function() {
        return ProviderInvalidRequest;
    },
    ProviderJsonRpcInvalid: function() {
        return ProviderJsonRpcInvalid;
    },
    ProviderJsonRpcVersionNotSupported: function() {
        return ProviderJsonRpcVersionNotSupported;
    },
    ProviderLimitExceeded: function() {
        return ProviderLimitExceeded;
    },
    ProviderMethodNotFound: function() {
        return ProviderMethodNotFound;
    },
    ProviderMethodNotSupported: function() {
        return ProviderMethodNotSupported;
    },
    ProviderNotInitializedError: function() {
        return ProviderNotInitializedError;
    },
    ProviderParseError: function() {
        return ProviderParseError;
    },
    ProviderResourceNotFound: function() {
        return ProviderResourceNotFound;
    },
    ProviderResourceUnavailable: function() {
        return ProviderResourceUnavailable;
    },
    ProviderTransactionRejected: function() {
        return ProviderTransactionRejected;
    },
    ProviderUnauthorized: function() {
        return ProviderUnauthorized;
    },
    ProviderUnsupportedMethod: function() {
        return ProviderUnsupportedMethod;
    },
    ProviderUserRejectedRequest: function() {
        return ProviderUserRejectedRequest;
    }
});
const _tools = require("@distributedlab/tools");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
let ProviderNotInitializedError = class ProviderNotInitializedError extends _tools.RuntimeError {
    constructor(error = new TypeError('Provider is not initialized')){
        super(error);
        _define_property(this, "name", 'ProviderNotInitializedError');
    }
};
let ProviderInjectedInstanceNotFoundError = class ProviderInjectedInstanceNotFoundError extends _tools.RuntimeError {
    constructor(error = new TypeError('Cant find injected provider instance in window object, please check your provider installation')){
        super(error);
        _define_property(this, "name", 'ProviderInjectedInstanceNotFoundError');
    }
};
let ProviderChainNotFoundError = class ProviderChainNotFoundError extends _tools.RuntimeError {
    constructor(error = new TypeError('Cant detect chain in provider')){
        super(error);
        _define_property(this, "name", 'ProviderChainNotFoundError');
    }
};
let ProviderChainDetailsNotFoundError = class ProviderChainDetailsNotFoundError extends _tools.RuntimeError {
    constructor(error = new TypeError('Cant find chains details in provider')){
        super(error);
        _define_property(this, "name", 'ProviderChainDetailsNotFoundError');
    }
};
let ProviderUserRejectedRequest = class ProviderUserRejectedRequest extends _tools.RuntimeError {
    constructor(error = new TypeError('User rejected request')){
        /**
     * @description ethers.js match provider `user denied` error message
     * and throw it's own error instance,
     * so we override error message with our own
     *
     * https://github.com/ethers-io/ethers.js/blob/13593809bd61ef24c01d79de82563540d77098db/src.ts/providers/provider-jsonrpc.ts#L822
     */ super('User rejected request', error);
        _define_property(this, "name", 'ProviderUserRejectedRequest');
    }
};
let ProviderUnauthorized = class ProviderUnauthorized extends _tools.RuntimeError {
    constructor(error = new TypeError('Provider unauthorized')){
        super(error);
        _define_property(this, "name", 'ProviderUnauthorized');
    }
};
let ProviderUnsupportedMethod = class ProviderUnsupportedMethod extends _tools.RuntimeError {
    constructor(error = new TypeError('Provider not support this method')){
        super(error);
        _define_property(this, "name", 'ProviderUnsupportedMethod');
    }
};
let ProviderDisconnected = class ProviderDisconnected extends _tools.RuntimeError {
    constructor(error = new TypeError('Provider has been disconnected')){
        super(error);
        _define_property(this, "name", 'ProviderDisconnected');
    }
};
let ProviderChainDisconnected = class ProviderChainDisconnected extends _tools.RuntimeError {
    constructor(error = new TypeError('Provider chain has been disconnected')){
        super(error);
        _define_property(this, "name", 'ProviderChainDisconnected');
    }
};
let ProviderParseError = class ProviderParseError extends _tools.RuntimeError {
    constructor(error = new TypeError('Provider failed to parse')){
        super(error);
        _define_property(this, "name", 'ProviderParseError');
    }
};
let ProviderInvalidRequest = class ProviderInvalidRequest extends _tools.RuntimeError {
    constructor(error = new TypeError('Provider returned invalid request')){
        super(error);
        _define_property(this, "name", 'ProviderInvalidRequest');
    }
};
let ProviderMethodNotFound = class ProviderMethodNotFound extends _tools.RuntimeError {
    constructor(error = new TypeError('Provider method not implemented or not found')){
        super(error);
        _define_property(this, "name", 'ProviderMethodNotFound');
    }
};
let ProviderInvalidParams = class ProviderInvalidParams extends _tools.RuntimeError {
    constructor(error = new TypeError('Provider returned invalid params')){
        super(error);
        _define_property(this, "name", 'ProviderInvalidParams');
    }
};
let ProviderInternalError = class ProviderInternalError extends _tools.RuntimeError {
    constructor(error = new TypeError('Provider internal error')){
        super(error);
        _define_property(this, "name", 'ProviderInternalError');
    }
};
let ProviderInvalidInput = class ProviderInvalidInput extends _tools.RuntimeError {
    constructor(error = new TypeError('Provider returned invalid input')){
        super(error);
        _define_property(this, "name", 'ProviderInvalidInput');
    }
};
let ProviderResourceNotFound = class ProviderResourceNotFound extends _tools.RuntimeError {
    constructor(error = new TypeError('Provider resource not found')){
        super(error);
        _define_property(this, "name", 'ProviderResourceNotFound');
    }
};
let ProviderResourceUnavailable = class ProviderResourceUnavailable extends _tools.RuntimeError {
    constructor(error = new TypeError('Provider resource unavailable')){
        super(error);
        _define_property(this, "name", 'ProviderResourceUnavailable');
    }
};
let ProviderTransactionRejected = class ProviderTransactionRejected extends _tools.RuntimeError {
    constructor(error = new TypeError('Provider transaction rejected')){
        super(error);
        _define_property(this, "name", 'ProviderTransactionRejected');
    }
};
let ProviderMethodNotSupported = class ProviderMethodNotSupported extends _tools.RuntimeError {
    constructor(error = new TypeError('Provider method not supported')){
        super(error);
        _define_property(this, "name", 'ProviderMethodNotSupported');
    }
};
let ProviderLimitExceeded = class ProviderLimitExceeded extends _tools.RuntimeError {
    constructor(error = new TypeError('Provider limit exceeded')){
        super(error);
        _define_property(this, "name", 'ProviderLimitExceeded');
    }
};
let ProviderJsonRpcVersionNotSupported = class ProviderJsonRpcVersionNotSupported extends _tools.RuntimeError {
    constructor(error = new TypeError('Provider json rpc version not supported')){
        super(error);
        _define_property(this, "name", 'ProviderJsonRpcVersionNotSupported');
    }
};
let ProviderJsonRpcInvalid = class ProviderJsonRpcInvalid extends _tools.RuntimeError {
    constructor(error = new TypeError('Provider json rpc invalid')){
        super(error);
        _define_property(this, "name", 'ProviderJsonRpcInvalid');
    }
};

//# sourceMappingURL=data:application/json;base64,