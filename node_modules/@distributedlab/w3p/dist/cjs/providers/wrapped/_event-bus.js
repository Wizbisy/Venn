"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ProviderEventBus", {
    enumerable: true,
    get: function() {
        return ProviderEventBus;
    }
});
const _tools = require("@distributedlab/tools");
const _enums = require("../../enums");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
let ProviderEventBus = class ProviderEventBus {
    emit(event, payload) {
        this.emitter.emit(event, payload);
    }
    onBeforeTxSent(cb) {
        this.emitter.on(_enums.PROVIDER_EVENT_BUS_EVENTS.BeforeTxSent, cb);
    }
    onTxSent(cb) {
        this.emitter.on(_enums.PROVIDER_EVENT_BUS_EVENTS.TxSent, cb);
    }
    onTxConfirmed(cb) {
        this.emitter.on(_enums.PROVIDER_EVENT_BUS_EVENTS.TxConfirmed, cb);
    }
    onInitiated(cb) {
        this.emitter.once(_enums.PROVIDER_EVENT_BUS_EVENTS.Initiated, cb);
    }
    onConnect(cb) {
        this.emitter.on(_enums.PROVIDER_EVENT_BUS_EVENTS.Connect, cb);
    }
    onDisconnect(cb) {
        this.emitter.on(_enums.PROVIDER_EVENT_BUS_EVENTS.Disconnect, cb);
    }
    onAccountChanged(cb) {
        this.emitter.on(_enums.PROVIDER_EVENT_BUS_EVENTS.AccountChanged, cb);
    }
    onChainChanged(cb) {
        this.emitter.on(_enums.PROVIDER_EVENT_BUS_EVENTS.ChainChanged, cb);
    }
    onWalletConnectDisplayUri(cb) {
        this.emitter.on(_enums.PROVIDER_EVENT_BUS_EVENTS.WalletConnectDisplayUri, cb);
    }
    clearHandlers() {
        this.emitter.clear();
    }
    constructor(){
        _define_property(this, "emitter", new _tools.EventEmitter());
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wcm92aWRlcnMvd3JhcHBlZC9fZXZlbnQtYnVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0BkaXN0cmlidXRlZGxhYi90b29scydcblxuaW1wb3J0IHsgUFJPVklERVJfRVZFTlRfQlVTX0VWRU5UUyB9IGZyb20gJ0AvZW51bXMnXG5pbXBvcnQgdHlwZSB7IFByb3ZpZGVyRXZlbnRNYXAsIFByb3ZpZGVyRXZlbnRQYXlsb2FkIH0gZnJvbSAnQC90eXBlcydcblxuZXhwb3J0IGNsYXNzIFByb3ZpZGVyRXZlbnRCdXMge1xuICByZWFkb25seSBlbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcjxQcm92aWRlckV2ZW50TWFwPigpXG5cbiAgcHVibGljIGVtaXQoXG4gICAgZXZlbnQ6IFBST1ZJREVSX0VWRU5UX0JVU19FVkVOVFMsXG4gICAgcGF5bG9hZDogUHJvdmlkZXJFdmVudFBheWxvYWQsXG4gICk6IHZvaWQge1xuICAgIHRoaXMuZW1pdHRlci5lbWl0KGV2ZW50LCBwYXlsb2FkKVxuICB9XG5cbiAgcHVibGljIG9uQmVmb3JlVHhTZW50KGNiOiAoZT86IFByb3ZpZGVyRXZlbnRQYXlsb2FkKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5lbWl0dGVyLm9uKFBST1ZJREVSX0VWRU5UX0JVU19FVkVOVFMuQmVmb3JlVHhTZW50LCBjYilcbiAgfVxuXG4gIHB1YmxpYyBvblR4U2VudChjYjogKGU/OiBQcm92aWRlckV2ZW50UGF5bG9hZCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMuZW1pdHRlci5vbihQUk9WSURFUl9FVkVOVF9CVVNfRVZFTlRTLlR4U2VudCwgY2IpXG4gIH1cblxuICBwdWJsaWMgb25UeENvbmZpcm1lZChjYjogKGU/OiBQcm92aWRlckV2ZW50UGF5bG9hZCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMuZW1pdHRlci5vbihQUk9WSURFUl9FVkVOVF9CVVNfRVZFTlRTLlR4Q29uZmlybWVkLCBjYilcbiAgfVxuXG4gIHB1YmxpYyBvbkluaXRpYXRlZChjYjogKGU/OiBQcm92aWRlckV2ZW50UGF5bG9hZCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMuZW1pdHRlci5vbmNlKFBST1ZJREVSX0VWRU5UX0JVU19FVkVOVFMuSW5pdGlhdGVkLCBjYilcbiAgfVxuXG4gIHB1YmxpYyBvbkNvbm5lY3QoY2I6IChlPzogUHJvdmlkZXJFdmVudFBheWxvYWQpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLmVtaXR0ZXIub24oUFJPVklERVJfRVZFTlRfQlVTX0VWRU5UUy5Db25uZWN0LCBjYilcbiAgfVxuXG4gIHB1YmxpYyBvbkRpc2Nvbm5lY3QoY2I6IChlPzogUHJvdmlkZXJFdmVudFBheWxvYWQpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLmVtaXR0ZXIub24oUFJPVklERVJfRVZFTlRfQlVTX0VWRU5UUy5EaXNjb25uZWN0LCBjYilcbiAgfVxuXG4gIHB1YmxpYyBvbkFjY291bnRDaGFuZ2VkKGNiOiAoZT86IFByb3ZpZGVyRXZlbnRQYXlsb2FkKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5lbWl0dGVyLm9uKFBST1ZJREVSX0VWRU5UX0JVU19FVkVOVFMuQWNjb3VudENoYW5nZWQsIGNiKVxuICB9XG5cbiAgcHVibGljIG9uQ2hhaW5DaGFuZ2VkKGNiOiAoZT86IFByb3ZpZGVyRXZlbnRQYXlsb2FkKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5lbWl0dGVyLm9uKFBST1ZJREVSX0VWRU5UX0JVU19FVkVOVFMuQ2hhaW5DaGFuZ2VkLCBjYilcbiAgfVxuXG4gIHB1YmxpYyBvbldhbGxldENvbm5lY3REaXNwbGF5VXJpKFxuICAgIGNiOiAoZT86IFByb3ZpZGVyRXZlbnRQYXlsb2FkKSA9PiB2b2lkLFxuICApOiB2b2lkIHtcbiAgICB0aGlzLmVtaXR0ZXIub24oUFJPVklERVJfRVZFTlRfQlVTX0VWRU5UUy5XYWxsZXRDb25uZWN0RGlzcGxheVVyaSwgY2IpXG4gIH1cblxuICBwdWJsaWMgY2xlYXJIYW5kbGVycygpOiB2b2lkIHtcbiAgICB0aGlzLmVtaXR0ZXIuY2xlYXIoKVxuICB9XG59XG4iXSwibmFtZXMiOlsiUHJvdmlkZXJFdmVudEJ1cyIsImVtaXQiLCJldmVudCIsInBheWxvYWQiLCJlbWl0dGVyIiwib25CZWZvcmVUeFNlbnQiLCJjYiIsIm9uIiwiUFJPVklERVJfRVZFTlRfQlVTX0VWRU5UUyIsIkJlZm9yZVR4U2VudCIsIm9uVHhTZW50IiwiVHhTZW50Iiwib25UeENvbmZpcm1lZCIsIlR4Q29uZmlybWVkIiwib25Jbml0aWF0ZWQiLCJvbmNlIiwiSW5pdGlhdGVkIiwib25Db25uZWN0IiwiQ29ubmVjdCIsIm9uRGlzY29ubmVjdCIsIkRpc2Nvbm5lY3QiLCJvbkFjY291bnRDaGFuZ2VkIiwiQWNjb3VudENoYW5nZWQiLCJvbkNoYWluQ2hhbmdlZCIsIkNoYWluQ2hhbmdlZCIsIm9uV2FsbGV0Q29ubmVjdERpc3BsYXlVcmkiLCJXYWxsZXRDb25uZWN0RGlzcGxheVVyaSIsImNsZWFySGFuZGxlcnMiLCJjbGVhciIsIkV2ZW50RW1pdHRlciJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkFLYUE7OztlQUFBQTs7O3VCQUxnQjt1QkFFYTs7Ozs7Ozs7Ozs7Ozs7QUFHbkMsSUFBQSxBQUFNQSxtQkFBTixNQUFNQTtJQUdKQyxLQUNMQyxLQUFnQyxFQUNoQ0MsT0FBNkIsRUFDdkI7UUFDTixJQUFJLENBQUNDLE9BQU8sQ0FBQ0gsSUFBSSxDQUFDQyxPQUFPQztJQUMzQjtJQUVPRSxlQUFlQyxFQUFzQyxFQUFRO1FBQ2xFLElBQUksQ0FBQ0YsT0FBTyxDQUFDRyxFQUFFLENBQUNDLGdDQUF5QixDQUFDQyxZQUFZLEVBQUVIO0lBQzFEO0lBRU9JLFNBQVNKLEVBQXNDLEVBQVE7UUFDNUQsSUFBSSxDQUFDRixPQUFPLENBQUNHLEVBQUUsQ0FBQ0MsZ0NBQXlCLENBQUNHLE1BQU0sRUFBRUw7SUFDcEQ7SUFFT00sY0FBY04sRUFBc0MsRUFBUTtRQUNqRSxJQUFJLENBQUNGLE9BQU8sQ0FBQ0csRUFBRSxDQUFDQyxnQ0FBeUIsQ0FBQ0ssV0FBVyxFQUFFUDtJQUN6RDtJQUVPUSxZQUFZUixFQUFzQyxFQUFRO1FBQy9ELElBQUksQ0FBQ0YsT0FBTyxDQUFDVyxJQUFJLENBQUNQLGdDQUF5QixDQUFDUSxTQUFTLEVBQUVWO0lBQ3pEO0lBRU9XLFVBQVVYLEVBQXNDLEVBQVE7UUFDN0QsSUFBSSxDQUFDRixPQUFPLENBQUNHLEVBQUUsQ0FBQ0MsZ0NBQXlCLENBQUNVLE9BQU8sRUFBRVo7SUFDckQ7SUFFT2EsYUFBYWIsRUFBc0MsRUFBUTtRQUNoRSxJQUFJLENBQUNGLE9BQU8sQ0FBQ0csRUFBRSxDQUFDQyxnQ0FBeUIsQ0FBQ1ksVUFBVSxFQUFFZDtJQUN4RDtJQUVPZSxpQkFBaUJmLEVBQXNDLEVBQVE7UUFDcEUsSUFBSSxDQUFDRixPQUFPLENBQUNHLEVBQUUsQ0FBQ0MsZ0NBQXlCLENBQUNjLGNBQWMsRUFBRWhCO0lBQzVEO0lBRU9pQixlQUFlakIsRUFBc0MsRUFBUTtRQUNsRSxJQUFJLENBQUNGLE9BQU8sQ0FBQ0csRUFBRSxDQUFDQyxnQ0FBeUIsQ0FBQ2dCLFlBQVksRUFBRWxCO0lBQzFEO0lBRU9tQiwwQkFDTG5CLEVBQXNDLEVBQ2hDO1FBQ04sSUFBSSxDQUFDRixPQUFPLENBQUNHLEVBQUUsQ0FBQ0MsZ0NBQXlCLENBQUNrQix1QkFBdUIsRUFBRXBCO0lBQ3JFO0lBRU9xQixnQkFBc0I7UUFDM0IsSUFBSSxDQUFDdkIsT0FBTyxDQUFDd0IsS0FBSztJQUNwQjs7UUFqREEsdUJBQVN4QixXQUFVLElBQUl5QixtQkFBWTs7QUFrRHJDIn0=