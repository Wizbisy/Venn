"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "WalletConnectEvmProvider", {
    enumerable: true,
    get: function() {
        return WalletConnectEvmProvider;
    }
});
const _ethers = require("ethers");
const _isEmpty = _interop_require_default(require("lodash/isEmpty"));
const _enums = require("../../enums");
const _errors = require("../../errors");
const _eth = require("../../helpers/eth");
const _walletconnect = require("../../helpers/wallet-connect");
const _provider = require("../../provider");
const _eventbus = require("./_event-bus");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
let WalletConnectEvmProvider = class WalletConnectEvmProvider extends _eventbus.ProviderEventBus {
    static get providerType() {
        return _enums.PROVIDERS.WalletConnect;
    }
    get rawProvider() {
        return this.universalProvider;
    }
    get ethProvider() {
        var _this_universalProvider;
        if (!((_this_universalProvider = this.universalProvider) === null || _this_universalProvider === void 0 ? void 0 : _this_universalProvider.session)) {
            return null;
        }
        return new _ethers.providers.Web3Provider(this.universalProvider);
    }
    get chainType() {
        return _enums.CHAIN_TYPES.EVM;
    }
    get isConnected() {
        return Boolean(this.chainId && this.address);
    }
    init() {
        var _this = this;
        return _async_to_generator(function*() {
            yield _this.checkForPersistedSession();
            yield _this.setListeners();
            yield _this.setCustomRpcs();
            _this.emit(_enums.PROVIDER_EVENT_BUS_EVENTS.Initiated, _this.defaultEventPayload);
        })();
    }
    connect() {
        var _this = this;
        return _async_to_generator(function*() {
            var _this_universalProvider_session_namespaces_eip155_chains_, _this_universalProvider_session_namespaces_eip155_chains, _this_universalProvider_session_namespaces_eip155, _this_universalProvider_session_namespaces, _this_universalProvider_session, _this_universalProvider;
            if (!_this.universalProvider) {
                throw new _errors.errors.ProviderNotInitializedError();
            }
            yield _this.universalProvider.connect({
                namespaces: (0, _walletconnect.createWalletConnectEthNamespace)(),
                optionalNamespaces: (0, _walletconnect.createWalletConnectEthNamespace)(),
                skipPairing: true
            });
            yield _this.universalProvider.enable();
            const accounts = yield _this.universalProvider.request({
                method: 'eth_requestAccounts'
            });
            _this.chainId = (_this_universalProvider = _this.universalProvider) === null || _this_universalProvider === void 0 ? void 0 : (_this_universalProvider_session = _this_universalProvider.session) === null || _this_universalProvider_session === void 0 ? void 0 : (_this_universalProvider_session_namespaces = _this_universalProvider_session.namespaces) === null || _this_universalProvider_session_namespaces === void 0 ? void 0 : (_this_universalProvider_session_namespaces_eip155 = _this_universalProvider_session_namespaces.eip155) === null || _this_universalProvider_session_namespaces_eip155 === void 0 ? void 0 : (_this_universalProvider_session_namespaces_eip155_chains = _this_universalProvider_session_namespaces_eip155.chains) === null || _this_universalProvider_session_namespaces_eip155_chains === void 0 ? void 0 : (_this_universalProvider_session_namespaces_eip155_chains_ = _this_universalProvider_session_namespaces_eip155_chains[0]) === null || _this_universalProvider_session_namespaces_eip155_chains_ === void 0 ? void 0 : _this_universalProvider_session_namespaces_eip155_chains_.split(':')[1];
            _this.address = accounts === null || accounts === void 0 ? void 0 : accounts[0];
            _this.emit(_enums.PROVIDER_EVENT_BUS_EVENTS.AccountChanged, _this.defaultEventPayload);
            _this.emit(_this.isConnected ? _enums.PROVIDER_EVENT_BUS_EVENTS.Connect : _enums.PROVIDER_EVENT_BUS_EVENTS.Disconnect, _this.defaultEventPayload);
        })();
    }
    disconnect() {
        var _this = this;
        return _async_to_generator(function*() {
            if (!_this.universalProvider) {
                throw new _errors.errors.ProviderNotInitializedError();
            }
            yield _this.universalProvider.disconnect();
            _this.chainId = undefined;
            _this.address = undefined;
            _this.emit(_enums.PROVIDER_EVENT_BUS_EVENTS.Disconnect, _this.defaultEventPayload);
        })();
    }
    checkForPersistedSession() {
        var _this = this;
        return _async_to_generator(function*() {
            var _this_universalProvider, _this_universalProvider_namespaces, _this_universalProvider1, _this_universalProvider_session_namespaces_eip155_accounts__split, _this_universalProvider_session_namespaces_eip155_accounts_, _this_universalProvider_session_namespaces_eip155_accounts, _this_universalProvider_session_namespaces_eip155, _this_universalProvider_session_namespaces, _this_universalProvider_session, _this_universalProvider2;
            if (!_this.universalProvider) {
                throw new _errors.errors.ProviderNotInitializedError();
            }
            if (!((_this_universalProvider = _this.universalProvider) === null || _this_universalProvider === void 0 ? void 0 : _this_universalProvider.session)) return;
            _this.chainId = (_this_universalProvider1 = _this.universalProvider) === null || _this_universalProvider1 === void 0 ? void 0 : (_this_universalProvider_namespaces = _this_universalProvider1.namespaces) === null || _this_universalProvider_namespaces === void 0 ? void 0 : _this_universalProvider_namespaces.eip155.defaultChain;
            _this.address = (_this_universalProvider2 = _this.universalProvider) === null || _this_universalProvider2 === void 0 ? void 0 : (_this_universalProvider_session = _this_universalProvider2.session) === null || _this_universalProvider_session === void 0 ? void 0 : (_this_universalProvider_session_namespaces = _this_universalProvider_session.namespaces) === null || _this_universalProvider_session_namespaces === void 0 ? void 0 : (_this_universalProvider_session_namespaces_eip155 = _this_universalProvider_session_namespaces.eip155) === null || _this_universalProvider_session_namespaces_eip155 === void 0 ? void 0 : (_this_universalProvider_session_namespaces_eip155_accounts = _this_universalProvider_session_namespaces_eip155.accounts) === null || _this_universalProvider_session_namespaces_eip155_accounts === void 0 ? void 0 : (_this_universalProvider_session_namespaces_eip155_accounts_ = _this_universalProvider_session_namespaces_eip155_accounts[0]) === null || _this_universalProvider_session_namespaces_eip155_accounts_ === void 0 ? void 0 : (_this_universalProvider_session_namespaces_eip155_accounts__split = _this_universalProvider_session_namespaces_eip155_accounts_.split(':')) === null || _this_universalProvider_session_namespaces_eip155_accounts__split === void 0 ? void 0 : _this_universalProvider_session_namespaces_eip155_accounts__split[2];
        })();
    }
    getAddressUrl(chain, address) {
        return (0, _eth.getEthExplorerAddressUrl)(chain, address);
    }
    getTxUrl(chain, txHash) {
        return (0, _eth.getEthExplorerTxUrl)(chain, txHash);
    }
    getHashFromTx(txResponse) {
        return txResponse.transactionHash;
    }
    /**
   * @description Switch the chain with WalletConnect Provider.
   * You should always add a network first with the proper method
   * {@link Provider.setChainDetails} and then change it.
   */ switchChain(chainId) {
        var _this = this;
        return _async_to_generator(function*() {
            var _this_universalProvider;
            if (!_this.ethProvider) {
                throw new _errors.errors.ProviderDisconnected();
            }
            if (!_provider.Provider.chainsDetails) {
                throw new _errors.errors.ProviderChainDetailsNotFoundError();
            }
            const foundChain = _provider.Provider.chainsDetails[chainId];
            if (!foundChain) {
                throw new _errors.errors.ProviderChainNotFoundError();
            }
            yield _this.addChain(foundChain);
            (_this_universalProvider = _this.universalProvider) === null || _this_universalProvider === void 0 ? void 0 : _this_universalProvider.setDefaultChain(`eip155:${Number(foundChain.id)}`, foundChain.rpcUrl);
            yield (0, _eth.requestSwitchEthChain)(_this.ethProvider, foundChain.id);
        })();
    }
    setCustomRpcs() {
        var _this = this;
        return _async_to_generator(function*() {
            if ((0, _isEmpty.default)(_provider.Provider.chainsDetails)) {
                return;
            }
            yield Promise.all(Object.entries(_provider.Provider.chainsDetails).map(function() {
                var _ref = _async_to_generator(function*([chainId, chainInfo]) {
                    var _this_universalProvider_rpcProviders_eip155_httpProviders, _this_universalProvider_rpcProviders_eip155, _this_universalProvider_rpcProviders, _this_universalProvider;
                    const rpcProvider = (_this_universalProvider = _this.universalProvider) === null || _this_universalProvider === void 0 ? void 0 : (_this_universalProvider_rpcProviders = _this_universalProvider.rpcProviders) === null || _this_universalProvider_rpcProviders === void 0 ? void 0 : (_this_universalProvider_rpcProviders_eip155 = _this_universalProvider_rpcProviders.eip155) === null || _this_universalProvider_rpcProviders_eip155 === void 0 ? void 0 : (_this_universalProvider_rpcProviders_eip155_httpProviders = _this_universalProvider_rpcProviders_eip155.httpProviders) === null || _this_universalProvider_rpcProviders_eip155_httpProviders === void 0 ? void 0 : _this_universalProvider_rpcProviders_eip155_httpProviders[chainId];
                    if (rpcProvider) {
                        yield rpcProvider.connect(chainInfo.rpcUrl);
                    }
                });
                return function(_) {
                    return _ref.apply(this, arguments);
                };
            }()));
        })();
    }
    addChain(chain) {
        var _this = this;
        return _async_to_generator(function*() {
            if (!_this.ethProvider) {
                throw new _errors.errors.ProviderDisconnected();
            }
            yield (0, _eth.requestAddEthChain)(_this.ethProvider, chain);
        })();
    }
    signAndSendTx(tx) {
        var _this = this;
        return _async_to_generator(function*() {
            var _this_ethProvider;
            if (!_this.universalProvider) {
                throw new _errors.errors.ProviderNotInitializedError();
            }
            _this.emit(_enums.PROVIDER_EVENT_BUS_EVENTS.BeforeTxSent, {
                txBody: tx
            });
            const transactionResponse = yield (_this_ethProvider = _this.ethProvider) === null || _this_ethProvider === void 0 ? void 0 : _this_ethProvider.send('eth_sendTransaction', [
                tx
            ]);
            _this.emit(_enums.PROVIDER_EVENT_BUS_EVENTS.TxSent, {
                txHash: transactionResponse === null || transactionResponse === void 0 ? void 0 : transactionResponse.hash
            });
            const receipt = yield transactionResponse === null || transactionResponse === void 0 ? void 0 : transactionResponse.wait();
            _this.emit(_enums.PROVIDER_EVENT_BUS_EVENTS.TxConfirmed, {
                txResponse: receipt
            });
            return receipt;
        })();
    }
    signMessage(message) {
        var _this = this;
        return _async_to_generator(function*() {
            var _this_ethProvider;
            if (!_this.ethProvider || !_this.address) {
                throw new _errors.errors.ProviderDisconnected();
            }
            return (_this_ethProvider = _this.ethProvider) === null || _this_ethProvider === void 0 ? void 0 : _this_ethProvider.send('personal_sign', [
                _ethers.utils.hexlify(_ethers.utils.toUtf8Bytes(message)),
                _this.address.toLowerCase()
            ]);
        })();
    }
    get defaultEventPayload() {
        return {
            address: this.address,
            chainId: this.chainId,
            isConnected: this.isConnected,
            walletConnectDisplayUri: this.walletConnectDisplayUri
        };
    }
    setListeners() {
        var _this = this;
        return _async_to_generator(function*() {
            if (!_this.universalProvider) {
                throw new _errors.errors.ProviderNotInitializedError();
            }
            _this.universalProvider.on('session_event', (e)=>{
                var _e_params, _e_params_event_data__split, _e_params_event_data_, _e_params_event_data, _e_params_event, _e_params1;
                var _e_params_chainId_split_;
                _this.chainId = (_e_params_chainId_split_ = e === null || e === void 0 ? void 0 : (_e_params = e.params) === null || _e_params === void 0 ? void 0 : _e_params.chainId.split(':')[1]) !== null && _e_params_chainId_split_ !== void 0 ? _e_params_chainId_split_ : _this.chainId;
                var _e_params_event_data__split_;
                _this.address = (_e_params_event_data__split_ = e === null || e === void 0 ? void 0 : (_e_params1 = e.params) === null || _e_params1 === void 0 ? void 0 : (_e_params_event = _e_params1.event) === null || _e_params_event === void 0 ? void 0 : (_e_params_event_data = _e_params_event.data) === null || _e_params_event_data === void 0 ? void 0 : (_e_params_event_data_ = _e_params_event_data[0]) === null || _e_params_event_data_ === void 0 ? void 0 : (_e_params_event_data__split = _e_params_event_data_.split(':')) === null || _e_params_event_data__split === void 0 ? void 0 : _e_params_event_data__split[2]) !== null && _e_params_event_data__split_ !== void 0 ? _e_params_event_data__split_ : _this.address;
                _this.emit(_enums.PROVIDER_EVENT_BUS_EVENTS.AccountChanged, _this.defaultEventPayload);
                _this.emit(_enums.PROVIDER_EVENT_BUS_EVENTS.ChainChanged, _this.defaultEventPayload);
                _this.emit(_this.isConnected ? _enums.PROVIDER_EVENT_BUS_EVENTS.Connect : _enums.PROVIDER_EVENT_BUS_EVENTS.Disconnect, _this.defaultEventPayload);
            });
            _this.universalProvider.on('session_delete', ()=>{
                _this.emit(_enums.PROVIDER_EVENT_BUS_EVENTS.Disconnect, _this.defaultEventPayload);
            });
            _this.universalProvider.on('display_uri', (uri)=>{
                _this.walletConnectDisplayUri = uri;
                _this.emit(_enums.PROVIDER_EVENT_BUS_EVENTS.WalletConnectDisplayUri, _this.defaultEventPayload);
            });
        })();
    }
    /**
   * import { Provider } from '@distributed/w3p'
   * import UniversalProvider from '@walletconnect/universal-provider'
   *
   * const universalProvider = new UniversalProvider({
   *   projectId,
   *   relayUrl,
   *   logger,
   * })
   *
   * const provider = new Provider(WalletConnectEvmProvider)
   * provider.init(providerInstance, listeners)
   * @param universalProvider
   */ constructor(universalProvider){
        super();
        _define_property(this, "universalProvider", void 0);
        _define_property(this, "walletConnectDisplayUri", '');
        _define_property(this, "chainId", void 0);
        _define_property(this, "address", void 0);
        this.universalProvider = universalProvider;
    }
} /*#__PURE__*/  /*#__PURE__*/ ;

//# sourceMappingURL=data:application/json;base64,