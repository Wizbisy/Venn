"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    connectEthAccounts: function() {
        return connectEthAccounts;
    },
    getEthExplorerAddressUrl: function() {
        return getEthExplorerAddressUrl;
    },
    getEthExplorerTxUrl: function() {
        return getEthExplorerTxUrl;
    },
    handleEthError: function() {
        return handleEthError;
    },
    requestAddEthChain: function() {
        return requestAddEthChain;
    },
    requestSwitchEthChain: function() {
        return requestSwitchEthChain;
    },
    wrapExternalEthProvider: function() {
        return wrapExternalEthProvider;
    }
});
const _tools = require("@distributedlab/tools");
const _ethers = require("ethers");
const _enums = require("../enums");
const _errors = require("../errors");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const getEthExplorerTxUrl = (chain, txHash)=>{
    return `${chain.explorerUrl}/tx/${txHash}`;
};
const getEthExplorerAddressUrl = (chain, address)=>{
    return `${chain.explorerUrl}/address/${address}`;
};
const requestSwitchEthChain = function() {
    var _ref = _async_to_generator(function*(provider, chainId) {
        yield provider.send('wallet_switchEthereumChain', [
            {
                chainId: _ethers.utils.hexValue(chainId)
            }
        ]);
    });
    return function requestSwitchEthChain(provider, chainId) {
        return _ref.apply(this, arguments);
    };
}();
const requestAddEthChain = function() {
    var _ref = _async_to_generator(function*(provider, chain) {
        var _chain_token_decimals;
        yield provider.send('wallet_addEthereumChain', [
            _object_spread(_object_spread_props(_object_spread({
                chainId: _ethers.utils.hexValue(Number(chain.id)),
                chainName: chain.name
            }, chain.token.name && chain.token.symbol && {
                nativeCurrency: {
                    name: chain.token.name,
                    symbol: chain.token.symbol,
                    decimals: (_chain_token_decimals = chain.token.decimals) !== null && _chain_token_decimals !== void 0 ? _chain_token_decimals : _tools.DECIMALS.WEI
                }
            }), {
                rpcUrls: [
                    chain.rpcUrl
                ],
                blockExplorerUrls: [
                    ...chain.explorerUrl ? [
                        chain.explorerUrl
                    ] : []
                ]
            }), chain.icon && {
                iconUrls: [
                    chain.icon
                ]
            })
        ]);
    });
    return function requestAddEthChain(provider, chain) {
        return _ref.apply(this, arguments);
    };
}();
const connectEthAccounts = function() {
    var _ref = _async_to_generator(function*(provider) {
        yield provider.send('eth_requestAccounts', []);
    });
    return function connectEthAccounts(provider) {
        return _ref.apply(this, arguments);
    };
}();
function handleEthError(error, defaultHandlerFn) {
    switch(error.code){
        case _enums.EIP1193.UserRejectedRequest:
            throw new _errors.errors.ProviderUserRejectedRequest(error);
        case _enums.EIP1193.UnrecognizedChain:
            throw new _errors.errors.ProviderChainNotFoundError(error);
        case _enums.EIP1193.Unauthorized:
            throw new _errors.errors.ProviderUnauthorized(error);
        case _enums.EIP1193.UnsupportedMethod:
            throw new _errors.errors.ProviderUnsupportedMethod(error);
        case _enums.EIP1193.Disconnected:
            throw new _errors.errors.ProviderDisconnected(error);
        case _enums.EIP1193.ChainDisconnected:
            throw new _errors.errors.ProviderChainDisconnected(error);
        case _enums.EIP1474.ParseError:
            throw new _errors.errors.ProviderParseError(error);
        case _enums.EIP1474.InvalidRequest:
            throw new _errors.errors.ProviderInvalidRequest(error);
        case _enums.EIP1474.MethodNotFound:
            throw new _errors.errors.ProviderMethodNotFound(error);
        case _enums.EIP1474.InvalidParams:
            throw new _errors.errors.ProviderInvalidParams(error);
        case _enums.EIP1474.InternalError:
            throw new _errors.errors.ProviderInternalError(error);
        case _enums.EIP1474.InvalidInput:
            throw new _errors.errors.ProviderInvalidInput(error);
        case _enums.EIP1474.ResourceNotFound:
            throw new _errors.errors.ProviderResourceNotFound(error);
        case _enums.EIP1474.ResourceUnavailable:
            throw new _errors.errors.ProviderResourceUnavailable(error);
        case _enums.EIP1474.TransactionRejected:
            throw new _errors.errors.ProviderTransactionRejected(error);
        case _enums.EIP1474.MethodNotSupported:
            throw new _errors.errors.ProviderMethodNotSupported(error);
        case _enums.EIP1474.LimitExceeded:
            throw new _errors.errors.ProviderLimitExceeded(error);
        case _enums.EIP1474.JsonRpcVersionNotSupported:
            throw new _errors.errors.ProviderJsonRpcVersionNotSupported(error);
        default:
            if (defaultHandlerFn) {
                defaultHandlerFn(error);
            }
            throw error;
    }
}
const wrapExternalEthProvider = (provider, errorHandler)=>{
    var _provider_request;
    const _baseRequest = (_provider_request = provider.request) === null || _provider_request === void 0 ? void 0 : _provider_request.bind(provider);
    provider.request = function() {
        var _ref = _async_to_generator(function*(request) {
            let result;
            try {
                result = yield _baseRequest === null || _baseRequest === void 0 ? void 0 : _baseRequest(request);
            } catch (error) {
                handleEthError(error, errorHandler);
            }
            return result;
        });
        return function(request) {
            return _ref.apply(this, arguments);
        };
    }();
    return provider;
} /*#__PURE__*/  /*#__PURE__*/  /*#__PURE__*/  /*#__PURE__*/ ;

//# sourceMappingURL=data:application/json;base64,