"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    decodeSolanaTx: function() {
        return decodeSolanaTx;
    },
    getSolExplorerAddressUrl: function() {
        return getSolExplorerAddressUrl;
    },
    getSolExplorerTxUrl: function() {
        return getSolExplorerTxUrl;
    },
    handleSolError: function() {
        return handleSolError;
    }
});
const _web3 = require("@solana/web3.js");
const _bs58 = _interop_require_default(require("bs58"));
const _enums = require("../enums");
const _errors = require("../errors");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function handleSolError(error) {
    var _error_error;
    const ErrorCode = (error === null || error === void 0 ? void 0 : (_error_error = error.error) === null || _error_error === void 0 ? void 0 : _error_error.code) || (error === null || error === void 0 ? void 0 : error.code);
    switch(ErrorCode){
        case _enums.EIP1193.UserRejectedRequest:
            throw new _errors.errors.ProviderUserRejectedRequest();
        case _enums.EIP1193.Unauthorized:
            throw new _errors.errors.ProviderUnauthorized();
        case _enums.EIP1193.UnsupportedMethod:
            throw new _errors.errors.ProviderUnsupportedMethod();
        case _enums.EIP1193.Disconnected:
            throw new _errors.errors.ProviderDisconnected();
        case _enums.EIP1193.ChainDisconnected:
            throw new _errors.errors.ProviderChainDisconnected();
        case _enums.EIP1474.ParseError:
            throw new _errors.errors.ProviderParseError();
        case _enums.EIP1474.InvalidRequest:
            throw new _errors.errors.ProviderInvalidRequest();
        case _enums.EIP1474.MethodNotFound:
            throw new _errors.errors.ProviderMethodNotFound();
        case _enums.EIP1474.InvalidParams:
            throw new _errors.errors.ProviderInvalidParams();
        case _enums.EIP1474.InternalError:
            throw new _errors.errors.ProviderInternalError();
        case _enums.EIP1474.InvalidInput:
            throw new _errors.errors.ProviderInvalidInput();
        case _enums.EIP1474.ResourceNotFound:
            throw new _errors.errors.ProviderResourceNotFound();
        case _enums.EIP1474.ResourceUnavailable:
            throw new _errors.errors.ProviderResourceUnavailable();
        case _enums.EIP1474.TransactionRejected:
            throw new _errors.errors.ProviderTransactionRejected();
        case _enums.EIP1474.MethodNotSupported:
            throw new _errors.errors.ProviderMethodNotSupported();
        case _enums.EIP1474.LimitExceeded:
            throw new _errors.errors.ProviderLimitExceeded();
        case _enums.EIP1474.JsonRpcVersionNotSupported:
            throw new _errors.errors.ProviderJsonRpcVersionNotSupported();
        default:
            throw error;
    }
}
function decodeSolanaTx(tx) {
    const buff = _bs58.default.decode(tx);
    return _web3.Transaction.from(buff);
}
function getSolExplorerTxUrl(chain, txHash) {
    const url = `${chain.explorerUrl}/tx/${txHash}`;
    return chain.id === _enums.SOLANA_CHAINS.MainNet ? url : `${url}?cluster=${chain.id}`;
}
function getSolExplorerAddressUrl(chain, address) {
    const url = `${chain.explorerUrl}/address/${address}`;
    return chain.id === _enums.SOLANA_CHAINS.MainNet ? url : `${url}?cluster=${chain.id}`;
} /*#__PURE__*/ 

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9oZWxwZXJzL3NvbGFuYS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUcmFuc2FjdGlvbiB9IGZyb20gJ0Bzb2xhbmEvd2ViMy5qcydcbmltcG9ydCBiczU4IGZyb20gJ2JzNTgnXG5cbmltcG9ydCB7IEVJUDExOTMsIEVJUDE0NzQsIFNPTEFOQV9DSEFJTlMgfSBmcm9tICdAL2VudW1zJ1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnQC9lcnJvcnMnXG5pbXBvcnQgdHlwZSB7IENoYWluLCBTb2xhbmFQcm92aWRlclJwY0Vycm9yIH0gZnJvbSAnQC90eXBlcydcblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZVNvbEVycm9yKGVycm9yOiBTb2xhbmFQcm92aWRlclJwY0Vycm9yKTogbmV2ZXIge1xuICBjb25zdCBFcnJvckNvZGUgPSBlcnJvcj8uZXJyb3I/LmNvZGUgfHwgZXJyb3I/LmNvZGVcblxuICBzd2l0Y2ggKEVycm9yQ29kZSkge1xuICAgIGNhc2UgRUlQMTE5My5Vc2VyUmVqZWN0ZWRSZXF1ZXN0OlxuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Qcm92aWRlclVzZXJSZWplY3RlZFJlcXVlc3QoKVxuICAgIGNhc2UgRUlQMTE5My5VbmF1dGhvcml6ZWQ6XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlByb3ZpZGVyVW5hdXRob3JpemVkKClcbiAgICBjYXNlIEVJUDExOTMuVW5zdXBwb3J0ZWRNZXRob2Q6XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlByb3ZpZGVyVW5zdXBwb3J0ZWRNZXRob2QoKVxuICAgIGNhc2UgRUlQMTE5My5EaXNjb25uZWN0ZWQ6XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlByb3ZpZGVyRGlzY29ubmVjdGVkKClcbiAgICBjYXNlIEVJUDExOTMuQ2hhaW5EaXNjb25uZWN0ZWQ6XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlByb3ZpZGVyQ2hhaW5EaXNjb25uZWN0ZWQoKVxuICAgIGNhc2UgRUlQMTQ3NC5QYXJzZUVycm9yOlxuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Qcm92aWRlclBhcnNlRXJyb3IoKVxuICAgIGNhc2UgRUlQMTQ3NC5JbnZhbGlkUmVxdWVzdDpcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuUHJvdmlkZXJJbnZhbGlkUmVxdWVzdCgpXG4gICAgY2FzZSBFSVAxNDc0Lk1ldGhvZE5vdEZvdW5kOlxuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Qcm92aWRlck1ldGhvZE5vdEZvdW5kKClcbiAgICBjYXNlIEVJUDE0NzQuSW52YWxpZFBhcmFtczpcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuUHJvdmlkZXJJbnZhbGlkUGFyYW1zKClcbiAgICBjYXNlIEVJUDE0NzQuSW50ZXJuYWxFcnJvcjpcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuUHJvdmlkZXJJbnRlcm5hbEVycm9yKClcbiAgICBjYXNlIEVJUDE0NzQuSW52YWxpZElucHV0OlxuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Qcm92aWRlckludmFsaWRJbnB1dCgpXG4gICAgY2FzZSBFSVAxNDc0LlJlc291cmNlTm90Rm91bmQ6XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlByb3ZpZGVyUmVzb3VyY2VOb3RGb3VuZCgpXG4gICAgY2FzZSBFSVAxNDc0LlJlc291cmNlVW5hdmFpbGFibGU6XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlByb3ZpZGVyUmVzb3VyY2VVbmF2YWlsYWJsZSgpXG4gICAgY2FzZSBFSVAxNDc0LlRyYW5zYWN0aW9uUmVqZWN0ZWQ6XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlByb3ZpZGVyVHJhbnNhY3Rpb25SZWplY3RlZCgpXG4gICAgY2FzZSBFSVAxNDc0Lk1ldGhvZE5vdFN1cHBvcnRlZDpcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuUHJvdmlkZXJNZXRob2ROb3RTdXBwb3J0ZWQoKVxuICAgIGNhc2UgRUlQMTQ3NC5MaW1pdEV4Y2VlZGVkOlxuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Qcm92aWRlckxpbWl0RXhjZWVkZWQoKVxuICAgIGNhc2UgRUlQMTQ3NC5Kc29uUnBjVmVyc2lvbk5vdFN1cHBvcnRlZDpcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuUHJvdmlkZXJKc29uUnBjVmVyc2lvbk5vdFN1cHBvcnRlZCgpXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IGVycm9yXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZVNvbGFuYVR4KHR4OiBzdHJpbmcpIHtcbiAgY29uc3QgYnVmZiA9IGJzNTguZGVjb2RlKHR4KVxuICByZXR1cm4gVHJhbnNhY3Rpb24uZnJvbShidWZmKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U29sRXhwbG9yZXJUeFVybChjaGFpbjogQ2hhaW4sIHR4SGFzaDogc3RyaW5nKSB7XG4gIGNvbnN0IHVybCA9IGAke2NoYWluLmV4cGxvcmVyVXJsfS90eC8ke3R4SGFzaH1gXG4gIHJldHVybiBjaGFpbi5pZCA9PT0gU09MQU5BX0NIQUlOUy5NYWluTmV0ID8gdXJsIDogYCR7dXJsfT9jbHVzdGVyPSR7Y2hhaW4uaWR9YFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U29sRXhwbG9yZXJBZGRyZXNzVXJsKGNoYWluOiBDaGFpbiwgYWRkcmVzczogc3RyaW5nKSB7XG4gIGNvbnN0IHVybCA9IGAke2NoYWluLmV4cGxvcmVyVXJsfS9hZGRyZXNzLyR7YWRkcmVzc31gXG4gIHJldHVybiBjaGFpbi5pZCA9PT0gU09MQU5BX0NIQUlOUy5NYWluTmV0ID8gdXJsIDogYCR7dXJsfT9jbHVzdGVyPSR7Y2hhaW4uaWR9YFxufVxuIl0sIm5hbWVzIjpbImRlY29kZVNvbGFuYVR4IiwiZ2V0U29sRXhwbG9yZXJBZGRyZXNzVXJsIiwiZ2V0U29sRXhwbG9yZXJUeFVybCIsImhhbmRsZVNvbEVycm9yIiwiZXJyb3IiLCJFcnJvckNvZGUiLCJjb2RlIiwiRUlQMTE5MyIsIlVzZXJSZWplY3RlZFJlcXVlc3QiLCJlcnJvcnMiLCJQcm92aWRlclVzZXJSZWplY3RlZFJlcXVlc3QiLCJVbmF1dGhvcml6ZWQiLCJQcm92aWRlclVuYXV0aG9yaXplZCIsIlVuc3VwcG9ydGVkTWV0aG9kIiwiUHJvdmlkZXJVbnN1cHBvcnRlZE1ldGhvZCIsIkRpc2Nvbm5lY3RlZCIsIlByb3ZpZGVyRGlzY29ubmVjdGVkIiwiQ2hhaW5EaXNjb25uZWN0ZWQiLCJQcm92aWRlckNoYWluRGlzY29ubmVjdGVkIiwiRUlQMTQ3NCIsIlBhcnNlRXJyb3IiLCJQcm92aWRlclBhcnNlRXJyb3IiLCJJbnZhbGlkUmVxdWVzdCIsIlByb3ZpZGVySW52YWxpZFJlcXVlc3QiLCJNZXRob2ROb3RGb3VuZCIsIlByb3ZpZGVyTWV0aG9kTm90Rm91bmQiLCJJbnZhbGlkUGFyYW1zIiwiUHJvdmlkZXJJbnZhbGlkUGFyYW1zIiwiSW50ZXJuYWxFcnJvciIsIlByb3ZpZGVySW50ZXJuYWxFcnJvciIsIkludmFsaWRJbnB1dCIsIlByb3ZpZGVySW52YWxpZElucHV0IiwiUmVzb3VyY2VOb3RGb3VuZCIsIlByb3ZpZGVyUmVzb3VyY2VOb3RGb3VuZCIsIlJlc291cmNlVW5hdmFpbGFibGUiLCJQcm92aWRlclJlc291cmNlVW5hdmFpbGFibGUiLCJUcmFuc2FjdGlvblJlamVjdGVkIiwiUHJvdmlkZXJUcmFuc2FjdGlvblJlamVjdGVkIiwiTWV0aG9kTm90U3VwcG9ydGVkIiwiUHJvdmlkZXJNZXRob2ROb3RTdXBwb3J0ZWQiLCJMaW1pdEV4Y2VlZGVkIiwiUHJvdmlkZXJMaW1pdEV4Y2VlZGVkIiwiSnNvblJwY1ZlcnNpb25Ob3RTdXBwb3J0ZWQiLCJQcm92aWRlckpzb25ScGNWZXJzaW9uTm90U3VwcG9ydGVkIiwidHgiLCJidWZmIiwiYnM1OCIsImRlY29kZSIsIlRyYW5zYWN0aW9uIiwiZnJvbSIsImNoYWluIiwidHhIYXNoIiwidXJsIiwiZXhwbG9yZXJVcmwiLCJpZCIsIlNPTEFOQV9DSEFJTlMiLCJNYWluTmV0IiwiYWRkcmVzcyJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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