"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Provider: function() {
        return Provider;
    },
    createProvider: function() {
        return createProvider;
    }
});
const _errors = require("./errors");
const _providerdetector = require("./provider-detector");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
/**
 * @description Represents a browser-based wallet.
 *
 * To connect to a wallet, create an object to represent the wallet to access with the `createProvider()` method. These wallet objects implement the `Provider` interface so you can access different types of wallets in a consistent way.
 *
 * @example
 * ```js
 * import { createProvider, MetamaskProvider } from '@rarimo/provider'
 *
 * const getMetamaskWalletAddress = async () => {
 *   // Connect to the Metamask wallet in the browser using ethers.js, using the MetamaskProvider interface to limit bundle size.
 *   const provider = await createProvider(MetamaskProvider)
 *
 *   // Get the address of the wallet
 *   console.log(provider.address)
 * }
 * ```
 */ let Provider = class Provider {
    get rawProvider() {
        var _this_proxy;
        return (_this_proxy = this.proxy) === null || _this_proxy === void 0 ? void 0 : _this_proxy.rawProvider;
    }
    get chainType() {
        var _this_proxy;
        return (_this_proxy = this.proxy) === null || _this_proxy === void 0 ? void 0 : _this_proxy.chainType;
    }
    get providerType() {
        return this.selectedProvider;
    }
    get isConnected() {
        return Boolean(this.chainId && this.address);
    }
    get address() {
        var _this_proxy;
        return (_this_proxy = this.proxy) === null || _this_proxy === void 0 ? void 0 : _this_proxy.address;
    }
    get chainId() {
        var _this_proxy;
        return (_this_proxy = this.proxy) === null || _this_proxy === void 0 ? void 0 : _this_proxy.chainId;
    }
    get chainDetails() {
        var _Provider_chainsDetails;
        return (_Provider_chainsDetails = Provider.chainsDetails) === null || _Provider_chainsDetails === void 0 ? void 0 : _Provider_chainsDetails[this.chainId];
    }
    init(provider, listeners) {
        var _this = this;
        return _async_to_generator(function*() {
            var _this_proxy;
            if (!provider.instance) throw new _errors.errors.ProviderInjectedInstanceNotFoundError();
            _this.proxy = new _this.proxyConstructor(provider.instance);
            Object.entries(listeners || {}).forEach(([key, value])=>{
                var _this_proxy_key, _this_proxy;
                (_this_proxy = _this.proxy) === null || _this_proxy === void 0 ? void 0 : (_this_proxy_key = _this_proxy[key]) === null || _this_proxy_key === void 0 ? void 0 : _this_proxy_key.call(_this_proxy, value);
            });
            _this.selectedProvider = provider.name;
            yield (_this_proxy = _this.proxy) === null || _this_proxy === void 0 ? void 0 : _this_proxy.init();
            return _this;
        })();
    }
    connect() {
        var _this = this;
        return _async_to_generator(function*() {
            var _this_proxy_connect, _this_proxy;
            if (!_this.proxy) throw new _errors.errors.ProviderNotInitializedError();
            yield (_this_proxy = _this.proxy) === null || _this_proxy === void 0 ? void 0 : (_this_proxy_connect = _this_proxy.connect) === null || _this_proxy_connect === void 0 ? void 0 : _this_proxy_connect.call(_this_proxy);
        })();
    }
    switchChain(chainId) {
        var _this = this;
        return _async_to_generator(function*() {
            var _this_proxy_switchChain, _this_proxy;
            yield (_this_proxy = _this.proxy) === null || _this_proxy === void 0 ? void 0 : (_this_proxy_switchChain = _this_proxy.switchChain) === null || _this_proxy_switchChain === void 0 ? void 0 : _this_proxy_switchChain.call(_this_proxy, chainId);
        })();
    }
    addChain(chain) {
        var _this = this;
        return _async_to_generator(function*() {
            var _this_proxy_addChain, _this_proxy;
            yield (_this_proxy = _this.proxy) === null || _this_proxy === void 0 ? void 0 : (_this_proxy_addChain = _this_proxy.addChain) === null || _this_proxy_addChain === void 0 ? void 0 : _this_proxy_addChain.call(_this_proxy, chain);
        })();
    }
    static setChainsDetails(chains) {
        this.chainsDetails = chains;
    }
    signAndSendTx(txRequestBody) {
        var _this = this;
        return _async_to_generator(function*() {
            var _this_proxy;
            if ((_this_proxy = _this.proxy) === null || _this_proxy === void 0 ? void 0 : _this_proxy.signAndSendTx) {
                var _this_proxy_signAndSendTx, _this_proxy1;
                return (_this_proxy1 = _this.proxy) === null || _this_proxy1 === void 0 ? void 0 : (_this_proxy_signAndSendTx = _this_proxy1.signAndSendTx) === null || _this_proxy_signAndSendTx === void 0 ? void 0 : _this_proxy_signAndSendTx.call(_this_proxy1, txRequestBody);
            }
            throw new _errors.errors.ProviderMethodNotSupported();
        })();
    }
    getHashFromTx(txResponse) {
        var _this_proxy_getHashFromTx, _this_proxy;
        var _this_proxy_getHashFromTx1;
        return (_this_proxy_getHashFromTx1 = (_this_proxy = this.proxy) === null || _this_proxy === void 0 ? void 0 : (_this_proxy_getHashFromTx = _this_proxy.getHashFromTx) === null || _this_proxy_getHashFromTx === void 0 ? void 0 : _this_proxy_getHashFromTx.call(_this_proxy, txResponse)) !== null && _this_proxy_getHashFromTx1 !== void 0 ? _this_proxy_getHashFromTx1 : '';
    }
    getTxUrl(chain, txHash) {
        var _this_proxy_getTxUrl, _this_proxy;
        var _this_proxy_getTxUrl1;
        return (_this_proxy_getTxUrl1 = (_this_proxy = this.proxy) === null || _this_proxy === void 0 ? void 0 : (_this_proxy_getTxUrl = _this_proxy.getTxUrl) === null || _this_proxy_getTxUrl === void 0 ? void 0 : _this_proxy_getTxUrl.call(_this_proxy, chain, txHash)) !== null && _this_proxy_getTxUrl1 !== void 0 ? _this_proxy_getTxUrl1 : '';
    }
    getAddressUrl(chain, address) {
        var _this_proxy_getAddressUrl, _this_proxy;
        var _this_proxy_getAddressUrl1;
        return (_this_proxy_getAddressUrl1 = (_this_proxy = this.proxy) === null || _this_proxy === void 0 ? void 0 : (_this_proxy_getAddressUrl = _this_proxy.getAddressUrl) === null || _this_proxy_getAddressUrl === void 0 ? void 0 : _this_proxy_getAddressUrl.call(_this_proxy, chain, address)) !== null && _this_proxy_getAddressUrl1 !== void 0 ? _this_proxy_getAddressUrl1 : '';
    }
    signMessage(message) {
        var _this = this;
        return _async_to_generator(function*() {
            var _this_proxy_signMessage, _this_proxy;
            var _this_proxy_signMessage1;
            return (_this_proxy_signMessage1 = (_this_proxy = _this.proxy) === null || _this_proxy === void 0 ? void 0 : (_this_proxy_signMessage = _this_proxy.signMessage) === null || _this_proxy_signMessage === void 0 ? void 0 : _this_proxy_signMessage.call(_this_proxy, message)) !== null && _this_proxy_signMessage1 !== void 0 ? _this_proxy_signMessage1 : '';
        })();
    }
    onAccountChanged(cb) {
        var _this_proxy;
        (_this_proxy = this.proxy) === null || _this_proxy === void 0 ? void 0 : _this_proxy.onAccountChanged(cb);
    }
    onChainChanged(cb) {
        var _this_proxy_onChainChanged, _this_proxy;
        (_this_proxy = this.proxy) === null || _this_proxy === void 0 ? void 0 : (_this_proxy_onChainChanged = _this_proxy.onChainChanged) === null || _this_proxy_onChainChanged === void 0 ? void 0 : _this_proxy_onChainChanged.call(_this_proxy, cb);
    }
    onConnect(cb) {
        var _this_proxy;
        (_this_proxy = this.proxy) === null || _this_proxy === void 0 ? void 0 : _this_proxy.onConnect(cb);
    }
    onDisconnect(cb) {
        var _this_proxy;
        (_this_proxy = this.proxy) === null || _this_proxy === void 0 ? void 0 : _this_proxy.onDisconnect(cb);
    }
    onInitiated(cb) {
        var _this_proxy;
        (_this_proxy = this.proxy) === null || _this_proxy === void 0 ? void 0 : _this_proxy.onInitiated(cb);
    }
    clearHandlers() {
        var _this_proxy;
        (_this_proxy = this.proxy) === null || _this_proxy === void 0 ? void 0 : _this_proxy.clearHandlers();
    }
    onBeforeTxSent(cb) {
        var _this_proxy;
        (_this_proxy = this.proxy) === null || _this_proxy === void 0 ? void 0 : _this_proxy.onBeforeTxSent(cb);
    }
    onTxSent(cb) {
        var _this_proxy;
        (_this_proxy = this.proxy) === null || _this_proxy === void 0 ? void 0 : _this_proxy.onTxSent(cb);
    }
    onTxConfirmed(cb) {
        var _this_proxy;
        (_this_proxy = this.proxy) === null || _this_proxy === void 0 ? void 0 : _this_proxy.onTxConfirmed(cb);
    }
    onWalletConnectDisplayUri(cb) {
        var _this_proxy;
        (_this_proxy = this.proxy) === null || _this_proxy === void 0 ? void 0 : _this_proxy.onWalletConnectDisplayUri(cb);
    }
    disconnect() {
        var _this = this;
        return _async_to_generator(function*() {
            var _this_proxy_disconnect, _this_proxy;
            yield (_this_proxy = _this.proxy) === null || _this_proxy === void 0 ? void 0 : (_this_proxy_disconnect = _this_proxy.disconnect) === null || _this_proxy_disconnect === void 0 ? void 0 : _this_proxy_disconnect.call(_this_proxy);
        })();
    }
    constructor(proxyConstructor){
        _define_property(this, "proxyConstructor", void 0);
        _define_property(this, "selectedProvider", void 0);
        _define_property(this, "proxy", void 0);
        this.selectedProvider = undefined;
        this.proxy = undefined;
        this.proxyConstructor = proxyConstructor;
    }
};
_define_property(Provider, "chainsDetails", void 0);
function createProvider(proxy) {
    return _createProvider.apply(this, arguments);
}
function _createProvider() {
    _createProvider = /**
 * @description Creates an instance of a wallet provider
 *
 * @example
 * const provider = await createProvider(MetamaskProvider)
 * await provider.init()
 * // or
 * const providerDetectorInstance = await new ProviderDetector().init()
 * const metamaskProvider = await createProvider(MetamaskProvider, { providerDetectorInstance })
 * const phantomProvider = await createProvider(PhantomProvider, { providerDetectorInstance })
 * // When using WalletConnectEvmProvider, it's required to set chainsDetails:
 * Provider.setChainsDetails(chainsDetails)
 */ _async_to_generator(function*(proxy, opts = {}) {
        const { providerDetector: providerDetectorInstance, listeners } = opts;
        const provider = new Provider(proxy);
        const providerDetector = providerDetectorInstance || new _providerdetector.ProviderDetector();
        if (!providerDetector.isInitiated) {
            yield providerDetector.init();
        }
        const providerInstance = providerDetector.getProvider(proxy.providerType);
        if (!providerInstance) throw new _errors.errors.ProviderInjectedInstanceNotFoundError();
        return provider.init(providerInstance, listeners);
    });
    return _createProvider.apply(this, arguments);
}

//# sourceMappingURL=data:application/json;base64,