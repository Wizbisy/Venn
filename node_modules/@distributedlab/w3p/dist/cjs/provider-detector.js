"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ProviderDetector", {
    enumerable: true,
    get: function() {
        return ProviderDetector;
    }
});
const _enums = require("./enums");
const _eth = require("./helpers/eth");
const _promise = require("./helpers/promise");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
let ProviderDetector = class ProviderDetector {
    static defineErrorHandlers(handlersMap) {
        ProviderDetector.errorHandlers = handlersMap;
    }
    static setCfg(cfg) {
        ProviderDetector.cfg = _object_spread({}, ProviderDetector.cfg, cfg);
    }
    init() {
        var _this = this;
        return _async_to_generator(function*() {
            _this.detectRawProviders();
            yield _this.defineProviders();
            _this.isInitiated = true;
            return _this;
        })();
    }
    get providers() {
        return this.pureProviders.reduce((acc, el)=>{
            const name = el.name.toLowerCase();
            acc[name] = _object_spread_props(_object_spread({}, el), {
                name
            });
            return acc;
        }, {});
    }
    get isEnabled() {
        return Boolean(this.pureProviders.length);
    }
    getProvider(provider) {
        return this.providers[provider];
    }
    addProvider(provider) {
        this.pureProviders.push(provider);
    }
    removeProvider(providerToRemove) {
        this.pureProviders = this.pureProviders.filter((provider)=>provider.name !== providerToRemove.name);
    }
    detectRawProviders() {
        var _window, _window_ethereum, _window1, _window2, _window3, _window4, _ProviderDetector_cfg;
        const ethProviders = ((_window = window) === null || _window === void 0 ? void 0 : _window.ethereum) ? ((_window1 = window) === null || _window1 === void 0 ? void 0 : (_window_ethereum = _window1.ethereum) === null || _window_ethereum === void 0 ? void 0 : _window_ethereum.providers) || [
            (_window2 = window) === null || _window2 === void 0 ? void 0 : _window2.ethereum
        ] : [];
        const phantomProvider = (_window3 = window) === null || _window3 === void 0 ? void 0 : _window3.solana;
        const solflareProvider = (_window4 = window) === null || _window4 === void 0 ? void 0 : _window4.solflare;
        const proxyEthProviders = ethProviders === null || ethProviders === void 0 ? void 0 : ethProviders.map((el)=>{
            var _ProviderDetector_errorHandlers;
            return (0, _eth.wrapExternalEthProvider)(el, (_ProviderDetector_errorHandlers = ProviderDetector.errorHandlers) === null || _ProviderDetector_errorHandlers === void 0 ? void 0 : _ProviderDetector_errorHandlers[_enums.CHAIN_TYPES.EVM]);
        });
        this.rawProviders = [
            ...((_ProviderDetector_cfg = ProviderDetector.cfg) === null || _ProviderDetector_cfg === void 0 ? void 0 : _ProviderDetector_cfg.isWrapDefaultProviders) && proxyEthProviders ? proxyEthProviders : ethProviders,
            ...phantomProvider ? [
                phantomProvider
            ] : [],
            ...solflareProvider ? [
                solflareProvider
            ] : []
        ];
    }
    defineProviders() {
        var _this = this;
        return _async_to_generator(function*() {
            if (!_this.rawProviders.length) {
                yield (0, _promise.sleep)(3000);
                _this.detectRawProviders();
            }
            _this.designateProviders();
        })();
    }
    designateProviders() {
        if (!this.rawProviders.length) return;
        const browserProviders = this.rawProviders.map((el)=>{
            const appropriatedProviderName = this.getAppropriateProviderName(el);
            return {
                name: appropriatedProviderName,
                instance: el
            };
        });
        this.pureProviders = [
            ...this.pureProviders,
            ...browserProviders.filter((el, idx, arr)=>arr.findIndex((sec)=>sec.name === el.name) === idx)
        ];
    }
    getAppropriateProviderName(provider) {
        const providerName = Object.entries(_enums.PROVIDER_CHECKS).find((el)=>{
            const [, value] = el;
            return provider[value];
        });
        return providerName && providerName[0] || _enums.PROVIDERS.Fallback;
    }
    constructor(){
        _define_property(this, "pureProviders", void 0);
        _define_property(this, "rawProviders", void 0);
        _define_property(this, "isInitiated", false);
        this.pureProviders = [];
        this.rawProviders = [];
        ProviderDetector.setCfg({
            isWrapDefaultProviders: true
        });
    }
};
_define_property(ProviderDetector, "errorHandlers", void 0);
_define_property(ProviderDetector, "cfg", void 0);

//# sourceMappingURL=data:application/json;base64,