import { CHAIN_TYPES, PROVIDERS } from './enums';
import type { EthereumProvider, ProviderInstance, RawProvider, SolanaProvider } from './types';
declare global {
    interface Window {
        ethereum?: EthereumProvider;
        solana?: SolanaProvider;
        solflare?: SolanaProvider & {
            isSolflare: boolean;
        };
    }
}
type ErrorHandlersMap = {
    [key in CHAIN_TYPES]: (error: Error) => unknown;
};
type ProviderDetectorConfig = {
    isWrapDefaultProviders: boolean;
};
export declare class ProviderDetector<T extends keyof Record<string, string>> {
    pureProviders: ProviderInstance<T>[];
    rawProviders: RawProvider[];
    isInitiated: boolean;
    static errorHandlers?: ErrorHandlersMap;
    static cfg: ProviderDetectorConfig;
    constructor();
    static defineErrorHandlers(handlersMap: ErrorHandlersMap): void;
    static setCfg(cfg: Partial<typeof ProviderDetector.cfg>): void;
    init(): Promise<ProviderDetector<T>>;
    get providers(): Record<PROVIDERS | T, ProviderInstance>;
    get isEnabled(): boolean;
    getProvider(provider: PROVIDERS | T): ProviderInstance | undefined;
    addProvider(provider: ProviderInstance<T>): void;
    removeProvider(providerToRemove: ProviderInstance<T>): void;
    detectRawProviders(): void;
    defineProviders(): Promise<void>;
    designateProviders(): void;
    getAppropriateProviderName(provider: RawProvider): PROVIDERS;
}
export {};
