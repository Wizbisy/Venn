import { PROVIDERS } from '../../enums';
import type { Chain, ChainId, NearRawProvider, ProviderProxy, RawProvider, TransactionResponse, TxRequestBody } from '../../types';
import { ProviderEventBus } from './_event-bus';
export declare class NearProvider extends ProviderEventBus implements ProviderProxy {
    readonly provider: NearRawProvider;
    rawProvider: RawProvider;
    chainId?: ChainId;
    address?: string;
    constructor(provider: RawProvider);
    static get providerType(): PROVIDERS;
    get isConnected(): boolean;
    get defaultEventPayload(): {
        chainId: ChainId | undefined;
        address: string | undefined;
        isConnected: boolean;
    };
    init(): Promise<void>;
    updateProviderState(): void;
    switchChain(chainId: ChainId): Promise<void>;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    getHashFromTxResponse(txResponse: TransactionResponse): string;
    getTxUrl(chain: Chain, txHash: string): string;
    getAddressUrl(chain: Chain, address: string): string;
    signAndSendTx(txRequestBody: TxRequestBody): Promise<TransactionResponse>;
}
