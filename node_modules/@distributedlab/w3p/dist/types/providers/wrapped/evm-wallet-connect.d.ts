import UniversalProvider from '@walletconnect/universal-provider';
import { providers } from 'ethers';
import { CHAIN_TYPES, PROVIDERS } from '../../enums';
import type { Chain, ChainId, ProviderProxy, RawProvider, TransactionResponse, TxRequestBody } from '../../types';
import { ProviderEventBus } from '../wrapped/_event-bus';
export declare class WalletConnectEvmProvider extends ProviderEventBus implements ProviderProxy {
    universalProvider: UniversalProvider;
    walletConnectDisplayUri: string;
    chainId?: ChainId;
    address?: string;
    /**
     * import { Provider } from '@distributed/w3p'
     * import UniversalProvider from '@walletconnect/universal-provider'
     *
     * const universalProvider = new UniversalProvider({
     *   projectId,
     *   relayUrl,
     *   logger,
     * })
     *
     * const provider = new Provider(WalletConnectEvmProvider)
     * provider.init(providerInstance, listeners)
     * @param universalProvider
     */
    constructor(universalProvider: RawProvider);
    static get providerType(): PROVIDERS;
    get rawProvider(): RawProvider;
    get ethProvider(): providers.Web3Provider | null;
    get chainType(): CHAIN_TYPES;
    get isConnected(): boolean;
    init(): Promise<void>;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    checkForPersistedSession(): Promise<void>;
    getAddressUrl(chain: Chain, address: string): string;
    getTxUrl(chain: Chain, txHash: string): string;
    getHashFromTx(txResponse: TransactionResponse): string;
    /**
     * @description Switch the chain with WalletConnect Provider.
     * You should always add a network first with the proper method
     * {@link Provider.setChainDetails} and then change it.
     */
    switchChain(chainId: ChainId): Promise<void>;
    setCustomRpcs(): Promise<void>;
    addChain(chain: Chain): Promise<void>;
    signAndSendTx(tx: TxRequestBody): Promise<TransactionResponse>;
    signMessage(message: string): Promise<string>;
    get defaultEventPayload(): {
        address: string | undefined;
        chainId: ChainId | undefined;
        isConnected: boolean;
        walletConnectDisplayUri: string;
    };
    setListeners(): Promise<void>;
}
