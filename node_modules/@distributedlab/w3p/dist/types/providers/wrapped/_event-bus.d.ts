import { EventEmitter } from '@distributedlab/tools';
import { PROVIDER_EVENT_BUS_EVENTS } from '../../enums';
import type { ProviderEventMap, ProviderEventPayload } from '../../types';
export declare class ProviderEventBus {
    readonly emitter: EventEmitter<ProviderEventMap>;
    emit(event: PROVIDER_EVENT_BUS_EVENTS, payload: ProviderEventPayload): void;
    onBeforeTxSent(cb: (e?: ProviderEventPayload) => void): void;
    onTxSent(cb: (e?: ProviderEventPayload) => void): void;
    onTxConfirmed(cb: (e?: ProviderEventPayload) => void): void;
    onInitiated(cb: (e?: ProviderEventPayload) => void): void;
    onConnect(cb: (e?: ProviderEventPayload) => void): void;
    onDisconnect(cb: (e?: ProviderEventPayload) => void): void;
    onAccountChanged(cb: (e?: ProviderEventPayload) => void): void;
    onChainChanged(cb: (e?: ProviderEventPayload) => void): void;
    onWalletConnectDisplayUri(cb: (e?: ProviderEventPayload) => void): void;
    clearHandlers(): void;
}
