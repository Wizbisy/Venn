import { RuntimeError } from '@distributedlab/tools';
export declare class ProviderNotInitializedError extends RuntimeError {
    name: string;
    constructor(error?: TypeError);
}
export declare class ProviderInjectedInstanceNotFoundError extends RuntimeError {
    name: string;
    constructor(error?: TypeError);
}
export declare class ProviderChainNotFoundError extends RuntimeError {
    name: string;
    constructor(error?: TypeError);
}
export declare class ProviderChainDetailsNotFoundError extends RuntimeError {
    name: string;
    constructor(error?: TypeError);
}
export declare class ProviderUserRejectedRequest extends RuntimeError {
    name: string;
    constructor(error?: TypeError);
}
export declare class ProviderUnauthorized extends RuntimeError {
    name: string;
    constructor(error?: TypeError);
}
export declare class ProviderUnsupportedMethod extends RuntimeError {
    name: string;
    constructor(error?: TypeError);
}
export declare class ProviderDisconnected extends RuntimeError {
    name: string;
    constructor(error?: TypeError);
}
export declare class ProviderChainDisconnected extends RuntimeError {
    name: string;
    constructor(error?: TypeError);
}
export declare class ProviderParseError extends RuntimeError {
    name: string;
    constructor(error?: TypeError);
}
export declare class ProviderInvalidRequest extends RuntimeError {
    name: string;
    constructor(error?: TypeError);
}
export declare class ProviderMethodNotFound extends RuntimeError {
    name: string;
    constructor(error?: TypeError);
}
export declare class ProviderInvalidParams extends RuntimeError {
    name: string;
    constructor(error?: TypeError);
}
export declare class ProviderInternalError extends RuntimeError {
    name: string;
    constructor(error?: TypeError);
}
export declare class ProviderInvalidInput extends RuntimeError {
    name: string;
    constructor(error?: TypeError);
}
export declare class ProviderResourceNotFound extends RuntimeError {
    name: string;
    constructor(error?: TypeError);
}
export declare class ProviderResourceUnavailable extends RuntimeError {
    name: string;
    constructor(error?: TypeError);
}
export declare class ProviderTransactionRejected extends RuntimeError {
    name: string;
    constructor(error?: TypeError);
}
export declare class ProviderMethodNotSupported extends RuntimeError {
    name: string;
    constructor(error?: TypeError);
}
export declare class ProviderLimitExceeded extends RuntimeError {
    name: string;
    constructor(error?: TypeError);
}
export declare class ProviderJsonRpcVersionNotSupported extends RuntimeError {
    name: string;
    constructor(error?: TypeError);
}
export declare class ProviderJsonRpcInvalid extends RuntimeError {
    name: string;
    constructor(error?: TypeError);
}
