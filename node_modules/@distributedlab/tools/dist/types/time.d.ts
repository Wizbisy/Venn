import { Dayjs } from 'dayjs';
import type { Inclusivity, IsoDate, TimeCalendar, TimeDate, TimeFormat, TimeLocale, TimeManipulate, TimeOpUnit, TimeUnit, UnixDate } from './types';
export declare class Time {
    #private;
    constructor(date?: TimeDate, format?: TimeFormat);
    static locale(preset?: string | ILocale, object?: Partial<ILocale>, isLocal?: boolean): string;
    static setDefaultTimezone(timezone?: string): void;
    static setLocale(localeName: string, customConfig: TimeLocale): TimeLocale;
    private _dayjs;
    private _tz;
    get dayjs(): Dayjs;
    tz(timezone?: string): Time;
    utc(keepLocalTime?: boolean): Time;
    get isValid(): boolean;
    clone(): Time;
    get timestamp(): UnixDate;
    get ms(): number;
    get ISO(): IsoDate;
    get RFC3339(): IsoDate;
    get(unit: TimeUnit): number;
    getAsObject(unit: TimeUnit[]): {
        [K in (typeof unit)[number]]: number;
    };
    add(value: number, unit?: TimeManipulate): Time;
    format(format?: string): IsoDate;
    toDate(): Date;
    toCalendar(referenceTime?: TimeDate, calendar?: TimeCalendar): string;
    subtract(value: number, unit?: TimeManipulate): Time;
    startOf(unit: TimeOpUnit): Time;
    isSame(comparisonDate?: TimeDate, unit?: TimeOpUnit): boolean;
    isBefore(comparisonDate?: TimeDate): boolean;
    isAfter(comparisonDate?: TimeDate): boolean;
    isSameOrAfter(comparisonDate?: TimeDate): boolean;
    isSameOrBefore(comparisonDate?: TimeDate): boolean;
    isBetween(startDate?: TimeDate, endDate?: TimeDate, unit?: TimeManipulate, inclusivity?: Inclusivity): boolean;
    diff(comparisonDate: Time, unit?: TimeUnit, isTruncated?: boolean): number;
    getFrom(date: TimeDate): string;
    get fromNow(): string;
    getTo(date: TimeDate): string;
    get toNow(): string;
}
export declare const time: (date?: TimeDate, format?: TimeFormat) => Time;
