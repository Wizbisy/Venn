import type { EventHandler, EventHandlersMap, EventMap, EventMapKey } from './types';
export declare class EventEmitter<T extends EventMap> {
    handlers: EventHandlersMap<T>;
    on<K extends EventMapKey<T>>(key: K, fn: EventHandler<T[K]>): void;
    once<K extends EventMapKey<T>>(key: K, fn: EventHandler<T[K]>): void;
    off<K extends EventMapKey<T>>(key: K, fn: EventHandler<T[K]>): void;
    emit<K extends EventMapKey<T>>(key: K, data?: T[K]): void | never;
    clear(): void;
}
