import { BN_ROUNDING, DECIMALS } from '../enums';
import type { BnConfig, BnConfigLike, BnFormatConfig, BnGlobalConfig, BnLike } from '../types';
export declare class BN {
    #private;
    /**
     * Solidity maximum uint256 value.
     */
    static get MAX_UINT256(): BN;
    static get WEI_DECIMALS(): DECIMALS;
    static get ROUNDING(): typeof BN_ROUNDING;
    /**
     * {@link BN} class global config.
     */
    static get config(): BnGlobalConfig;
    /**
     * {@link BN} class global precision.
     */
    static get precision(): number;
    /**
     *
     * @param value - Always BigInt * ten power of {@link BN.precision}
     * @param config - The config of the value.
     * @protected
     * @returns A new {@link BN} instance.
     */
    protected constructor(value: bigint, config: BnConfig);
    /**
     * Sets new {@link BnGlobalConfig} config to the {@link BN}.
     */
    static setConfig(config: Partial<BnGlobalConfig>): void;
    /**
     *
     * @returns `true` if `arg` is {@link BN} instance.
     */
    static isBn(arg: unknown): arg is BN;
    /**
     * @returns A new {@link BN} if `value` argument is valid big int like value,
     * otherwise throws {@link RuntimeError}.
     *
     * @example
     * ```ts
     * const oneEth = BN.fromBigInt('1000000000000000000', 18)
     * ```
     */
    static fromBigInt(value: BnLike, decimalsOrConfig?: BnConfigLike): BN;
    /**
     * @returns A new {@link BN} if `value` argument is valid integer or float value,
     * otherwise throws {@link RuntimeError}.
     * @example
     * ```ts
     * const oneEth = BN.fromRaw(1, 18)
     * ```
     */
    static fromRaw(value: Exclude<BnLike, BN>, decimalsOrConfig?: BnConfigLike): BN;
    /**
     *  @returns A minimum {@link BN} value from the `args`.
     */
    static min(...args: BN[]): BN;
    /**
     *  @returns A maximum {@link BN} value from the `args`.
     */
    static max(...args: BN[]): BN;
    /**
     *  @returns A `this` config.
     */
    get config(): BnConfig;
    /**
     *  @returns The number of decimal places
     */
    get decimals(): number;
    /**
     *  @returns `true` if the `this` value is zero.
     */
    get isZero(): boolean;
    /**
     *  @returns `true` if the `this` value is positive.
     */
    get isPositive(): boolean;
    /**
     *  @returns `true` if the `this` value is negative.
     */
    get isNegative(): boolean;
    /**
     *  @returns A raw {@link BigInt} value with the {@link BN.precision} applied.
     */
    get raw(): bigint;
    /**
     *  @returns A big int string value with the `this.decimals` applied.
     */
    get value(): string;
    /**
     *  @returns A new {@link BN} with the result of this added to `other`.
     */
    add(other: BN): BN;
    /**
     *  @returns A new {@link BN} with the result of other subtracted from this.
     */
    sub(other: BN): BN;
    /**
     *  @returns A new {@link BN} with the result of this divided by `other`.
     */
    div(other: BN): BN;
    /**
     *  @returns A new {@link BN} with the result of this multiplied by `other`.
     */
    mul(other: BN): BN;
    /**
     *  @returns A comparison result between this and other.
     */
    cmp(other: BN): number;
    /**
     *  @returns `true` if `other` is equal to `this`.
     */
    eq(other: BN): boolean;
    /**
     *  @returns `true` if `other` is less than to `this`.
     */
    lt(other: BN): boolean;
    /**
     *  @returns `true` if `other` is less than or equal to `this`.
     */
    lte(other: BN): boolean;
    /**
     *  @returns `true` if `other` is greater than to `this`.
     */
    gt(other: BN): boolean;
    /**
     *  @returns `true` if `other` is greater than or equal to `this`.
     */
    gte(other: BN): boolean;
    /**
     * @returns A new {@link BN} whose value is the square root of `this`.
     * @throws {@link RuntimeError} if `BN.precision` is not even number.
     */
    sqrt(): BN;
    /**
     * @returns A new {@link BN} whose value is negated `this` (multiplied by -1).
     */
    negated(): BN;
    /**
     * @returns A new {@link BN} whose value is absolute `this`.
     */
    abs(): BN;
    /**
     * @returns A new {@link BN} whose value is `this` raised to the power of `exponent`.
     */
    pow(exponent: number): BN;
    /**
     * @returns A new {@link BN} whose value is percentage of `this` value.
     */
    percent(percent: number): BN;
    /**
     * @returns A new {@link BN} whose value is `this` with added percentage.
     */
    addPercent(percent: number): BN;
    /**
     * @returns A new {@link BN} whose value is `this` with subtracted percentage.
     */
    subPercent(percent: number): BN;
    /**
     * @returns A new {@link BN} with the provided decimals.
     */
    toDecimals(decimals: number): BN;
    /**
     * @returns A new {@link BN} with the provided decimals, less than current one,
     * otherwise throws {@link RuntimeError}.
     */
    toLessDecimals(decimals: number): BN;
    /**
     * @returns A new {@link BN} with the provided decimals, greater than current one,
     * otherwise throws {@link RuntimeError}.
     */
    toGreaterDecimals(decimals: number): BN;
    /**
     * @returns A string representing the value of `this` fixed-point notation and
     * formatted according to the properties of the {@link BN.config.format} and
     * `format` (if exist) objects.
     */
    format(format?: BnFormatConfig): string;
    /**
     * @returns A new {@link BN} whose value is the value of `this` rounded to
     * decimals using {@link BN_ROUNDING} rounding mode.
     */
    round(decimals: number, rounding?: BN_ROUNDING): BN;
    /**
     * @returns A human-readable float string.
     */
    toString(): string;
    /**
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#description}
     */
    toJSON(): string;
}
