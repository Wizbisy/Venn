function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _class_apply_descriptor_get(receiver, descriptor) {
    if (descriptor.get) {
        return descriptor.get.call(receiver);
    }
    return descriptor.value;
}
function _class_apply_descriptor_set(receiver, descriptor, value) {
    if (descriptor.set) {
        descriptor.set.call(receiver, value);
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
    }
}
function _class_extract_field_descriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
}
function _class_private_field_get(receiver, privateMap) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "get");
    return _class_apply_descriptor_get(receiver, descriptor);
}
function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function _class_private_field_set(receiver, privateMap, value) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "set");
    _class_apply_descriptor_set(receiver, descriptor, value);
    return value;
}
import dayjs from "dayjs";
import calendar from "dayjs/plugin/calendar";
import customParseFormat from "dayjs/plugin/customParseFormat";
import duration from "dayjs/plugin/duration";
import isBetween from "dayjs/plugin/isBetween";
import isSameOrAfter from "dayjs/plugin/isSameOrAfter";
import isSameOrBefore from "dayjs/plugin/isSameOrBefore";
import relativeTime from "dayjs/plugin/relativeTime";
import timezone from "dayjs/plugin/timezone";
import updateLocale from "dayjs/plugin/updateLocale";
import utc from "dayjs/plugin/utc";
dayjs.extend(isSameOrAfter);
dayjs.extend(isSameOrBefore);
dayjs.extend(relativeTime);
dayjs.extend(isBetween);
dayjs.extend(calendar);
dayjs.extend(utc);
dayjs.extend(customParseFormat);
dayjs.extend(updateLocale);
dayjs.extend(timezone);
dayjs.extend(duration);
var _date = new WeakMap();
export class Time {
    static locale(preset, object, isLocal) {
        return dayjs.locale(preset, object, isLocal);
    }
    static setDefaultTimezone(timezone) {
        dayjs.tz.setDefault(timezone);
    }
    static setLocale(localeName, customConfig) {
        return dayjs.updateLocale(localeName, customConfig);
    }
    _dayjs(date, format) {
        return dayjs(parseDate(date), format);
    }
    _tz(date, timezone) {
        return dayjs.tz(parseDate(date), timezone);
    }
    get dayjs() {
        return _class_private_field_get(this, _date);
    }
    tz(timezone) {
        _class_private_field_set(this, _date, this._tz(_class_private_field_get(this, _date), timezone));
        return this;
    }
    utc(keepLocalTime) {
        _class_private_field_set(this, _date, _class_private_field_get(this, _date).utc(keepLocalTime));
        return this;
    }
    get isValid() {
        return _class_private_field_get(this, _date).isValid();
    }
    clone() {
        return new Time(_class_private_field_get(this, _date).clone());
    }
    get timestamp() {
        return _class_private_field_get(this, _date).unix();
    }
    get ms() {
        return _class_private_field_get(this, _date).valueOf();
    }
    get ISO() {
        return _class_private_field_get(this, _date).toISOString();
    }
    get RFC3339() {
        return _class_private_field_get(this, _date).utc(true).format('YYYY-MM-DDTHH:mm:ss[Z]');
    }
    get(unit) {
        return _class_private_field_get(this, _date).get(unit);
    }
    getAsObject(unit) {
        return unit.reduce((acc, item)=>{
            acc[item] = this.get(item);
            return acc;
        }, {});
    }
    add(value, unit) {
        _class_private_field_set(this, _date, _class_private_field_get(this, _date).add(value, unit));
        return this;
    }
    format(format) {
        return _class_private_field_get(this, _date).format(format);
    }
    toDate() {
        return _class_private_field_get(this, _date).toDate();
    }
    toCalendar(referenceTime, calendar) {
        return _class_private_field_get(this, _date).calendar(parseDate(referenceTime), calendar);
    }
    subtract(value, unit) {
        _class_private_field_set(this, _date, _class_private_field_get(this, _date).subtract(value, unit));
        return this;
    }
    startOf(unit) {
        _class_private_field_set(this, _date, _class_private_field_get(this, _date).startOf(unit));
        return this;
    }
    isSame(comparisonDate, unit) {
        return _class_private_field_get(this, _date).isSame(parseDate(comparisonDate), unit);
    }
    isBefore(comparisonDate) {
        return _class_private_field_get(this, _date).isBefore(parseDate(comparisonDate));
    }
    isAfter(comparisonDate) {
        return _class_private_field_get(this, _date).isAfter(parseDate(comparisonDate));
    }
    isSameOrAfter(comparisonDate) {
        return _class_private_field_get(this, _date).isSameOrAfter(parseDate(comparisonDate));
    }
    isSameOrBefore(comparisonDate) {
        return _class_private_field_get(this, _date).isSameOrBefore(parseDate(comparisonDate));
    }
    isBetween(startDate, endDate, unit, inclusivity) {
        return _class_private_field_get(this, _date).isBetween(parseDate(startDate), parseDate(endDate), unit, inclusivity);
    }
    diff(comparisonDate, unit, isTruncated = false) {
        return _class_private_field_get(this, _date).diff(comparisonDate.dayjs, unit, isTruncated);
    }
    getFrom(date) {
        return _class_private_field_get(this, _date).from(parseDate(date));
    }
    get fromNow() {
        return _class_private_field_get(this, _date).fromNow();
    }
    getTo(date) {
        return _class_private_field_get(this, _date).to(parseDate(date));
    }
    get toNow() {
        return _class_private_field_get(this, _date).toNow();
    }
    constructor(date, format){
        _class_private_field_init(this, _date, {
            writable: true,
            value: void 0
        });
        _class_private_field_set(this, _date, this._dayjs(date, format));
    }
}
const parseDate = (date)=>{
    if (typeof date === 'number') return date * 1000;
    return date instanceof Time ? date.dayjs : date;
};
export const time = (date, format)=>{
    return new Time(date, format);
} /*#__PURE__*/ ;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90aW1lLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkYXlqcywgeyBEYXlqcyB9IGZyb20gJ2RheWpzJ1xuaW1wb3J0IGNhbGVuZGFyIGZyb20gJ2RheWpzL3BsdWdpbi9jYWxlbmRhcidcbmltcG9ydCBjdXN0b21QYXJzZUZvcm1hdCBmcm9tICdkYXlqcy9wbHVnaW4vY3VzdG9tUGFyc2VGb3JtYXQnXG5pbXBvcnQgZHVyYXRpb24gZnJvbSAnZGF5anMvcGx1Z2luL2R1cmF0aW9uJ1xuaW1wb3J0IGlzQmV0d2VlbiBmcm9tICdkYXlqcy9wbHVnaW4vaXNCZXR3ZWVuJ1xuaW1wb3J0IGlzU2FtZU9yQWZ0ZXIgZnJvbSAnZGF5anMvcGx1Z2luL2lzU2FtZU9yQWZ0ZXInXG5pbXBvcnQgaXNTYW1lT3JCZWZvcmUgZnJvbSAnZGF5anMvcGx1Z2luL2lzU2FtZU9yQmVmb3JlJ1xuaW1wb3J0IHJlbGF0aXZlVGltZSBmcm9tICdkYXlqcy9wbHVnaW4vcmVsYXRpdmVUaW1lJ1xuaW1wb3J0IHRpbWV6b25lIGZyb20gJ2RheWpzL3BsdWdpbi90aW1lem9uZSdcbmltcG9ydCB1cGRhdGVMb2NhbGUgZnJvbSAnZGF5anMvcGx1Z2luL3VwZGF0ZUxvY2FsZSdcbmltcG9ydCB1dGMgZnJvbSAnZGF5anMvcGx1Z2luL3V0YydcblxuaW1wb3J0IHR5cGUge1xuICBJbmNsdXNpdml0eSxcbiAgSXNvRGF0ZSxcbiAgVGltZUNhbGVuZGFyLFxuICBUaW1lRGF0ZSxcbiAgVGltZUZvcm1hdCxcbiAgVGltZUxvY2FsZSxcbiAgVGltZU1hbmlwdWxhdGUsXG4gIFRpbWVPcFVuaXQsXG4gIFRpbWVVbml0LFxuICBVbml4RGF0ZSxcbn0gZnJvbSAnQC90eXBlcydcblxuZGF5anMuZXh0ZW5kKGlzU2FtZU9yQWZ0ZXIpXG5kYXlqcy5leHRlbmQoaXNTYW1lT3JCZWZvcmUpXG5kYXlqcy5leHRlbmQocmVsYXRpdmVUaW1lKVxuZGF5anMuZXh0ZW5kKGlzQmV0d2VlbilcbmRheWpzLmV4dGVuZChjYWxlbmRhcilcbmRheWpzLmV4dGVuZCh1dGMpXG5kYXlqcy5leHRlbmQoY3VzdG9tUGFyc2VGb3JtYXQpXG5kYXlqcy5leHRlbmQodXBkYXRlTG9jYWxlKVxuZGF5anMuZXh0ZW5kKHRpbWV6b25lKVxuZGF5anMuZXh0ZW5kKGR1cmF0aW9uKVxuXG5leHBvcnQgY2xhc3MgVGltZSB7XG4gICNkYXRlOiBEYXlqc1xuXG4gIGNvbnN0cnVjdG9yKGRhdGU/OiBUaW1lRGF0ZSwgZm9ybWF0PzogVGltZUZvcm1hdCkge1xuICAgIHRoaXMuI2RhdGUgPSB0aGlzLl9kYXlqcyhkYXRlLCBmb3JtYXQpXG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGxvY2FsZShcbiAgICBwcmVzZXQ/OiBzdHJpbmcgfCBJTG9jYWxlLFxuICAgIG9iamVjdD86IFBhcnRpYWw8SUxvY2FsZT4sXG4gICAgaXNMb2NhbD86IGJvb2xlYW4sXG4gICk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGRheWpzLmxvY2FsZShwcmVzZXQsIG9iamVjdCwgaXNMb2NhbClcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgc2V0RGVmYXVsdFRpbWV6b25lKHRpbWV6b25lPzogc3RyaW5nKTogdm9pZCB7XG4gICAgZGF5anMudHouc2V0RGVmYXVsdCh0aW1lem9uZSlcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgc2V0TG9jYWxlKFxuICAgIGxvY2FsZU5hbWU6IHN0cmluZyxcbiAgICBjdXN0b21Db25maWc6IFRpbWVMb2NhbGUsXG4gICk6IFRpbWVMb2NhbGUge1xuICAgIHJldHVybiBkYXlqcy51cGRhdGVMb2NhbGUobG9jYWxlTmFtZSwgY3VzdG9tQ29uZmlnKVxuICB9XG5cbiAgcHJpdmF0ZSBfZGF5anMoZGF0ZT86IFRpbWVEYXRlLCBmb3JtYXQ/OiBUaW1lRm9ybWF0KTogRGF5anMge1xuICAgIHJldHVybiBkYXlqcyhwYXJzZURhdGUoZGF0ZSksIGZvcm1hdClcbiAgfVxuXG4gIHByaXZhdGUgX3R6KGRhdGU6IFRpbWVEYXRlLCB0aW1lem9uZT86IHN0cmluZykge1xuICAgIHJldHVybiBkYXlqcy50eihwYXJzZURhdGUoZGF0ZSksIHRpbWV6b25lKVxuICB9XG5cbiAgcHVibGljIGdldCBkYXlqcygpOiBEYXlqcyB7XG4gICAgcmV0dXJuIHRoaXMuI2RhdGVcbiAgfVxuXG4gIHB1YmxpYyB0eih0aW1lem9uZT86IHN0cmluZyk6IFRpbWUge1xuICAgIHRoaXMuI2RhdGUgPSB0aGlzLl90eih0aGlzLiNkYXRlLCB0aW1lem9uZSlcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgcHVibGljIHV0YyhrZWVwTG9jYWxUaW1lPzogYm9vbGVhbik6IFRpbWUge1xuICAgIHRoaXMuI2RhdGUgPSB0aGlzLiNkYXRlLnV0YyhrZWVwTG9jYWxUaW1lKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBwdWJsaWMgZ2V0IGlzVmFsaWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuI2RhdGUuaXNWYWxpZCgpXG4gIH1cblxuICBwdWJsaWMgY2xvbmUoKTogVGltZSB7XG4gICAgcmV0dXJuIG5ldyBUaW1lKHRoaXMuI2RhdGUuY2xvbmUoKSlcbiAgfVxuXG4gIHB1YmxpYyBnZXQgdGltZXN0YW1wKCk6IFVuaXhEYXRlIHtcbiAgICByZXR1cm4gdGhpcy4jZGF0ZS51bml4KClcbiAgfVxuXG4gIHB1YmxpYyBnZXQgbXMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy4jZGF0ZS52YWx1ZU9mKClcbiAgfVxuXG4gIHB1YmxpYyBnZXQgSVNPKCk6IElzb0RhdGUge1xuICAgIHJldHVybiB0aGlzLiNkYXRlLnRvSVNPU3RyaW5nKClcbiAgfVxuXG4gIHB1YmxpYyBnZXQgUkZDMzMzOSgpOiBJc29EYXRlIHtcbiAgICByZXR1cm4gdGhpcy4jZGF0ZS51dGModHJ1ZSkuZm9ybWF0KCdZWVlZLU1NLUREVEhIOm1tOnNzW1pdJylcbiAgfVxuXG4gIHB1YmxpYyBnZXQodW5pdDogVGltZVVuaXQpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLiNkYXRlLmdldCh1bml0KVxuICB9XG5cbiAgcHVibGljIGdldEFzT2JqZWN0KHVuaXQ6IFRpbWVVbml0W10pOiB7XG4gICAgW0sgaW4gKHR5cGVvZiB1bml0KVtudW1iZXJdXTogbnVtYmVyXG4gIH0ge1xuICAgIHJldHVybiB1bml0LnJlZHVjZShcbiAgICAgIChhY2MsIGl0ZW0pID0+IHtcbiAgICAgICAgYWNjW2l0ZW1dID0gdGhpcy5nZXQoaXRlbSlcblxuICAgICAgICByZXR1cm4gYWNjXG4gICAgICB9LFxuICAgICAge30gYXMge1xuICAgICAgICBbSyBpbiAodHlwZW9mIHVuaXQpW251bWJlcl1dOiBudW1iZXJcbiAgICAgIH0sXG4gICAgKVxuICB9XG5cbiAgcHVibGljIGFkZCh2YWx1ZTogbnVtYmVyLCB1bml0PzogVGltZU1hbmlwdWxhdGUpOiBUaW1lIHtcbiAgICB0aGlzLiNkYXRlID0gdGhpcy4jZGF0ZS5hZGQodmFsdWUsIHVuaXQpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHB1YmxpYyBmb3JtYXQoZm9ybWF0Pzogc3RyaW5nKTogSXNvRGF0ZSB7XG4gICAgcmV0dXJuIHRoaXMuI2RhdGUuZm9ybWF0KGZvcm1hdClcbiAgfVxuXG4gIHB1YmxpYyB0b0RhdGUoKTogRGF0ZSB7XG4gICAgcmV0dXJuIHRoaXMuI2RhdGUudG9EYXRlKClcbiAgfVxuXG4gIHB1YmxpYyB0b0NhbGVuZGFyKHJlZmVyZW5jZVRpbWU/OiBUaW1lRGF0ZSwgY2FsZW5kYXI/OiBUaW1lQ2FsZW5kYXIpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLiNkYXRlLmNhbGVuZGFyKHBhcnNlRGF0ZShyZWZlcmVuY2VUaW1lKSwgY2FsZW5kYXIpXG4gIH1cblxuICBwdWJsaWMgc3VidHJhY3QodmFsdWU6IG51bWJlciwgdW5pdD86IFRpbWVNYW5pcHVsYXRlKTogVGltZSB7XG4gICAgdGhpcy4jZGF0ZSA9IHRoaXMuI2RhdGUuc3VidHJhY3QodmFsdWUsIHVuaXQpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHB1YmxpYyBzdGFydE9mKHVuaXQ6IFRpbWVPcFVuaXQpOiBUaW1lIHtcbiAgICB0aGlzLiNkYXRlID0gdGhpcy4jZGF0ZS5zdGFydE9mKHVuaXQpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHB1YmxpYyBpc1NhbWUoY29tcGFyaXNvbkRhdGU/OiBUaW1lRGF0ZSwgdW5pdD86IFRpbWVPcFVuaXQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy4jZGF0ZS5pc1NhbWUocGFyc2VEYXRlKGNvbXBhcmlzb25EYXRlKSwgdW5pdClcbiAgfVxuXG4gIHB1YmxpYyBpc0JlZm9yZShjb21wYXJpc29uRGF0ZT86IFRpbWVEYXRlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuI2RhdGUuaXNCZWZvcmUocGFyc2VEYXRlKGNvbXBhcmlzb25EYXRlKSlcbiAgfVxuXG4gIHB1YmxpYyBpc0FmdGVyKGNvbXBhcmlzb25EYXRlPzogVGltZURhdGUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy4jZGF0ZS5pc0FmdGVyKHBhcnNlRGF0ZShjb21wYXJpc29uRGF0ZSkpXG4gIH1cblxuICBwdWJsaWMgaXNTYW1lT3JBZnRlcihjb21wYXJpc29uRGF0ZT86IFRpbWVEYXRlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuI2RhdGUuaXNTYW1lT3JBZnRlcihwYXJzZURhdGUoY29tcGFyaXNvbkRhdGUpKVxuICB9XG5cbiAgcHVibGljIGlzU2FtZU9yQmVmb3JlKGNvbXBhcmlzb25EYXRlPzogVGltZURhdGUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy4jZGF0ZS5pc1NhbWVPckJlZm9yZShwYXJzZURhdGUoY29tcGFyaXNvbkRhdGUpKVxuICB9XG5cbiAgcHVibGljIGlzQmV0d2VlbihcbiAgICBzdGFydERhdGU/OiBUaW1lRGF0ZSxcbiAgICBlbmREYXRlPzogVGltZURhdGUsXG4gICAgdW5pdD86IFRpbWVNYW5pcHVsYXRlLFxuICAgIGluY2x1c2l2aXR5PzogSW5jbHVzaXZpdHksXG4gICk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLiNkYXRlLmlzQmV0d2VlbihcbiAgICAgIHBhcnNlRGF0ZShzdGFydERhdGUpLFxuICAgICAgcGFyc2VEYXRlKGVuZERhdGUpLFxuICAgICAgdW5pdCxcbiAgICAgIGluY2x1c2l2aXR5LFxuICAgIClcbiAgfVxuXG4gIHB1YmxpYyBkaWZmKFxuICAgIGNvbXBhcmlzb25EYXRlOiBUaW1lLFxuICAgIHVuaXQ/OiBUaW1lVW5pdCxcbiAgICBpc1RydW5jYXRlZCA9IGZhbHNlLFxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLiNkYXRlLmRpZmYoY29tcGFyaXNvbkRhdGUuZGF5anMsIHVuaXQsIGlzVHJ1bmNhdGVkKVxuICB9XG5cbiAgcHVibGljIGdldEZyb20oZGF0ZTogVGltZURhdGUpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLiNkYXRlLmZyb20ocGFyc2VEYXRlKGRhdGUpKVxuICB9XG5cbiAgcHVibGljIGdldCBmcm9tTm93KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuI2RhdGUuZnJvbU5vdygpXG4gIH1cblxuICBwdWJsaWMgZ2V0VG8oZGF0ZTogVGltZURhdGUpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLiNkYXRlLnRvKHBhcnNlRGF0ZShkYXRlKSlcbiAgfVxuXG4gIHB1YmxpYyBnZXQgdG9Ob3coKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy4jZGF0ZS50b05vdygpXG4gIH1cbn1cblxuY29uc3QgcGFyc2VEYXRlID0gKGRhdGU6IFRpbWVEYXRlKTogRXhjbHVkZTxUaW1lRGF0ZSwgVGltZT4gPT4ge1xuICBpZiAodHlwZW9mIGRhdGUgPT09ICdudW1iZXInKSByZXR1cm4gZGF0ZSAqIDEwMDBcblxuICByZXR1cm4gZGF0ZSBpbnN0YW5jZW9mIFRpbWUgPyBkYXRlLmRheWpzIDogZGF0ZVxufVxuXG5leHBvcnQgY29uc3QgdGltZSA9IChkYXRlPzogVGltZURhdGUsIGZvcm1hdD86IFRpbWVGb3JtYXQpOiBUaW1lID0+IHtcbiAgcmV0dXJuIG5ldyBUaW1lKGRhdGUsIGZvcm1hdClcbn1cbiJdLCJuYW1lcyI6WyJkYXlqcyIsImNhbGVuZGFyIiwiY3VzdG9tUGFyc2VGb3JtYXQiLCJkdXJhdGlvbiIsImlzQmV0d2VlbiIsImlzU2FtZU9yQWZ0ZXIiLCJpc1NhbWVPckJlZm9yZSIsInJlbGF0aXZlVGltZSIsInRpbWV6b25lIiwidXBkYXRlTG9jYWxlIiwidXRjIiwiZXh0ZW5kIiwiVGltZSIsImxvY2FsZSIsInByZXNldCIsIm9iamVjdCIsImlzTG9jYWwiLCJzZXREZWZhdWx0VGltZXpvbmUiLCJ0eiIsInNldERlZmF1bHQiLCJzZXRMb2NhbGUiLCJsb2NhbGVOYW1lIiwiY3VzdG9tQ29uZmlnIiwiX2RheWpzIiwiZGF0ZSIsImZvcm1hdCIsInBhcnNlRGF0ZSIsIl90eiIsImtlZXBMb2NhbFRpbWUiLCJpc1ZhbGlkIiwiY2xvbmUiLCJ0aW1lc3RhbXAiLCJ1bml4IiwibXMiLCJ2YWx1ZU9mIiwiSVNPIiwidG9JU09TdHJpbmciLCJSRkMzMzM5IiwiZ2V0IiwidW5pdCIsImdldEFzT2JqZWN0IiwicmVkdWNlIiwiYWNjIiwiaXRlbSIsImFkZCIsInZhbHVlIiwidG9EYXRlIiwidG9DYWxlbmRhciIsInJlZmVyZW5jZVRpbWUiLCJzdWJ0cmFjdCIsInN0YXJ0T2YiLCJpc1NhbWUiLCJjb21wYXJpc29uRGF0ZSIsImlzQmVmb3JlIiwiaXNBZnRlciIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJpbmNsdXNpdml0eSIsImRpZmYiLCJpc1RydW5jYXRlZCIsImdldEZyb20iLCJmcm9tIiwiZnJvbU5vdyIsImdldFRvIiwidG8iLCJ0b05vdyIsImNvbnN0cnVjdG9yIiwidGltZSJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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