import { BN } from "./bn";
import { toDecimals } from "./decimals";
import { BN_ROUNDING } from "../enums";
export const round = (bn, decimals, mode)=>{
    const precisioned = toDecimals(bn.raw, BN.precision, decimals + 1).toString();
    const isNegative = bn.isNegative;
    const num = BigInt(precisioned.slice(0, -1));
    const remainder = BigInt(precisioned.slice(-1));
    const sign = isNegative ? -1n : 1n;
    const absNum = sign * num;
    switch(mode){
        case BN_ROUNDING.UP:
            return roundUp(sign, absNum, remainder);
        case BN_ROUNDING.DOWN:
            return roundDown(sign, absNum);
        case BN_ROUNDING.CEIL:
            if (isNegative) return roundDown(sign, absNum);
            return roundUp(sign, absNum, remainder);
        case BN_ROUNDING.FLOOR:
            if (isNegative) return roundUp(sign, absNum, remainder);
            return roundDown(sign, absNum);
        case BN_ROUNDING.HALF_UP:
            return roundHalfUp(sign, absNum, remainder);
        case BN_ROUNDING.HALF_DOWN:
            return roundHalfDown(sign, absNum, remainder);
        case BN_ROUNDING.HALF_CEIL:
            if (isNegative) return roundHalfDown(sign, absNum, remainder);
            return roundHalfUp(sign, absNum, remainder);
        case BN_ROUNDING.HALF_FLOOR:
            if (isNegative) return roundHalfUp(sign, absNum, remainder);
            return roundHalfDown(sign, absNum, remainder);
        default:
            throw new Error('Invalid rounding mode');
    }
};
const roundUp = (sign, absNum, remainder)=>{
    return sign * (remainder > 0n ? absNum + 1n : absNum);
};
const roundDown = (sign, absNum)=>{
    return sign * absNum;
};
const roundHalfUp = (sign, absNum, remainder)=>{
    return sign * (remainder >= 5n ? absNum + 1n : absNum);
};
const roundHalfDown = (sign, absNum, remainder)=>{
    return sign * (remainder > 5n ? absNum + 1n : absNum);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ibi9yb3VuZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCTiB9IGZyb20gJ0AvYm4vYm4nXG5pbXBvcnQgeyB0b0RlY2ltYWxzIH0gZnJvbSAnQC9ibi9kZWNpbWFscydcbmltcG9ydCB7IEJOX1JPVU5ESU5HIH0gZnJvbSAnQC9lbnVtcydcblxuZXhwb3J0IGNvbnN0IHJvdW5kID0gKGJuOiBCTiwgZGVjaW1hbHM6IG51bWJlciwgbW9kZTogQk5fUk9VTkRJTkcpID0+IHtcbiAgY29uc3QgcHJlY2lzaW9uZWQgPSB0b0RlY2ltYWxzKGJuLnJhdywgQk4ucHJlY2lzaW9uLCBkZWNpbWFscyArIDEpLnRvU3RyaW5nKClcblxuICBjb25zdCBpc05lZ2F0aXZlID0gYm4uaXNOZWdhdGl2ZVxuICBjb25zdCBudW0gPSBCaWdJbnQocHJlY2lzaW9uZWQuc2xpY2UoMCwgLTEpKVxuICBjb25zdCByZW1haW5kZXIgPSBCaWdJbnQocHJlY2lzaW9uZWQuc2xpY2UoLTEpKVxuICBjb25zdCBzaWduID0gaXNOZWdhdGl2ZSA/IC0xbiA6IDFuXG4gIGNvbnN0IGFic051bSA9IHNpZ24gKiBudW1cblxuICBzd2l0Y2ggKG1vZGUpIHtcbiAgICBjYXNlIEJOX1JPVU5ESU5HLlVQOlxuICAgICAgcmV0dXJuIHJvdW5kVXAoc2lnbiwgYWJzTnVtLCByZW1haW5kZXIpXG4gICAgY2FzZSBCTl9ST1VORElORy5ET1dOOlxuICAgICAgcmV0dXJuIHJvdW5kRG93bihzaWduLCBhYnNOdW0pXG4gICAgY2FzZSBCTl9ST1VORElORy5DRUlMOlxuICAgICAgaWYgKGlzTmVnYXRpdmUpIHJldHVybiByb3VuZERvd24oc2lnbiwgYWJzTnVtKVxuICAgICAgcmV0dXJuIHJvdW5kVXAoc2lnbiwgYWJzTnVtLCByZW1haW5kZXIpXG4gICAgY2FzZSBCTl9ST1VORElORy5GTE9PUjpcbiAgICAgIGlmIChpc05lZ2F0aXZlKSByZXR1cm4gcm91bmRVcChzaWduLCBhYnNOdW0sIHJlbWFpbmRlcilcbiAgICAgIHJldHVybiByb3VuZERvd24oc2lnbiwgYWJzTnVtKVxuICAgIGNhc2UgQk5fUk9VTkRJTkcuSEFMRl9VUDpcbiAgICAgIHJldHVybiByb3VuZEhhbGZVcChzaWduLCBhYnNOdW0sIHJlbWFpbmRlcilcbiAgICBjYXNlIEJOX1JPVU5ESU5HLkhBTEZfRE9XTjpcbiAgICAgIHJldHVybiByb3VuZEhhbGZEb3duKHNpZ24sIGFic051bSwgcmVtYWluZGVyKVxuICAgIGNhc2UgQk5fUk9VTkRJTkcuSEFMRl9DRUlMOlxuICAgICAgaWYgKGlzTmVnYXRpdmUpIHJldHVybiByb3VuZEhhbGZEb3duKHNpZ24sIGFic051bSwgcmVtYWluZGVyKVxuICAgICAgcmV0dXJuIHJvdW5kSGFsZlVwKHNpZ24sIGFic051bSwgcmVtYWluZGVyKVxuICAgIGNhc2UgQk5fUk9VTkRJTkcuSEFMRl9GTE9PUjpcbiAgICAgIGlmIChpc05lZ2F0aXZlKSByZXR1cm4gcm91bmRIYWxmVXAoc2lnbiwgYWJzTnVtLCByZW1haW5kZXIpXG4gICAgICByZXR1cm4gcm91bmRIYWxmRG93bihzaWduLCBhYnNOdW0sIHJlbWFpbmRlcilcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJvdW5kaW5nIG1vZGUnKVxuICB9XG59XG5cbmNvbnN0IHJvdW5kVXAgPSAoc2lnbjogYmlnaW50LCBhYnNOdW06IGJpZ2ludCwgcmVtYWluZGVyOiBiaWdpbnQpID0+IHtcbiAgcmV0dXJuIHNpZ24gKiAocmVtYWluZGVyID4gMG4gPyBhYnNOdW0gKyAxbiA6IGFic051bSlcbn1cblxuY29uc3Qgcm91bmREb3duID0gKHNpZ246IGJpZ2ludCwgYWJzTnVtOiBiaWdpbnQpID0+IHtcbiAgcmV0dXJuIHNpZ24gKiBhYnNOdW1cbn1cblxuY29uc3Qgcm91bmRIYWxmVXAgPSAoc2lnbjogYmlnaW50LCBhYnNOdW06IGJpZ2ludCwgcmVtYWluZGVyOiBiaWdpbnQpID0+IHtcbiAgcmV0dXJuIHNpZ24gKiAocmVtYWluZGVyID49IDVuID8gYWJzTnVtICsgMW4gOiBhYnNOdW0pXG59XG5cbmNvbnN0IHJvdW5kSGFsZkRvd24gPSAoc2lnbjogYmlnaW50LCBhYnNOdW06IGJpZ2ludCwgcmVtYWluZGVyOiBiaWdpbnQpID0+IHtcbiAgcmV0dXJuIHNpZ24gKiAocmVtYWluZGVyID4gNW4gPyBhYnNOdW0gKyAxbiA6IGFic051bSlcbn1cbiJdLCJuYW1lcyI6WyJCTiIsInRvRGVjaW1hbHMiLCJCTl9ST1VORElORyIsInJvdW5kIiwiYm4iLCJkZWNpbWFscyIsIm1vZGUiLCJwcmVjaXNpb25lZCIsInJhdyIsInByZWNpc2lvbiIsInRvU3RyaW5nIiwiaXNOZWdhdGl2ZSIsIm51bSIsIkJpZ0ludCIsInNsaWNlIiwicmVtYWluZGVyIiwic2lnbiIsImFic051bSIsIlVQIiwicm91bmRVcCIsIkRPV04iLCJyb3VuZERvd24iLCJDRUlMIiwiRkxPT1IiLCJIQUxGX1VQIiwicm91bmRIYWxmVXAiLCJIQUxGX0RPV04iLCJyb3VuZEhhbGZEb3duIiwiSEFMRl9DRUlMIiwiSEFMRl9GTE9PUiIsIkVycm9yIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLEVBQUUsUUFBUSxPQUFTO0FBQzVCLFNBQVNDLFVBQVUsUUFBUSxhQUFlO0FBQzFDLFNBQVNDLFdBQVcsUUFBUSxXQUFTO0FBRXJDLE9BQU8sTUFBTUMsUUFBUSxDQUFDQyxJQUFRQyxVQUFrQkM7SUFDOUMsTUFBTUMsY0FBY04sV0FBV0csR0FBR0ksR0FBRyxFQUFFUixHQUFHUyxTQUFTLEVBQUVKLFdBQVcsR0FBR0ssUUFBUTtJQUUzRSxNQUFNQyxhQUFhUCxHQUFHTyxVQUFVO0lBQ2hDLE1BQU1DLE1BQU1DLE9BQU9OLFlBQVlPLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDekMsTUFBTUMsWUFBWUYsT0FBT04sWUFBWU8sS0FBSyxDQUFDLENBQUM7SUFDNUMsTUFBTUUsT0FBT0wsYUFBYSxDQUFDLEVBQUUsR0FBRyxFQUFFO0lBQ2xDLE1BQU1NLFNBQVNELE9BQU9KO0lBRXRCLE9BQVFOO1FBQ04sS0FBS0osWUFBWWdCLEVBQUU7WUFDakIsT0FBT0MsUUFBUUgsTUFBTUMsUUFBUUY7UUFDL0IsS0FBS2IsWUFBWWtCLElBQUk7WUFDbkIsT0FBT0MsVUFBVUwsTUFBTUM7UUFDekIsS0FBS2YsWUFBWW9CLElBQUk7WUFDbkIsSUFBSVgsWUFBWSxPQUFPVSxVQUFVTCxNQUFNQztZQUN2QyxPQUFPRSxRQUFRSCxNQUFNQyxRQUFRRjtRQUMvQixLQUFLYixZQUFZcUIsS0FBSztZQUNwQixJQUFJWixZQUFZLE9BQU9RLFFBQVFILE1BQU1DLFFBQVFGO1lBQzdDLE9BQU9NLFVBQVVMLE1BQU1DO1FBQ3pCLEtBQUtmLFlBQVlzQixPQUFPO1lBQ3RCLE9BQU9DLFlBQVlULE1BQU1DLFFBQVFGO1FBQ25DLEtBQUtiLFlBQVl3QixTQUFTO1lBQ3hCLE9BQU9DLGNBQWNYLE1BQU1DLFFBQVFGO1FBQ3JDLEtBQUtiLFlBQVkwQixTQUFTO1lBQ3hCLElBQUlqQixZQUFZLE9BQU9nQixjQUFjWCxNQUFNQyxRQUFRRjtZQUNuRCxPQUFPVSxZQUFZVCxNQUFNQyxRQUFRRjtRQUNuQyxLQUFLYixZQUFZMkIsVUFBVTtZQUN6QixJQUFJbEIsWUFBWSxPQUFPYyxZQUFZVCxNQUFNQyxRQUFRRjtZQUNqRCxPQUFPWSxjQUFjWCxNQUFNQyxRQUFRRjtRQUNyQztZQUNFLE1BQU0sSUFBSWUsTUFBTTtJQUNwQjtBQUNGLEVBQUM7QUFFRCxNQUFNWCxVQUFVLENBQUNILE1BQWNDLFFBQWdCRjtJQUM3QyxPQUFPQyxPQUFRRCxDQUFBQSxZQUFZLEVBQUUsR0FBR0UsU0FBUyxFQUFFLEdBQUdBLE1BQUs7QUFDckQ7QUFFQSxNQUFNSSxZQUFZLENBQUNMLE1BQWNDO0lBQy9CLE9BQU9ELE9BQU9DO0FBQ2hCO0FBRUEsTUFBTVEsY0FBYyxDQUFDVCxNQUFjQyxRQUFnQkY7SUFDakQsT0FBT0MsT0FBUUQsQ0FBQUEsYUFBYSxFQUFFLEdBQUdFLFNBQVMsRUFBRSxHQUFHQSxNQUFLO0FBQ3REO0FBRUEsTUFBTVUsZ0JBQWdCLENBQUNYLE1BQWNDLFFBQWdCRjtJQUNuRCxPQUFPQyxPQUFRRCxDQUFBQSxZQUFZLEVBQUUsR0FBR0UsU0FBUyxFQUFFLEdBQUdBLE1BQUs7QUFDckQifQ==