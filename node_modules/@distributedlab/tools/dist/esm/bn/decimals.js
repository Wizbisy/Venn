import { BN_ASSERT_DECIMALS_OP } from "../enums";
import { assertDecimals } from "./assertions";
export const toDecimals = (val, currentDecimals, targetDecimals)=>{
    return targetDecimals > currentDecimals ? toGreaterDecimals(val, currentDecimals, targetDecimals) : toLessDecimals(val, currentDecimals, targetDecimals);
};
export const toGreaterDecimals = (val, currentDecimals, targetDecimals)=>{
    assertDecimals(currentDecimals, targetDecimals, BN_ASSERT_DECIMALS_OP.GREATER);
    return val * 10n ** BigInt(targetDecimals - currentDecimals);
};
export const toLessDecimals = (val, currentDecimals, targetDecimals)=>{
    assertDecimals(currentDecimals, targetDecimals, BN_ASSERT_DECIMALS_OP.LESS);
    return val / 10n ** BigInt(currentDecimals - targetDecimals);
};
export const getTens = (precision)=>{
    return 10n ** BigInt(precision);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ibi9kZWNpbWFscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCTl9BU1NFUlRfREVDSU1BTFNfT1AgfSBmcm9tICdAL2VudW1zJ1xuXG5pbXBvcnQgeyBhc3NlcnREZWNpbWFscyB9IGZyb20gJy4vYXNzZXJ0aW9ucydcblxuZXhwb3J0IGNvbnN0IHRvRGVjaW1hbHMgPSAoXG4gIHZhbDogYmlnaW50LFxuICBjdXJyZW50RGVjaW1hbHM6IG51bWJlcixcbiAgdGFyZ2V0RGVjaW1hbHM6IG51bWJlcixcbik6IGJpZ2ludCA9PiB7XG4gIHJldHVybiB0YXJnZXREZWNpbWFscyA+IGN1cnJlbnREZWNpbWFsc1xuICAgID8gdG9HcmVhdGVyRGVjaW1hbHModmFsLCBjdXJyZW50RGVjaW1hbHMsIHRhcmdldERlY2ltYWxzKVxuICAgIDogdG9MZXNzRGVjaW1hbHModmFsLCBjdXJyZW50RGVjaW1hbHMsIHRhcmdldERlY2ltYWxzKVxufVxuXG5leHBvcnQgY29uc3QgdG9HcmVhdGVyRGVjaW1hbHMgPSAoXG4gIHZhbDogYmlnaW50LFxuICBjdXJyZW50RGVjaW1hbHM6IG51bWJlcixcbiAgdGFyZ2V0RGVjaW1hbHM6IG51bWJlcixcbik6IGJpZ2ludCA9PiB7XG4gIGFzc2VydERlY2ltYWxzKGN1cnJlbnREZWNpbWFscywgdGFyZ2V0RGVjaW1hbHMsIEJOX0FTU0VSVF9ERUNJTUFMU19PUC5HUkVBVEVSKVxuICByZXR1cm4gdmFsICogMTBuICoqIEJpZ0ludCh0YXJnZXREZWNpbWFscyAtIGN1cnJlbnREZWNpbWFscylcbn1cblxuZXhwb3J0IGNvbnN0IHRvTGVzc0RlY2ltYWxzID0gKFxuICB2YWw6IGJpZ2ludCxcbiAgY3VycmVudERlY2ltYWxzOiBudW1iZXIsXG4gIHRhcmdldERlY2ltYWxzOiBudW1iZXIsXG4pOiBiaWdpbnQgPT4ge1xuICBhc3NlcnREZWNpbWFscyhjdXJyZW50RGVjaW1hbHMsIHRhcmdldERlY2ltYWxzLCBCTl9BU1NFUlRfREVDSU1BTFNfT1AuTEVTUylcbiAgcmV0dXJuIHZhbCAvIDEwbiAqKiBCaWdJbnQoY3VycmVudERlY2ltYWxzIC0gdGFyZ2V0RGVjaW1hbHMpXG59XG5cbmV4cG9ydCBjb25zdCBnZXRUZW5zID0gKHByZWNpc2lvbjogbnVtYmVyKTogYmlnaW50ID0+IHtcbiAgcmV0dXJuIDEwbiAqKiBCaWdJbnQocHJlY2lzaW9uKVxufVxuIl0sIm5hbWVzIjpbIkJOX0FTU0VSVF9ERUNJTUFMU19PUCIsImFzc2VydERlY2ltYWxzIiwidG9EZWNpbWFscyIsInZhbCIsImN1cnJlbnREZWNpbWFscyIsInRhcmdldERlY2ltYWxzIiwidG9HcmVhdGVyRGVjaW1hbHMiLCJ0b0xlc3NEZWNpbWFscyIsIkdSRUFURVIiLCJCaWdJbnQiLCJMRVNTIiwiZ2V0VGVucyIsInByZWNpc2lvbiJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLHFCQUFxQixRQUFRLFdBQVM7QUFFL0MsU0FBU0MsY0FBYyxRQUFRLGVBQWM7QUFFN0MsT0FBTyxNQUFNQyxhQUFhLENBQ3hCQyxLQUNBQyxpQkFDQUM7SUFFQSxPQUFPQSxpQkFBaUJELGtCQUNwQkUsa0JBQWtCSCxLQUFLQyxpQkFBaUJDLGtCQUN4Q0UsZUFBZUosS0FBS0MsaUJBQWlCQztBQUMzQyxFQUFDO0FBRUQsT0FBTyxNQUFNQyxvQkFBb0IsQ0FDL0JILEtBQ0FDLGlCQUNBQztJQUVBSixlQUFlRyxpQkFBaUJDLGdCQUFnQkwsc0JBQXNCUSxPQUFPO0lBQzdFLE9BQU9MLE1BQU0sR0FBRyxJQUFJTSxPQUFPSixpQkFBaUJEO0FBQzlDLEVBQUM7QUFFRCxPQUFPLE1BQU1HLGlCQUFpQixDQUM1QkosS0FDQUMsaUJBQ0FDO0lBRUFKLGVBQWVHLGlCQUFpQkMsZ0JBQWdCTCxzQkFBc0JVLElBQUk7SUFDMUUsT0FBT1AsTUFBTSxHQUFHLElBQUlNLE9BQU9MLGtCQUFrQkM7QUFDL0MsRUFBQztBQUVELE9BQU8sTUFBTU0sVUFBVSxDQUFDQztJQUN0QixPQUFPLEdBQUcsSUFBSUgsT0FBT0c7QUFDdkIsRUFBQyJ9