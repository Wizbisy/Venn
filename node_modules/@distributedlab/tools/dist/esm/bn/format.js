import { assert, reverseString } from "../helpers";
export const format = (value, format)=>{
    /* eslint-disable prefer-const */ let { prefix = '', decimalSeparator = '.', groupSeparator = ',', groupSize = 3, fractionGroupSeparator = ' ', fractionGroupSize = 0, suffix = '', decimals } = format;
    /* eslint-enable prefer-const */ const expression = Number.isInteger(groupSize) && Number.isInteger(fractionGroupSize);
    assert(expression, 'groupSize and fractionGroupSize must be an integer');
    let [whole, fraction] = value.split('.');
    const sign = whole.startsWith('-') ? '-' : '';
    if (sign) whole = whole.slice(1);
    if (groupSize && groupSeparator) {
        whole = reverseString(insertCharEveryN(reverseString(whole), groupSeparator, groupSize));
    }
    if (decimals) {
        fraction = fraction.padEnd(decimals, '0').slice(0, decimals);
    } else {
        fraction = '';
        decimalSeparator = '';
    }
    if (fractionGroupSeparator && fractionGroupSize) {
        fraction = reverseString(insertCharEveryN(reverseString(fraction), fractionGroupSeparator, fractionGroupSize));
    }
    return [
        prefix,
        sign,
        whole,
        decimalSeparator,
        fraction,
        suffix
    ].join('');
};
const insertCharEveryN = (value, char, n)=>{
    const val = value.endsWith(char) ? value.slice(0, -1) : value;
    const result = val.replace(new RegExp(`(.{${n}})`, 'g'), `$1${char}`);
    return result.endsWith(char) ? result.slice(0, -1) : result;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ibi9mb3JtYXQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0LCByZXZlcnNlU3RyaW5nIH0gZnJvbSAnQC9oZWxwZXJzJ1xuaW1wb3J0IHR5cGUgeyBCbkZvcm1hdENvbmZpZyB9IGZyb20gJ0AvdHlwZXMnXG5cbmV4cG9ydCBjb25zdCBmb3JtYXQgPSAodmFsdWU6IHN0cmluZywgZm9ybWF0OiBCbkZvcm1hdENvbmZpZykgPT4ge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItY29uc3QgKi9cbiAgbGV0IHtcbiAgICBwcmVmaXggPSAnJyxcbiAgICBkZWNpbWFsU2VwYXJhdG9yID0gJy4nLFxuICAgIGdyb3VwU2VwYXJhdG9yID0gJywnLFxuICAgIGdyb3VwU2l6ZSA9IDMsXG4gICAgZnJhY3Rpb25Hcm91cFNlcGFyYXRvciA9ICcgJyxcbiAgICBmcmFjdGlvbkdyb3VwU2l6ZSA9IDAsXG4gICAgc3VmZml4ID0gJycsXG4gICAgZGVjaW1hbHMsXG4gIH0gPSBmb3JtYXRcbiAgLyogZXNsaW50LWVuYWJsZSBwcmVmZXItY29uc3QgKi9cblxuICBjb25zdCBleHByZXNzaW9uID1cbiAgICBOdW1iZXIuaXNJbnRlZ2VyKGdyb3VwU2l6ZSkgJiYgTnVtYmVyLmlzSW50ZWdlcihmcmFjdGlvbkdyb3VwU2l6ZSlcblxuICBhc3NlcnQoZXhwcmVzc2lvbiwgJ2dyb3VwU2l6ZSBhbmQgZnJhY3Rpb25Hcm91cFNpemUgbXVzdCBiZSBhbiBpbnRlZ2VyJylcblxuICBsZXQgW3dob2xlLCBmcmFjdGlvbl0gPSB2YWx1ZS5zcGxpdCgnLicpXG5cbiAgY29uc3Qgc2lnbiA9IHdob2xlLnN0YXJ0c1dpdGgoJy0nKSA/ICctJyA6ICcnXG5cbiAgaWYgKHNpZ24pIHdob2xlID0gd2hvbGUuc2xpY2UoMSlcblxuICBpZiAoZ3JvdXBTaXplICYmIGdyb3VwU2VwYXJhdG9yKSB7XG4gICAgd2hvbGUgPSByZXZlcnNlU3RyaW5nKFxuICAgICAgaW5zZXJ0Q2hhckV2ZXJ5TihyZXZlcnNlU3RyaW5nKHdob2xlKSwgZ3JvdXBTZXBhcmF0b3IsIGdyb3VwU2l6ZSksXG4gICAgKVxuICB9XG5cbiAgaWYgKGRlY2ltYWxzKSB7XG4gICAgZnJhY3Rpb24gPSBmcmFjdGlvbi5wYWRFbmQoZGVjaW1hbHMsICcwJykuc2xpY2UoMCwgZGVjaW1hbHMpXG4gIH0gZWxzZSB7XG4gICAgZnJhY3Rpb24gPSAnJ1xuICAgIGRlY2ltYWxTZXBhcmF0b3IgPSAnJ1xuICB9XG5cbiAgaWYgKGZyYWN0aW9uR3JvdXBTZXBhcmF0b3IgJiYgZnJhY3Rpb25Hcm91cFNpemUpIHtcbiAgICBmcmFjdGlvbiA9IHJldmVyc2VTdHJpbmcoXG4gICAgICBpbnNlcnRDaGFyRXZlcnlOKFxuICAgICAgICByZXZlcnNlU3RyaW5nKGZyYWN0aW9uKSxcbiAgICAgICAgZnJhY3Rpb25Hcm91cFNlcGFyYXRvcixcbiAgICAgICAgZnJhY3Rpb25Hcm91cFNpemUsXG4gICAgICApLFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBbcHJlZml4LCBzaWduLCB3aG9sZSwgZGVjaW1hbFNlcGFyYXRvciwgZnJhY3Rpb24sIHN1ZmZpeF0uam9pbignJylcbn1cblxuY29uc3QgaW5zZXJ0Q2hhckV2ZXJ5TiA9ICh2YWx1ZTogc3RyaW5nLCBjaGFyOiBzdHJpbmcsIG46IG51bWJlcikgPT4ge1xuICBjb25zdCB2YWwgPSB2YWx1ZS5lbmRzV2l0aChjaGFyKSA/IHZhbHVlLnNsaWNlKDAsIC0xKSA6IHZhbHVlXG4gIGNvbnN0IHJlc3VsdCA9IHZhbC5yZXBsYWNlKG5ldyBSZWdFeHAoYCgueyR7bn19KWAsICdnJyksIGAkMSR7Y2hhcn1gKVxuICByZXR1cm4gcmVzdWx0LmVuZHNXaXRoKGNoYXIpID8gcmVzdWx0LnNsaWNlKDAsIC0xKSA6IHJlc3VsdFxufVxuIl0sIm5hbWVzIjpbImFzc2VydCIsInJldmVyc2VTdHJpbmciLCJmb3JtYXQiLCJ2YWx1ZSIsInByZWZpeCIsImRlY2ltYWxTZXBhcmF0b3IiLCJncm91cFNlcGFyYXRvciIsImdyb3VwU2l6ZSIsImZyYWN0aW9uR3JvdXBTZXBhcmF0b3IiLCJmcmFjdGlvbkdyb3VwU2l6ZSIsInN1ZmZpeCIsImRlY2ltYWxzIiwiZXhwcmVzc2lvbiIsIk51bWJlciIsImlzSW50ZWdlciIsIndob2xlIiwiZnJhY3Rpb24iLCJzcGxpdCIsInNpZ24iLCJzdGFydHNXaXRoIiwic2xpY2UiLCJpbnNlcnRDaGFyRXZlcnlOIiwicGFkRW5kIiwiam9pbiIsImNoYXIiLCJuIiwidmFsIiwiZW5kc1dpdGgiLCJyZXN1bHQiLCJyZXBsYWNlIiwiUmVnRXhwIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsTUFBTSxFQUFFQyxhQUFhLFFBQVEsYUFBVztBQUdqRCxPQUFPLE1BQU1DLFNBQVMsQ0FBQ0MsT0FBZUQ7SUFDcEMsK0JBQStCLEdBQy9CLElBQUksRUFDRkUsU0FBUyxFQUFFLEVBQ1hDLG1CQUFtQixHQUFHLEVBQ3RCQyxpQkFBaUIsR0FBRyxFQUNwQkMsWUFBWSxDQUFDLEVBQ2JDLHlCQUF5QixHQUFHLEVBQzVCQyxvQkFBb0IsQ0FBQyxFQUNyQkMsU0FBUyxFQUFFLEVBQ1hDLFFBQVEsRUFDVCxHQUFHVDtJQUNKLDhCQUE4QixHQUU5QixNQUFNVSxhQUNKQyxPQUFPQyxTQUFTLENBQUNQLGNBQWNNLE9BQU9DLFNBQVMsQ0FBQ0w7SUFFbERULE9BQU9ZLFlBQVk7SUFFbkIsSUFBSSxDQUFDRyxPQUFPQyxTQUFTLEdBQUdiLE1BQU1jLEtBQUssQ0FBQztJQUVwQyxNQUFNQyxPQUFPSCxNQUFNSSxVQUFVLENBQUMsT0FBTyxNQUFNO0lBRTNDLElBQUlELE1BQU1ILFFBQVFBLE1BQU1LLEtBQUssQ0FBQztJQUU5QixJQUFJYixhQUFhRCxnQkFBZ0I7UUFDL0JTLFFBQVFkLGNBQ05vQixpQkFBaUJwQixjQUFjYyxRQUFRVCxnQkFBZ0JDO0lBRTNEO0lBRUEsSUFBSUksVUFBVTtRQUNaSyxXQUFXQSxTQUFTTSxNQUFNLENBQUNYLFVBQVUsS0FBS1MsS0FBSyxDQUFDLEdBQUdUO0lBQ3JELE9BQU87UUFDTEssV0FBVztRQUNYWCxtQkFBbUI7SUFDckI7SUFFQSxJQUFJRywwQkFBMEJDLG1CQUFtQjtRQUMvQ08sV0FBV2YsY0FDVG9CLGlCQUNFcEIsY0FBY2UsV0FDZFIsd0JBQ0FDO0lBR047SUFFQSxPQUFPO1FBQUNMO1FBQVFjO1FBQU1IO1FBQU9WO1FBQWtCVztRQUFVTjtLQUFPLENBQUNhLElBQUksQ0FBQztBQUN4RSxFQUFDO0FBRUQsTUFBTUYsbUJBQW1CLENBQUNsQixPQUFlcUIsTUFBY0M7SUFDckQsTUFBTUMsTUFBTXZCLE1BQU13QixRQUFRLENBQUNILFFBQVFyQixNQUFNaUIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLakI7SUFDeEQsTUFBTXlCLFNBQVNGLElBQUlHLE9BQU8sQ0FBQyxJQUFJQyxPQUFPLENBQUMsR0FBRyxFQUFFTCxFQUFFLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUVELEtBQUssQ0FBQztJQUNwRSxPQUFPSSxPQUFPRCxRQUFRLENBQUNILFFBQVFJLE9BQU9SLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBS1E7QUFDdkQifQ==