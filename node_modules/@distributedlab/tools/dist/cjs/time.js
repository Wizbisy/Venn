"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Time: function() {
        return Time;
    },
    time: function() {
        return time;
    }
});
const _dayjs = _interop_require_default(require("dayjs"));
const _calendar = _interop_require_default(require("dayjs/plugin/calendar"));
const _customParseFormat = _interop_require_default(require("dayjs/plugin/customParseFormat"));
const _duration = _interop_require_default(require("dayjs/plugin/duration"));
const _isBetween = _interop_require_default(require("dayjs/plugin/isBetween"));
const _isSameOrAfter = _interop_require_default(require("dayjs/plugin/isSameOrAfter"));
const _isSameOrBefore = _interop_require_default(require("dayjs/plugin/isSameOrBefore"));
const _relativeTime = _interop_require_default(require("dayjs/plugin/relativeTime"));
const _timezone = _interop_require_default(require("dayjs/plugin/timezone"));
const _updateLocale = _interop_require_default(require("dayjs/plugin/updateLocale"));
const _utc = _interop_require_default(require("dayjs/plugin/utc"));
function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _class_apply_descriptor_get(receiver, descriptor) {
    if (descriptor.get) {
        return descriptor.get.call(receiver);
    }
    return descriptor.value;
}
function _class_apply_descriptor_set(receiver, descriptor, value) {
    if (descriptor.set) {
        descriptor.set.call(receiver, value);
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
    }
}
function _class_extract_field_descriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
}
function _class_private_field_get(receiver, privateMap) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "get");
    return _class_apply_descriptor_get(receiver, descriptor);
}
function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function _class_private_field_set(receiver, privateMap, value) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "set");
    _class_apply_descriptor_set(receiver, descriptor, value);
    return value;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
_dayjs.default.extend(_isSameOrAfter.default);
_dayjs.default.extend(_isSameOrBefore.default);
_dayjs.default.extend(_relativeTime.default);
_dayjs.default.extend(_isBetween.default);
_dayjs.default.extend(_calendar.default);
_dayjs.default.extend(_utc.default);
_dayjs.default.extend(_customParseFormat.default);
_dayjs.default.extend(_updateLocale.default);
_dayjs.default.extend(_timezone.default);
_dayjs.default.extend(_duration.default);
var _date = new WeakMap();
let Time = class Time {
    static locale(preset, object, isLocal) {
        return _dayjs.default.locale(preset, object, isLocal);
    }
    static setDefaultTimezone(timezone) {
        _dayjs.default.tz.setDefault(timezone);
    }
    static setLocale(localeName, customConfig) {
        return _dayjs.default.updateLocale(localeName, customConfig);
    }
    _dayjs(date, format) {
        return (0, _dayjs.default)(parseDate(date), format);
    }
    _tz(date, timezone) {
        return _dayjs.default.tz(parseDate(date), timezone);
    }
    get dayjs() {
        return _class_private_field_get(this, _date);
    }
    tz(timezone) {
        _class_private_field_set(this, _date, this._tz(_class_private_field_get(this, _date), timezone));
        return this;
    }
    utc(keepLocalTime) {
        _class_private_field_set(this, _date, _class_private_field_get(this, _date).utc(keepLocalTime));
        return this;
    }
    get isValid() {
        return _class_private_field_get(this, _date).isValid();
    }
    clone() {
        return new Time(_class_private_field_get(this, _date).clone());
    }
    get timestamp() {
        return _class_private_field_get(this, _date).unix();
    }
    get ms() {
        return _class_private_field_get(this, _date).valueOf();
    }
    get ISO() {
        return _class_private_field_get(this, _date).toISOString();
    }
    get RFC3339() {
        return _class_private_field_get(this, _date).utc(true).format('YYYY-MM-DDTHH:mm:ss[Z]');
    }
    get(unit) {
        return _class_private_field_get(this, _date).get(unit);
    }
    getAsObject(unit) {
        return unit.reduce((acc, item)=>{
            acc[item] = this.get(item);
            return acc;
        }, {});
    }
    add(value, unit) {
        _class_private_field_set(this, _date, _class_private_field_get(this, _date).add(value, unit));
        return this;
    }
    format(format) {
        return _class_private_field_get(this, _date).format(format);
    }
    toDate() {
        return _class_private_field_get(this, _date).toDate();
    }
    toCalendar(referenceTime, calendar) {
        return _class_private_field_get(this, _date).calendar(parseDate(referenceTime), calendar);
    }
    subtract(value, unit) {
        _class_private_field_set(this, _date, _class_private_field_get(this, _date).subtract(value, unit));
        return this;
    }
    startOf(unit) {
        _class_private_field_set(this, _date, _class_private_field_get(this, _date).startOf(unit));
        return this;
    }
    isSame(comparisonDate, unit) {
        return _class_private_field_get(this, _date).isSame(parseDate(comparisonDate), unit);
    }
    isBefore(comparisonDate) {
        return _class_private_field_get(this, _date).isBefore(parseDate(comparisonDate));
    }
    isAfter(comparisonDate) {
        return _class_private_field_get(this, _date).isAfter(parseDate(comparisonDate));
    }
    isSameOrAfter(comparisonDate) {
        return _class_private_field_get(this, _date).isSameOrAfter(parseDate(comparisonDate));
    }
    isSameOrBefore(comparisonDate) {
        return _class_private_field_get(this, _date).isSameOrBefore(parseDate(comparisonDate));
    }
    isBetween(startDate, endDate, unit, inclusivity) {
        return _class_private_field_get(this, _date).isBetween(parseDate(startDate), parseDate(endDate), unit, inclusivity);
    }
    diff(comparisonDate, unit, isTruncated = false) {
        return _class_private_field_get(this, _date).diff(comparisonDate.dayjs, unit, isTruncated);
    }
    getFrom(date) {
        return _class_private_field_get(this, _date).from(parseDate(date));
    }
    get fromNow() {
        return _class_private_field_get(this, _date).fromNow();
    }
    getTo(date) {
        return _class_private_field_get(this, _date).to(parseDate(date));
    }
    get toNow() {
        return _class_private_field_get(this, _date).toNow();
    }
    constructor(date, format){
        _class_private_field_init(this, _date, {
            writable: true,
            value: void 0
        });
        _class_private_field_set(this, _date, this._dayjs(date, format));
    }
};
const parseDate = (date)=>{
    if (typeof date === 'number') return date * 1000;
    return date instanceof Time ? date.dayjs : date;
};
const time = (date, format)=>{
    return new Time(date, format);
} /*#__PURE__*/  /*#__PURE__*/  /*#__PURE__*/  /*#__PURE__*/  /*#__PURE__*/  /*#__PURE__*/  /*#__PURE__*/  /*#__PURE__*/  /*#__PURE__*/  /*#__PURE__*/  /*#__PURE__*/  /*#__PURE__*/ ;

//# sourceMappingURL=data:application/json;base64,