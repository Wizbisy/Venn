"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    parseConfig: function() {
        return parseConfig;
    },
    parseNumberString: function() {
        return parseNumberString;
    }
});
const _const = require("../const");
const _helpers = require("../helpers");
const _assertions = require("./assertions");
const _bn = require("./bn");
const parseNumberString = (_value)=>{
    let val = _value.trim();
    (0, _helpers.assert)((0, _helpers.isFixedPointString)(val), 'Invalid fixed point string value');
    while(val.length !== 1 && val[0] === '0' && val[1] !== '.'){
        val = val.substring(1);
    }
    const match = val.match(_const.NUMBER_REGEX);
    const sign = match[1];
    const whole = sign + match[2];
    var _match_;
    const fractional = ((_match_ = match[3]) !== null && _match_ !== void 0 ? _match_ : '').replace('.', '').slice(0, _bn.BN.precision);
    const isFractionalZero = !fractional || fractional.match(/^(0+)$/);
    const isWholeZero = whole === '0' || whole.replaceAll('0', '') === '';
    const exponential = match[4];
    const exponentialSign = exponential === null || exponential === void 0 ? void 0 : exponential.slice(1, 2);
    const exponentialDecimals = Number(exponential === null || exponential === void 0 ? void 0 : exponential.slice(2));
    if (isWholeZero && isFractionalZero) return '0';
    let result = whole.padEnd(whole.length + _bn.BN.precision, '0');
    if (!fractional) return fromExp(result, exponentialSign, exponentialDecimals);
    result = (isWholeZero ? '' : whole) + fractional.padEnd(_bn.BN.precision, '0');
    return fromExp(result, exponentialSign, exponentialDecimals);
};
const fromExp = (value, sign, decimals)=>{
    if (!sign || !decimals) return value;
    if (sign === '+') return value.padEnd(value.length + decimals, '0');
    if (decimals > value.length) return '0';
    return value.slice(0, value.length - decimals);
};
const parseConfig = (config)=>{
    const cfg = typeof config === 'number' ? {
        decimals: config
    } : config;
    (0, _assertions.assertDecimalsInteger)(cfg.decimals);
    (0, _helpers.assert)(Boolean(cfg.decimals), 'Decimals cannot be zero or undefined');
    (0, _helpers.assert)(cfg.decimals > 0, 'Decimals cannot be negative');
    return cfg;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ibi9wYXJzZXJzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5VTUJFUl9SRUdFWCB9IGZyb20gJ0AvY29uc3QnXG5pbXBvcnQgeyBhc3NlcnQsIGlzRml4ZWRQb2ludFN0cmluZyB9IGZyb20gJ0AvaGVscGVycydcbmltcG9ydCB0eXBlIHsgQm5Db25maWcsIEJuQ29uZmlnTGlrZSB9IGZyb20gJ0AvdHlwZXMnXG5cbmltcG9ydCB7IGFzc2VydERlY2ltYWxzSW50ZWdlciB9IGZyb20gJy4vYXNzZXJ0aW9ucydcbmltcG9ydCB7IEJOIH0gZnJvbSAnLi9ibidcblxuZXhwb3J0IGNvbnN0IHBhcnNlTnVtYmVyU3RyaW5nID0gKF92YWx1ZTogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgbGV0IHZhbCA9IF92YWx1ZS50cmltKClcblxuICBhc3NlcnQoaXNGaXhlZFBvaW50U3RyaW5nKHZhbCksICdJbnZhbGlkIGZpeGVkIHBvaW50IHN0cmluZyB2YWx1ZScpXG5cbiAgd2hpbGUgKHZhbC5sZW5ndGggIT09IDEgJiYgdmFsWzBdID09PSAnMCcgJiYgdmFsWzFdICE9PSAnLicpIHtcbiAgICB2YWwgPSB2YWwuc3Vic3RyaW5nKDEpXG4gIH1cblxuICBjb25zdCBtYXRjaCA9IHZhbC5tYXRjaChOVU1CRVJfUkVHRVgpIVxuICBjb25zdCBzaWduID0gbWF0Y2hbMV1cbiAgY29uc3Qgd2hvbGUgPSBzaWduICsgbWF0Y2hbMl1cbiAgY29uc3QgZnJhY3Rpb25hbCA9IChtYXRjaFszXSA/PyAnJykucmVwbGFjZSgnLicsICcnKS5zbGljZSgwLCBCTi5wcmVjaXNpb24pXG4gIGNvbnN0IGlzRnJhY3Rpb25hbFplcm8gPSAhZnJhY3Rpb25hbCB8fCBmcmFjdGlvbmFsLm1hdGNoKC9eKDArKSQvKVxuICBjb25zdCBpc1dob2xlWmVybyA9IHdob2xlID09PSAnMCcgfHwgd2hvbGUucmVwbGFjZUFsbCgnMCcsICcnKSA9PT0gJydcblxuICBjb25zdCBleHBvbmVudGlhbCA9IG1hdGNoWzRdXG4gIGNvbnN0IGV4cG9uZW50aWFsU2lnbiA9IGV4cG9uZW50aWFsPy5zbGljZSgxLCAyKVxuICBjb25zdCBleHBvbmVudGlhbERlY2ltYWxzID0gTnVtYmVyKGV4cG9uZW50aWFsPy5zbGljZSgyKSlcblxuICBpZiAoaXNXaG9sZVplcm8gJiYgaXNGcmFjdGlvbmFsWmVybykgcmV0dXJuICcwJ1xuXG4gIGxldCByZXN1bHQgPSB3aG9sZS5wYWRFbmQod2hvbGUubGVuZ3RoICsgQk4ucHJlY2lzaW9uLCAnMCcpXG5cbiAgaWYgKCFmcmFjdGlvbmFsKSByZXR1cm4gZnJvbUV4cChyZXN1bHQsIGV4cG9uZW50aWFsU2lnbiwgZXhwb25lbnRpYWxEZWNpbWFscylcblxuICByZXN1bHQgPSAoaXNXaG9sZVplcm8gPyAnJyA6IHdob2xlKSArIGZyYWN0aW9uYWwucGFkRW5kKEJOLnByZWNpc2lvbiwgJzAnKVxuXG4gIHJldHVybiBmcm9tRXhwKHJlc3VsdCwgZXhwb25lbnRpYWxTaWduLCBleHBvbmVudGlhbERlY2ltYWxzKVxufVxuXG5jb25zdCBmcm9tRXhwID0gKHZhbHVlOiBzdHJpbmcsIHNpZ24/OiBzdHJpbmcsIGRlY2ltYWxzPzogbnVtYmVyKSA9PiB7XG4gIGlmICghc2lnbiB8fCAhZGVjaW1hbHMpIHJldHVybiB2YWx1ZVxuICBpZiAoc2lnbiA9PT0gJysnKSByZXR1cm4gdmFsdWUucGFkRW5kKHZhbHVlLmxlbmd0aCArIGRlY2ltYWxzLCAnMCcpXG4gIGlmIChkZWNpbWFscyA+IHZhbHVlLmxlbmd0aCkgcmV0dXJuICcwJ1xuXG4gIHJldHVybiB2YWx1ZS5zbGljZSgwLCB2YWx1ZS5sZW5ndGggLSBkZWNpbWFscylcbn1cblxuZXhwb3J0IGNvbnN0IHBhcnNlQ29uZmlnID0gKGNvbmZpZzogQm5Db25maWdMaWtlKTogQm5Db25maWcgPT4ge1xuICBjb25zdCBjZmcgPSB0eXBlb2YgY29uZmlnID09PSAnbnVtYmVyJyA/IHsgZGVjaW1hbHM6IGNvbmZpZyB9IDogY29uZmlnXG4gIGFzc2VydERlY2ltYWxzSW50ZWdlcihjZmcuZGVjaW1hbHMpXG4gIGFzc2VydChCb29sZWFuKGNmZy5kZWNpbWFscyksICdEZWNpbWFscyBjYW5ub3QgYmUgemVybyBvciB1bmRlZmluZWQnKVxuICBhc3NlcnQoY2ZnLmRlY2ltYWxzID4gMCwgJ0RlY2ltYWxzIGNhbm5vdCBiZSBuZWdhdGl2ZScpXG4gIHJldHVybiBjZmdcbn1cbiJdLCJuYW1lcyI6WyJwYXJzZUNvbmZpZyIsInBhcnNlTnVtYmVyU3RyaW5nIiwiX3ZhbHVlIiwidmFsIiwidHJpbSIsImFzc2VydCIsImlzRml4ZWRQb2ludFN0cmluZyIsImxlbmd0aCIsInN1YnN0cmluZyIsIm1hdGNoIiwiTlVNQkVSX1JFR0VYIiwic2lnbiIsIndob2xlIiwiZnJhY3Rpb25hbCIsInJlcGxhY2UiLCJzbGljZSIsIkJOIiwicHJlY2lzaW9uIiwiaXNGcmFjdGlvbmFsWmVybyIsImlzV2hvbGVaZXJvIiwicmVwbGFjZUFsbCIsImV4cG9uZW50aWFsIiwiZXhwb25lbnRpYWxTaWduIiwiZXhwb25lbnRpYWxEZWNpbWFscyIsIk51bWJlciIsInJlc3VsdCIsInBhZEVuZCIsImZyb21FeHAiLCJ2YWx1ZSIsImRlY2ltYWxzIiwiY29uZmlnIiwiY2ZnIiwiYXNzZXJ0RGVjaW1hbHNJbnRlZ2VyIiwiQm9vbGVhbiJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQThDYUEsV0FBVztlQUFYQTs7SUF2Q0FDLGlCQUFpQjtlQUFqQkE7Ozt1QkFQZ0I7eUJBQ2M7NEJBR0w7b0JBQ25CO0FBRVosTUFBTUEsb0JBQW9CLENBQUNDO0lBQ2hDLElBQUlDLE1BQU1ELE9BQU9FLElBQUk7SUFFckJDLElBQUFBLGVBQU0sRUFBQ0MsSUFBQUEsMkJBQWtCLEVBQUNILE1BQU07SUFFaEMsTUFBT0EsSUFBSUksTUFBTSxLQUFLLEtBQUtKLEdBQUcsQ0FBQyxFQUFFLEtBQUssT0FBT0EsR0FBRyxDQUFDLEVBQUUsS0FBSyxJQUFLO1FBQzNEQSxNQUFNQSxJQUFJSyxTQUFTLENBQUM7SUFDdEI7SUFFQSxNQUFNQyxRQUFRTixJQUFJTSxLQUFLLENBQUNDLG1CQUFZO0lBQ3BDLE1BQU1DLE9BQU9GLEtBQUssQ0FBQyxFQUFFO0lBQ3JCLE1BQU1HLFFBQVFELE9BQU9GLEtBQUssQ0FBQyxFQUFFO1FBQ1RBO0lBQXBCLE1BQU1JLGFBQWEsQUFBQ0osQ0FBQUEsQ0FBQUEsVUFBQUEsS0FBSyxDQUFDLEVBQUUsY0FBUkEscUJBQUFBLFVBQVksRUFBQyxFQUFHSyxPQUFPLENBQUMsS0FBSyxJQUFJQyxLQUFLLENBQUMsR0FBR0MsTUFBRSxDQUFDQyxTQUFTO0lBQzFFLE1BQU1DLG1CQUFtQixDQUFDTCxjQUFjQSxXQUFXSixLQUFLLENBQUM7SUFDekQsTUFBTVUsY0FBY1AsVUFBVSxPQUFPQSxNQUFNUSxVQUFVLENBQUMsS0FBSyxRQUFRO0lBRW5FLE1BQU1DLGNBQWNaLEtBQUssQ0FBQyxFQUFFO0lBQzVCLE1BQU1hLGtCQUFrQkQsd0JBQUFBLGtDQUFBQSxZQUFhTixLQUFLLENBQUMsR0FBRztJQUM5QyxNQUFNUSxzQkFBc0JDLE9BQU9ILHdCQUFBQSxrQ0FBQUEsWUFBYU4sS0FBSyxDQUFDO0lBRXRELElBQUlJLGVBQWVELGtCQUFrQixPQUFPO0lBRTVDLElBQUlPLFNBQVNiLE1BQU1jLE1BQU0sQ0FBQ2QsTUFBTUwsTUFBTSxHQUFHUyxNQUFFLENBQUNDLFNBQVMsRUFBRTtJQUV2RCxJQUFJLENBQUNKLFlBQVksT0FBT2MsUUFBUUYsUUFBUUgsaUJBQWlCQztJQUV6REUsU0FBUyxBQUFDTixDQUFBQSxjQUFjLEtBQUtQLEtBQUksSUFBS0MsV0FBV2EsTUFBTSxDQUFDVixNQUFFLENBQUNDLFNBQVMsRUFBRTtJQUV0RSxPQUFPVSxRQUFRRixRQUFRSCxpQkFBaUJDO0FBQzFDO0FBRUEsTUFBTUksVUFBVSxDQUFDQyxPQUFlakIsTUFBZWtCO0lBQzdDLElBQUksQ0FBQ2xCLFFBQVEsQ0FBQ2tCLFVBQVUsT0FBT0Q7SUFDL0IsSUFBSWpCLFNBQVMsS0FBSyxPQUFPaUIsTUFBTUYsTUFBTSxDQUFDRSxNQUFNckIsTUFBTSxHQUFHc0IsVUFBVTtJQUMvRCxJQUFJQSxXQUFXRCxNQUFNckIsTUFBTSxFQUFFLE9BQU87SUFFcEMsT0FBT3FCLE1BQU1iLEtBQUssQ0FBQyxHQUFHYSxNQUFNckIsTUFBTSxHQUFHc0I7QUFDdkM7QUFFTyxNQUFNN0IsY0FBYyxDQUFDOEI7SUFDMUIsTUFBTUMsTUFBTSxPQUFPRCxXQUFXLFdBQVc7UUFBRUQsVUFBVUM7SUFBTyxJQUFJQTtJQUNoRUUsSUFBQUEsaUNBQXFCLEVBQUNELElBQUlGLFFBQVE7SUFDbEN4QixJQUFBQSxlQUFNLEVBQUM0QixRQUFRRixJQUFJRixRQUFRLEdBQUc7SUFDOUJ4QixJQUFBQSxlQUFNLEVBQUMwQixJQUFJRixRQUFRLEdBQUcsR0FBRztJQUN6QixPQUFPRTtBQUNUIn0=