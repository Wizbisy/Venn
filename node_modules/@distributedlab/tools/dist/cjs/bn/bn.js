"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "BN", {
    enumerable: true,
    get: function() {
        return BN;
    }
});
const _const = require("../const");
const _enums = require("../enums");
const _helpers = require("../helpers");
const _assertions = require("./assertions");
const _decimals = require("./decimals");
const _format = require("./format");
const _parsers = require("./parsers");
const _round = require("./round");
function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _class_apply_descriptor_get(receiver, descriptor) {
    if (descriptor.get) {
        return descriptor.get.call(receiver);
    }
    return descriptor.value;
}
function _class_apply_descriptor_set(receiver, descriptor, value) {
    if (descriptor.set) {
        descriptor.set.call(receiver, value);
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
    }
}
function _class_extract_field_descriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
}
function _class_private_field_get(receiver, privateMap) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "get");
    return _class_apply_descriptor_get(receiver, descriptor);
}
function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function _class_private_field_set(receiver, privateMap, value) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "set");
    _class_apply_descriptor_set(receiver, descriptor, value);
    return value;
}
function _class_private_method_get(receiver, privateSet, fn) {
    if (!privateSet.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return fn;
}
function _class_private_method_init(obj, privateSet) {
    _check_private_redeclaration(obj, privateSet);
    privateSet.add(obj);
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
let globalConfig = {
    precision: _const.DEFAULT_BN_PRECISION,
    rounding: _enums.BN_ROUNDING.DEFAULT,
    decimals: _enums.DECIMALS.WEI,
    format: {
        prefix: '',
        decimalSeparator: '.',
        groupSeparator: ',',
        groupSize: 3,
        fractionGroupSeparator: ' ',
        fractionGroupSize: 0,
        suffix: ''
    }
};
var _raw = new WeakMap(), _cfg = new WeakMap(), _tens = new WeakMap(), _one = new WeakMap(), _hundred = new WeakMap(), _toDecimals = new WeakSet(), _percentToFraction = new WeakSet();
let BN = class BN {
    /**
   * Solidity maximum uint256 value.
   */ static get MAX_UINT256() {
        return BN.fromBigInt(2n ** 256n - 1n, 1);
    }
    static get WEI_DECIMALS() {
        return _enums.DECIMALS.WEI;
    }
    static get ROUNDING() {
        return _enums.BN_ROUNDING;
    }
    /**
   * {@link BN} class global config.
   */ static get config() {
        return globalConfig;
    }
    /**
   * {@link BN} class global precision.
   */ static get precision() {
        return globalConfig.precision;
    }
    /**
   * Sets new {@link BnGlobalConfig} config to the {@link BN}.
   */ static setConfig(config) {
        globalConfig = _object_spread({}, globalConfig, config);
    }
    /**
   *
   * @returns `true` if `arg` is {@link BN} instance.
   */ static isBn(arg) {
        return arg instanceof BN;
    }
    /**
   * @returns A new {@link BN} if `value` argument is valid big int like value,
   * otherwise throws {@link RuntimeError}.
   *
   * @example
   * ```ts
   * const oneEth = BN.fromBigInt('1000000000000000000', 18)
   * ```
   */ static fromBigInt(value, decimalsOrConfig) {
        let val = value;
        if (typeof val === 'string') {
            val = (0, _helpers.isHex)(val) ? BigInt(val).toString() : val;
            (0, _helpers.assert)((0, _helpers.isIntegerString)(val), 'Invalid big int string');
        }
        const cfg = (0, _parsers.parseConfig)(decimalsOrConfig !== null && decimalsOrConfig !== void 0 ? decimalsOrConfig : BN.config.decimals);
        const parsed = BigInt(BN.isBn(val) ? val.value : val);
        const withPrecision = parsed * (0, _decimals.getTens)(BN.precision - cfg.decimals);
        return new BN(withPrecision, cfg);
    }
    /**
   * @returns A new {@link BN} if `value` argument is valid integer or float value,
   * otherwise throws {@link RuntimeError}.
   * @example
   * ```ts
   * const oneEth = BN.fromRaw(1, 18)
   * ```
   */ static fromRaw(value, decimalsOrConfig) {
        const val = String(value);
        const cfg = (0, _parsers.parseConfig)(decimalsOrConfig !== null && decimalsOrConfig !== void 0 ? decimalsOrConfig : BN.config.decimals);
        return new BN(BigInt((0, _parsers.parseNumberString)(val)), cfg);
    }
    /**
   *  @returns A minimum {@link BN} value from the `args`.
   */ static min(...args) {
        return args.reduce((min, el)=>el.raw < min.raw ? el : min);
    }
    /**
   *  @returns A maximum {@link BN} value from the `args`.
   */ static max(...args) {
        return args.reduce((min, el)=>el.raw > min.raw ? el : min);
    }
    /**
   *  @returns A `this` config.
   */ get config() {
        return _class_private_field_get(this, _cfg);
    }
    /**
   *  @returns The number of decimal places
   */ get decimals() {
        return _class_private_field_get(this, _cfg).decimals;
    }
    /**
   *  @returns `true` if the `this` value is zero.
   */ get isZero() {
        return _class_private_field_get(this, _raw) === 0n;
    }
    /**
   *  @returns `true` if the `this` value is positive.
   */ get isPositive() {
        return _class_private_field_get(this, _raw) > 0n;
    }
    /**
   *  @returns `true` if the `this` value is negative.
   */ get isNegative() {
        return _class_private_field_get(this, _raw) < 0n;
    }
    /**
   *  @returns A raw {@link BigInt} value with the {@link BN.precision} applied.
   */ get raw() {
        return _class_private_field_get(this, _raw);
    }
    /**
   *  @returns A big int string value with the `this.decimals` applied.
   */ get value() {
        return (0, _decimals.toDecimals)(_class_private_field_get(this, _raw), BN.precision, _class_private_field_get(this, _cfg).decimals).toString();
    }
    /**
   *  @returns A new {@link BN} with the result of this added to `other`.
   */ add(other) {
        return new BN(_class_private_field_get(this, _raw) + other.raw, _class_private_field_get(this, _cfg));
    }
    /**
   *  @returns A new {@link BN} with the result of other subtracted from this.
   */ sub(other) {
        return new BN(_class_private_field_get(this, _raw) - other.raw, _class_private_field_get(this, _cfg));
    }
    /**
   *  @returns A new {@link BN} with the result of this divided by `other`.
   */ div(other) {
        (0, _helpers.assert)(other.raw !== 0n, 'Cannot divide by zero');
        return new BN(_class_private_field_get(this, _raw) * _class_private_field_get(this, _tens) / other.raw, _class_private_field_get(this, _cfg));
    }
    /**
   *  @returns A new {@link BN} with the result of this multiplied by `other`.
   */ mul(other) {
        return new BN(_class_private_field_get(this, _raw) * other.raw / _class_private_field_get(this, _tens), _class_private_field_get(this, _cfg));
    }
    /**
   *  @returns A comparison result between this and other.
   */ cmp(other) {
        const a = _class_private_field_get(this, _raw);
        const b = other.raw;
        if (a < b) return -1;
        if (a > b) return 1;
        return 0;
    }
    /**
   *  @returns `true` if `other` is equal to `this`.
   */ eq(other) {
        return this.cmp(other) === 0;
    }
    /**
   *  @returns `true` if `other` is less than to `this`.
   */ lt(other) {
        return this.cmp(other) < 0;
    }
    /**
   *  @returns `true` if `other` is less than or equal to `this`.
   */ lte(other) {
        return this.cmp(other) <= 0;
    }
    /**
   *  @returns `true` if `other` is greater than to `this`.
   */ gt(other) {
        return this.cmp(other) > 0;
    }
    /**
   *  @returns `true` if `other` is greater than or equal to `this`.
   */ gte(other) {
        return this.cmp(other) >= 0;
    }
    /**
   * @returns A new {@link BN} whose value is the square root of `this`.
   * @throws {@link RuntimeError} if `BN.precision` is not even number.
   */ sqrt() {
        (0, _helpers.assert)(!this.isNegative, 'sqrt of negative numbers is not supported');
        if (this.isZero) return this;
        const base = this.raw * _class_private_field_get(this, _tens);
        let x0 = base / 2n;
        let x1 = (x0 + base / x0) / 2n;
        while(x0 - x1 > 1n){
            x0 = x1;
            x1 = (x0 + base / x0) / 2n;
        }
        return new BN(x1, _class_private_field_get(this, _cfg));
    }
    /**
   * @returns A new {@link BN} whose value is negated `this` (multiplied by -1).
   */ negated() {
        return new BN(_class_private_field_get(this, _raw) * -1n, _class_private_field_get(this, _cfg));
    }
    /**
   * @returns A new {@link BN} whose value is absolute `this`.
   */ abs() {
        return this.isPositive ? this : this.negated();
    }
    /**
   * @returns A new {@link BN} whose value is `this` raised to the power of `exponent`.
   */ pow(exponent) {
        (0, _assertions.assertDecimalsInteger)(exponent);
        const exp = BigInt(exponent);
        const fr = (0, _decimals.getTens)(Number(BigInt(BN.precision) * (exp - 1n)));
        return new BN(_class_private_field_get(this, _raw) ** exp / fr, _class_private_field_get(this, _cfg));
    }
    /**
   * @returns A new {@link BN} whose value is percentage of `this` value.
   */ percent(percent) {
        return this.mul(_class_private_method_get(this, _percentToFraction, percentToFraction).call(this, percent));
    }
    /**
   * @returns A new {@link BN} whose value is `this` with added percentage.
   */ addPercent(percent) {
        return this.mul(_class_private_field_get(this, _one).add(_class_private_method_get(this, _percentToFraction, percentToFraction).call(this, percent)));
    }
    /**
   * @returns A new {@link BN} whose value is `this` with subtracted percentage.
   */ subPercent(percent) {
        return this.div(_class_private_field_get(this, _one).add(_class_private_method_get(this, _percentToFraction, percentToFraction).call(this, percent)));
    }
    /**
   * @returns A new {@link BN} with the provided decimals.
   */ toDecimals(decimals) {
        if (decimals === _class_private_field_get(this, _cfg).decimals) return this;
        return decimals > _class_private_field_get(this, _cfg).decimals ? this.toGreaterDecimals(decimals) : this.toLessDecimals(decimals);
    }
    /**
   * @returns A new {@link BN} with the provided decimals, less than current one,
   * otherwise throws {@link RuntimeError}.
   */ toLessDecimals(decimals) {
        (0, _assertions.assertDecimals)(_class_private_field_get(this, _cfg).decimals, decimals, _enums.BN_ASSERT_DECIMALS_OP.LESS);
        return _class_private_method_get(this, _toDecimals, toDecimals).call(this, decimals);
    }
    /**
   * @returns A new {@link BN} with the provided decimals, greater than current one,
   * otherwise throws {@link RuntimeError}.
   */ toGreaterDecimals(decimals) {
        (0, _assertions.assertDecimals)(_class_private_field_get(this, _cfg).decimals, decimals, _enums.BN_ASSERT_DECIMALS_OP.GREATER);
        return _class_private_method_get(this, _toDecimals, toDecimals).call(this, decimals);
    }
    /**
   * @returns A string representing the value of `this` fixed-point notation and
   * formatted according to the properties of the {@link BN.config.format} and
   * `format` (if exist) objects.
   */ format(format = {}) {
        return (0, _format.format)(this.toString(), _object_spread({}, BN.config.format, format));
    }
    /**
   * @returns A new {@link BN} whose value is the value of `this` rounded to
   * decimals using {@link BN_ROUNDING} rounding mode.
   */ round(decimals, rounding) {
        return BN.fromBigInt((0, _round.round)(this, decimals, rounding !== null && rounding !== void 0 ? rounding : BN.config.rounding), _object_spread_props(_object_spread({}, _class_private_field_get(this, _cfg)), {
            decimals
        }));
    }
    /**
   * @returns A human-readable float string.
   */ toString() {
        let val = this.value;
        const decimals = _class_private_field_get(this, _cfg).decimals;
        const negative = this.isNegative ? '-' : '';
        const isLessOne = val.length < decimals;
        if (this.isNegative) val = val.slice(1);
        if (isLessOne) val = val.padStart(decimals, '0');
        const pointIdx = val.length - decimals;
        val = val.slice(0, pointIdx) + '.' + val.slice(pointIdx);
        if (val.startsWith('.')) val = '0' + val;
        return negative + val;
    }
    /**
   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#description}
   */ toJSON() {
        return this.value;
    }
    /**
   *
   * @param value - Always BigInt * ten power of {@link BN.precision}
   * @param config - The config of the value.
   * @protected
   * @returns A new {@link BN} instance.
   */ constructor(value, config){
        _class_private_field_init(this, _one, {
            get: get_one,
            set: void 0
        });
        _class_private_field_init(this, _hundred, {
            get: get_hundred,
            set: void 0
        });
        _class_private_method_init(this, _toDecimals);
        _class_private_method_init(this, _percentToFraction);
        /**
   * Raw value multiplied by ten power of {@link BN.precision}.
   */ _class_private_field_init(this, _raw, {
            writable: true,
            value: void 0
        });
        /**
   * {@link BN} instance config.
   */ _class_private_field_init(this, _cfg, {
            writable: true,
            value: void 0
        });
        /**
   * Ten power of {@link BN.precision}.
   */ _class_private_field_init(this, _tens, {
            writable: true,
            value: (0, _decimals.getTens)(BN.precision)
        });
        _class_private_field_set(this, _raw, value);
        _class_private_field_set(this, _cfg, config);
    }
} /*#__PURE__*/  /*#__PURE__*/  /*#__PURE__*/  /*#__PURE__*/  /*#__PURE__*/  /*#__PURE__*/  /*#__PURE__*/ ;
function get_one() {
    return BN.fromRaw(1, _class_private_field_get(this, _cfg));
}
function get_hundred() {
    return BN.fromRaw(100, _class_private_field_get(this, _cfg));
}
function toDecimals(decimals) {
    return new BN(_class_private_field_get(this, _raw), _object_spread_props(_object_spread({}, _class_private_field_get(this, _cfg)), {
        decimals
    }));
}
function percentToFraction(percent) {
    return BN.fromRaw(percent, _class_private_field_get(this, _cfg)).div(_class_private_field_get(this, _hundred));
}

//# sourceMappingURL=data:application/json;base64,