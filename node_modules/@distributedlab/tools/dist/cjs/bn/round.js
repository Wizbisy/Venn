"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "round", {
    enumerable: true,
    get: function() {
        return round;
    }
});
const _bn = require("./bn");
const _decimals = require("./decimals");
const _enums = require("../enums");
const round = (bn, decimals, mode)=>{
    const precisioned = (0, _decimals.toDecimals)(bn.raw, _bn.BN.precision, decimals + 1).toString();
    const isNegative = bn.isNegative;
    const num = BigInt(precisioned.slice(0, -1));
    const remainder = BigInt(precisioned.slice(-1));
    const sign = isNegative ? -1n : 1n;
    const absNum = sign * num;
    switch(mode){
        case _enums.BN_ROUNDING.UP:
            return roundUp(sign, absNum, remainder);
        case _enums.BN_ROUNDING.DOWN:
            return roundDown(sign, absNum);
        case _enums.BN_ROUNDING.CEIL:
            if (isNegative) return roundDown(sign, absNum);
            return roundUp(sign, absNum, remainder);
        case _enums.BN_ROUNDING.FLOOR:
            if (isNegative) return roundUp(sign, absNum, remainder);
            return roundDown(sign, absNum);
        case _enums.BN_ROUNDING.HALF_UP:
            return roundHalfUp(sign, absNum, remainder);
        case _enums.BN_ROUNDING.HALF_DOWN:
            return roundHalfDown(sign, absNum, remainder);
        case _enums.BN_ROUNDING.HALF_CEIL:
            if (isNegative) return roundHalfDown(sign, absNum, remainder);
            return roundHalfUp(sign, absNum, remainder);
        case _enums.BN_ROUNDING.HALF_FLOOR:
            if (isNegative) return roundHalfUp(sign, absNum, remainder);
            return roundHalfDown(sign, absNum, remainder);
        default:
            throw new Error('Invalid rounding mode');
    }
};
const roundUp = (sign, absNum, remainder)=>{
    return sign * (remainder > 0n ? absNum + 1n : absNum);
};
const roundDown = (sign, absNum)=>{
    return sign * absNum;
};
const roundHalfUp = (sign, absNum, remainder)=>{
    return sign * (remainder >= 5n ? absNum + 1n : absNum);
};
const roundHalfDown = (sign, absNum, remainder)=>{
    return sign * (remainder > 5n ? absNum + 1n : absNum);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ibi9yb3VuZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCTiB9IGZyb20gJ0AvYm4vYm4nXG5pbXBvcnQgeyB0b0RlY2ltYWxzIH0gZnJvbSAnQC9ibi9kZWNpbWFscydcbmltcG9ydCB7IEJOX1JPVU5ESU5HIH0gZnJvbSAnQC9lbnVtcydcblxuZXhwb3J0IGNvbnN0IHJvdW5kID0gKGJuOiBCTiwgZGVjaW1hbHM6IG51bWJlciwgbW9kZTogQk5fUk9VTkRJTkcpID0+IHtcbiAgY29uc3QgcHJlY2lzaW9uZWQgPSB0b0RlY2ltYWxzKGJuLnJhdywgQk4ucHJlY2lzaW9uLCBkZWNpbWFscyArIDEpLnRvU3RyaW5nKClcblxuICBjb25zdCBpc05lZ2F0aXZlID0gYm4uaXNOZWdhdGl2ZVxuICBjb25zdCBudW0gPSBCaWdJbnQocHJlY2lzaW9uZWQuc2xpY2UoMCwgLTEpKVxuICBjb25zdCByZW1haW5kZXIgPSBCaWdJbnQocHJlY2lzaW9uZWQuc2xpY2UoLTEpKVxuICBjb25zdCBzaWduID0gaXNOZWdhdGl2ZSA/IC0xbiA6IDFuXG4gIGNvbnN0IGFic051bSA9IHNpZ24gKiBudW1cblxuICBzd2l0Y2ggKG1vZGUpIHtcbiAgICBjYXNlIEJOX1JPVU5ESU5HLlVQOlxuICAgICAgcmV0dXJuIHJvdW5kVXAoc2lnbiwgYWJzTnVtLCByZW1haW5kZXIpXG4gICAgY2FzZSBCTl9ST1VORElORy5ET1dOOlxuICAgICAgcmV0dXJuIHJvdW5kRG93bihzaWduLCBhYnNOdW0pXG4gICAgY2FzZSBCTl9ST1VORElORy5DRUlMOlxuICAgICAgaWYgKGlzTmVnYXRpdmUpIHJldHVybiByb3VuZERvd24oc2lnbiwgYWJzTnVtKVxuICAgICAgcmV0dXJuIHJvdW5kVXAoc2lnbiwgYWJzTnVtLCByZW1haW5kZXIpXG4gICAgY2FzZSBCTl9ST1VORElORy5GTE9PUjpcbiAgICAgIGlmIChpc05lZ2F0aXZlKSByZXR1cm4gcm91bmRVcChzaWduLCBhYnNOdW0sIHJlbWFpbmRlcilcbiAgICAgIHJldHVybiByb3VuZERvd24oc2lnbiwgYWJzTnVtKVxuICAgIGNhc2UgQk5fUk9VTkRJTkcuSEFMRl9VUDpcbiAgICAgIHJldHVybiByb3VuZEhhbGZVcChzaWduLCBhYnNOdW0sIHJlbWFpbmRlcilcbiAgICBjYXNlIEJOX1JPVU5ESU5HLkhBTEZfRE9XTjpcbiAgICAgIHJldHVybiByb3VuZEhhbGZEb3duKHNpZ24sIGFic051bSwgcmVtYWluZGVyKVxuICAgIGNhc2UgQk5fUk9VTkRJTkcuSEFMRl9DRUlMOlxuICAgICAgaWYgKGlzTmVnYXRpdmUpIHJldHVybiByb3VuZEhhbGZEb3duKHNpZ24sIGFic051bSwgcmVtYWluZGVyKVxuICAgICAgcmV0dXJuIHJvdW5kSGFsZlVwKHNpZ24sIGFic051bSwgcmVtYWluZGVyKVxuICAgIGNhc2UgQk5fUk9VTkRJTkcuSEFMRl9GTE9PUjpcbiAgICAgIGlmIChpc05lZ2F0aXZlKSByZXR1cm4gcm91bmRIYWxmVXAoc2lnbiwgYWJzTnVtLCByZW1haW5kZXIpXG4gICAgICByZXR1cm4gcm91bmRIYWxmRG93bihzaWduLCBhYnNOdW0sIHJlbWFpbmRlcilcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJvdW5kaW5nIG1vZGUnKVxuICB9XG59XG5cbmNvbnN0IHJvdW5kVXAgPSAoc2lnbjogYmlnaW50LCBhYnNOdW06IGJpZ2ludCwgcmVtYWluZGVyOiBiaWdpbnQpID0+IHtcbiAgcmV0dXJuIHNpZ24gKiAocmVtYWluZGVyID4gMG4gPyBhYnNOdW0gKyAxbiA6IGFic051bSlcbn1cblxuY29uc3Qgcm91bmREb3duID0gKHNpZ246IGJpZ2ludCwgYWJzTnVtOiBiaWdpbnQpID0+IHtcbiAgcmV0dXJuIHNpZ24gKiBhYnNOdW1cbn1cblxuY29uc3Qgcm91bmRIYWxmVXAgPSAoc2lnbjogYmlnaW50LCBhYnNOdW06IGJpZ2ludCwgcmVtYWluZGVyOiBiaWdpbnQpID0+IHtcbiAgcmV0dXJuIHNpZ24gKiAocmVtYWluZGVyID49IDVuID8gYWJzTnVtICsgMW4gOiBhYnNOdW0pXG59XG5cbmNvbnN0IHJvdW5kSGFsZkRvd24gPSAoc2lnbjogYmlnaW50LCBhYnNOdW06IGJpZ2ludCwgcmVtYWluZGVyOiBiaWdpbnQpID0+IHtcbiAgcmV0dXJuIHNpZ24gKiAocmVtYWluZGVyID4gNW4gPyBhYnNOdW0gKyAxbiA6IGFic051bSlcbn1cbiJdLCJuYW1lcyI6WyJyb3VuZCIsImJuIiwiZGVjaW1hbHMiLCJtb2RlIiwicHJlY2lzaW9uZWQiLCJ0b0RlY2ltYWxzIiwicmF3IiwiQk4iLCJwcmVjaXNpb24iLCJ0b1N0cmluZyIsImlzTmVnYXRpdmUiLCJudW0iLCJCaWdJbnQiLCJzbGljZSIsInJlbWFpbmRlciIsInNpZ24iLCJhYnNOdW0iLCJCTl9ST1VORElORyIsIlVQIiwicm91bmRVcCIsIkRPV04iLCJyb3VuZERvd24iLCJDRUlMIiwiRkxPT1IiLCJIQUxGX1VQIiwicm91bmRIYWxmVXAiLCJIQUxGX0RPV04iLCJyb3VuZEhhbGZEb3duIiwiSEFMRl9DRUlMIiwiSEFMRl9GTE9PUiIsIkVycm9yIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQUlhQTs7O2VBQUFBOzs7b0JBSk07MEJBQ1E7dUJBQ0M7QUFFckIsTUFBTUEsUUFBUSxDQUFDQyxJQUFRQyxVQUFrQkM7SUFDOUMsTUFBTUMsY0FBY0MsSUFBQUEsb0JBQVUsRUFBQ0osR0FBR0ssR0FBRyxFQUFFQyxNQUFFLENBQUNDLFNBQVMsRUFBRU4sV0FBVyxHQUFHTyxRQUFRO0lBRTNFLE1BQU1DLGFBQWFULEdBQUdTLFVBQVU7SUFDaEMsTUFBTUMsTUFBTUMsT0FBT1IsWUFBWVMsS0FBSyxDQUFDLEdBQUcsQ0FBQztJQUN6QyxNQUFNQyxZQUFZRixPQUFPUixZQUFZUyxLQUFLLENBQUMsQ0FBQztJQUM1QyxNQUFNRSxPQUFPTCxhQUFhLENBQUMsRUFBRSxHQUFHLEVBQUU7SUFDbEMsTUFBTU0sU0FBU0QsT0FBT0o7SUFFdEIsT0FBUVI7UUFDTixLQUFLYyxrQkFBVyxDQUFDQyxFQUFFO1lBQ2pCLE9BQU9DLFFBQVFKLE1BQU1DLFFBQVFGO1FBQy9CLEtBQUtHLGtCQUFXLENBQUNHLElBQUk7WUFDbkIsT0FBT0MsVUFBVU4sTUFBTUM7UUFDekIsS0FBS0Msa0JBQVcsQ0FBQ0ssSUFBSTtZQUNuQixJQUFJWixZQUFZLE9BQU9XLFVBQVVOLE1BQU1DO1lBQ3ZDLE9BQU9HLFFBQVFKLE1BQU1DLFFBQVFGO1FBQy9CLEtBQUtHLGtCQUFXLENBQUNNLEtBQUs7WUFDcEIsSUFBSWIsWUFBWSxPQUFPUyxRQUFRSixNQUFNQyxRQUFRRjtZQUM3QyxPQUFPTyxVQUFVTixNQUFNQztRQUN6QixLQUFLQyxrQkFBVyxDQUFDTyxPQUFPO1lBQ3RCLE9BQU9DLFlBQVlWLE1BQU1DLFFBQVFGO1FBQ25DLEtBQUtHLGtCQUFXLENBQUNTLFNBQVM7WUFDeEIsT0FBT0MsY0FBY1osTUFBTUMsUUFBUUY7UUFDckMsS0FBS0csa0JBQVcsQ0FBQ1csU0FBUztZQUN4QixJQUFJbEIsWUFBWSxPQUFPaUIsY0FBY1osTUFBTUMsUUFBUUY7WUFDbkQsT0FBT1csWUFBWVYsTUFBTUMsUUFBUUY7UUFDbkMsS0FBS0csa0JBQVcsQ0FBQ1ksVUFBVTtZQUN6QixJQUFJbkIsWUFBWSxPQUFPZSxZQUFZVixNQUFNQyxRQUFRRjtZQUNqRCxPQUFPYSxjQUFjWixNQUFNQyxRQUFRRjtRQUNyQztZQUNFLE1BQU0sSUFBSWdCLE1BQU07SUFDcEI7QUFDRjtBQUVBLE1BQU1YLFVBQVUsQ0FBQ0osTUFBY0MsUUFBZ0JGO0lBQzdDLE9BQU9DLE9BQVFELENBQUFBLFlBQVksRUFBRSxHQUFHRSxTQUFTLEVBQUUsR0FBR0EsTUFBSztBQUNyRDtBQUVBLE1BQU1LLFlBQVksQ0FBQ04sTUFBY0M7SUFDL0IsT0FBT0QsT0FBT0M7QUFDaEI7QUFFQSxNQUFNUyxjQUFjLENBQUNWLE1BQWNDLFFBQWdCRjtJQUNqRCxPQUFPQyxPQUFRRCxDQUFBQSxhQUFhLEVBQUUsR0FBR0UsU0FBUyxFQUFFLEdBQUdBLE1BQUs7QUFDdEQ7QUFFQSxNQUFNVyxnQkFBZ0IsQ0FBQ1osTUFBY0MsUUFBZ0JGO0lBQ25ELE9BQU9DLE9BQVFELENBQUFBLFlBQVksRUFBRSxHQUFHRSxTQUFTLEVBQUUsR0FBR0EsTUFBSztBQUNyRCJ9